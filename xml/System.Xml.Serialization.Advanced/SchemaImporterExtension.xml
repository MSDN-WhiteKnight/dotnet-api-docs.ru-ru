<Type Name="SchemaImporterExtension" FullName="System.Xml.Serialization.Advanced.SchemaImporterExtension">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dabcceaa84acc91858069e8be6a546269220dbad" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55404171" /></Metadata><TypeSignature Language="C#" Value="public abstract class SchemaImporterExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SchemaImporterExtension extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SchemaImporterExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class SchemaImporterExtension abstract" />
  <TypeSignature Language="F#" Value="type SchemaImporterExtension = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Позволяет настроить код, создаваемый из документа на языке WSDL (Web Services Description Language) при использовании автоматизированных средств создания запросов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Импорт схемы происходит всякий раз, когда прокси веб-службы создается с помощью средства, например диалоговое окно Add Web Reference поле, найденное в Visual Studio или с помощью [инструмент языка описания веб-служб (Wsdl.exe)](https://msdn.microsoft.com/library/b9210348-8bc2-4367-8c91-d1a04b403e88). Импорта схем также происходит при использовании [инструмент определения схемы XML (Xsd.exe)](~/docs/standard/serialization/xml-schema-definition-tool-xsd-exe.md) для создания кода из определенного документа XSD.  
  
 <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> Класс позволяет изменять код, созданный при использовании любой из этих средств. Например имеется существующий класс, обрабатывающий резервирование заказов в системе, и у вас есть существующий документ XSD, который предоставляет свои заказы. С помощью <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> класс, вы можете включить один из инструментов для создания кода, который использует ваш класс.  
  
 Для управления созданием кода, необходимо использовать классы, находящиеся в <xref:System.CodeDom> пространства имен. Дополнительные сведения см. в разделе [использование CodeDOM](~/docs/framework/reflection-and-codedom/using-the-codedom.md) и [краткий справочник по CodeDOM](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx).  
  
 Приведены шаги для включения инструмента WSDL.exe (который в свою очередь используется другими средствами, такими как диалоговое окно Add Web Reference) для использования расширения.  
  
1.  Реализация интерфейса <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> класса.  
  
2.  Используйте <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%2A> метод писать код для генератора кода. Этот метод содержит параметры, которые позволяют проверить перехватываемых типов XSD и создания объектов CodeDOM, которые используются для создания нового кода среды CLR.  
  
3.  При необходимости использовать <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportAnyElement%2A> метод для обработки \<xsd: любой > элементы, найденные в документе XSD.  
  
4.  При необходимости использовать <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportDefaultValue%2A> метод для проверки значения по умолчанию см. в документе XSD и возвращают значение по умолчанию.  
  
5.  Скомпилируйте расширение в библиотеку.  
  
6.  Подпишите сборку.  
  
7.  Установка сборки в глобальный кэш сборок (GAC).  
  
8.  Необходимо измените файл machine.config, чтобы включить расширение.  
  
   
  
## Examples  
 См. в разделе [образец технологии SchemaImporterExtension](~/docs/standard/serialization/schemaimporterextension-technology-sample.md). Обратите внимание на то, что в этом примере не включает подписанной сборки. Вместо этого, он демонстрирует использование <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension> с окно командной строки.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SchemaImporterExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SchemaImporterExtension();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Xml.Serialization.Advanced.SchemaImporterExtension" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportAnyElement">
      <MemberSignature Language="C#" Value="public virtual string ImportAnyElement (System.Xml.Schema.XmlSchemaAny any, bool mixed, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportAnyElement(class System.Xml.Schema.XmlSchemaAny any, bool mixed, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportAnyElement(System.Xml.Schema.XmlSchemaAny,System.Boolean,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportAnyElement (any As XmlSchemaAny, mixed As Boolean, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportAnyElement(System::Xml::Schema::XmlSchemaAny ^ any, bool mixed, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberSignature Language="F#" Value="abstract member ImportAnyElement : System.Xml.Schema.XmlSchemaAny * bool * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string&#xA;override this.ImportAnyElement : System.Xml.Schema.XmlSchemaAny * bool * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="schemaImporterExtension.ImportAnyElement (any, mixed, schemas, importer, compileUnit, mainNamespace, options, codeProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="any" Type="System.Xml.Schema.XmlSchemaAny" />
        <Parameter Name="mixed" Type="System.Boolean" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="any">Элемент <see langword="xsd:any" /> из документа схемы XML (XSD).</param>
        <param name="mixed"><see langword="true" />, если атрибут XSD <see langword="complex" /> имеет значение mixed, иначе <see langword="false" />.</param>
        <param name="schemas">Коллекция схем, находящихся в XSD.</param>
        <param name="importer">Используемый импортер.</param>
        <param name="compileUnit"><see cref="T:System.CodeDom.CodeCompileUnit" />, к которому можно добавлять структуры CodeDOM для создания альтернативного кода обработки XSD.</param>
        <param name="mainNamespace">Текущее пространство имен для элемента.</param>
        <param name="options">Битовая комбинация значений перечисления, которые указывают параметры компилятора кода.</param>
        <param name="codeProvider">Поставщик CodeDOM для создания нового кода.</param>
        <summary>Обрабатывает импорт элементов &lt;xsd:any&gt; в схеме.</summary>
        <returns>Имя типа среды CLR, на который отображается элемент.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для управления созданием кода, необходимо использовать классы, находящиеся в <xref:System.CodeDom> пространства имен. Дополнительные сведения см. в разделе [использование CodeDOM](~/docs/framework/reflection-and-codedom/using-the-codedom.md) и [краткий справочник по CodeDOM](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportDefaultValue">
      <MemberSignature Language="C#" Value="public virtual System.CodeDom.CodeExpression ImportDefaultValue (string value, string type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.CodeDom.CodeExpression ImportDefaultValue(string value, string type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportDefaultValue(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportDefaultValue (value As String, type As String) As CodeExpression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::CodeDom::CodeExpression ^ ImportDefaultValue(System::String ^ value, System::String ^ type);" />
      <MemberSignature Language="F#" Value="abstract member ImportDefaultValue : string * string -&gt; System.CodeDom.CodeExpression&#xA;override this.ImportDefaultValue : string * string -&gt; System.CodeDom.CodeExpression" Usage="schemaImporterExtension.ImportDefaultValue (value, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.String" />
        <Parameter Name="type" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">Значение, обнаруженное в исходном XSD.</param>
        <param name="type">Имя типа XSD.</param>
        <summary>Позволяет указывать значение по умолчанию для импортируемого типа XSD.</summary>
        <returns><see cref="T:System.CodeDom.CodeExpression" />, задающее новое значение по умолчанию.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для управления созданием кода, необходимо использовать классы, находящиеся в <xref:System.CodeDom> пространства имен. Дополнительные сведения см. в разделе [использование CodeDOM](~/docs/framework/reflection-and-codedom/using-the-codedom.md) и [краткий справочник по CodeDOM](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ImportSchemaType">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Позволяет управлять созданным кодом, проверяя импортируемую схему и указываемую тип среды CLR, на который выполняется отображение.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В приведенном ниже примере показана простая реализация из <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29> метод. Код проверяет пространства имен и имени. При обнаружении правильные значения, он добавляет имя пользовательской сборке («Order.dll»), должна иметься ссылка в созданном коде. Затем он добавляет новое пространство имен («Microsoft.Samples»), создается в коде.  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="ImportSchemaType">
      <MemberSignature Language="C#" Value="public virtual string ImportSchemaType (System.Xml.Schema.XmlSchemaType type, System.Xml.Schema.XmlSchemaObject context, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportSchemaType(class System.Xml.Schema.XmlSchemaType type, class System.Xml.Schema.XmlSchemaObject context, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.Xml.Schema.XmlSchemaType,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportSchemaType (type As XmlSchemaType, context As XmlSchemaObject, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportSchemaType(System::Xml::Schema::XmlSchemaType ^ type, System::Xml::Schema::XmlSchemaObject ^ context, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberSignature Language="F#" Value="abstract member ImportSchemaType : System.Xml.Schema.XmlSchemaType * System.Xml.Schema.XmlSchemaObject * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string&#xA;override this.ImportSchemaType : System.Xml.Schema.XmlSchemaType * System.Xml.Schema.XmlSchemaObject * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="schemaImporterExtension.ImportSchemaType (type, context, schemas, importer, compileUnit, mainNamespace, options, codeProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Xml.Schema.XmlSchemaType" />
        <Parameter Name="context" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="type">Тип XSD.</param>
        <param name="context">Сведения о схеме, такие как номер строки, содержащей элемент XML.</param>
        <param name="schemas">Коллекция схем документа.</param>
        <param name="importer">Используемый импортер.</param>
        <param name="compileUnit"><see cref="T:System.CodeDom.CodeCompileUnit" />, к которому можно добавлять структуры CodeDOM для создания альтернативного кода обработки XSD.</param>
        <param name="mainNamespace">Текущее пространство имен для элемента.</param>
        <param name="options">Битовая комбинация значений перечисления, которые указывают параметры компилятора кода.</param>
        <param name="codeProvider"><see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, используемый для создания нового кода.</param>
        <summary>Позволяет управлять созданным кодом, проверяя импортируемую схему и указываемую тип среды CLR, на который выполняется отображение.</summary>
        <returns>Имя типа среды CLR, на который он отображается.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В приведенном ниже примере показана простая реализация из <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29> метод. Код проверяет пространства имен и имени. При обнаружении правильные значения, он добавляет имя пользовательской сборке («Order.dll»), должна иметься ссылка в созданном коде. Затем он добавляет новое пространство имен («Microsoft.Samples»), создается в коде.  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportSchemaType">
      <MemberSignature Language="C#" Value="public virtual string ImportSchemaType (string name, string ns, System.Xml.Schema.XmlSchemaObject context, System.Xml.Serialization.XmlSchemas schemas, System.Xml.Serialization.XmlSchemaImporter importer, System.CodeDom.CodeCompileUnit compileUnit, System.CodeDom.CodeNamespace mainNamespace, System.Xml.Serialization.CodeGenerationOptions options, System.CodeDom.Compiler.CodeDomProvider codeProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ImportSchemaType(string name, string ns, class System.Xml.Schema.XmlSchemaObject context, class System.Xml.Serialization.XmlSchemas schemas, class System.Xml.Serialization.XmlSchemaImporter importer, class System.CodeDom.CodeCompileUnit compileUnit, class System.CodeDom.CodeNamespace mainNamespace, valuetype System.Xml.Serialization.CodeGenerationOptions options, class System.CodeDom.Compiler.CodeDomProvider codeProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType(System.String,System.String,System.Xml.Schema.XmlSchemaObject,System.Xml.Serialization.XmlSchemas,System.Xml.Serialization.XmlSchemaImporter,System.CodeDom.CodeCompileUnit,System.CodeDom.CodeNamespace,System.Xml.Serialization.CodeGenerationOptions,System.CodeDom.Compiler.CodeDomProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ImportSchemaType (name As String, ns As String, context As XmlSchemaObject, schemas As XmlSchemas, importer As XmlSchemaImporter, compileUnit As CodeCompileUnit, mainNamespace As CodeNamespace, options As CodeGenerationOptions, codeProvider As CodeDomProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ ImportSchemaType(System::String ^ name, System::String ^ ns, System::Xml::Schema::XmlSchemaObject ^ context, System::Xml::Serialization::XmlSchemas ^ schemas, System::Xml::Serialization::XmlSchemaImporter ^ importer, System::CodeDom::CodeCompileUnit ^ compileUnit, System::CodeDom::CodeNamespace ^ mainNamespace, System::Xml::Serialization::CodeGenerationOptions options, System::CodeDom::Compiler::CodeDomProvider ^ codeProvider);" />
      <MemberSignature Language="F#" Value="abstract member ImportSchemaType : string * string * System.Xml.Schema.XmlSchemaObject * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string&#xA;override this.ImportSchemaType : string * string * System.Xml.Schema.XmlSchemaObject * System.Xml.Serialization.XmlSchemas * System.Xml.Serialization.XmlSchemaImporter * System.CodeDom.CodeCompileUnit * System.CodeDom.CodeNamespace * System.Xml.Serialization.CodeGenerationOptions * System.CodeDom.Compiler.CodeDomProvider -&gt; string" Usage="schemaImporterExtension.ImportSchemaType (name, ns, context, schemas, importer, compileUnit, mainNamespace, options, codeProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ns" Type="System.String" />
        <Parameter Name="context" Type="System.Xml.Schema.XmlSchemaObject" />
        <Parameter Name="schemas" Type="System.Xml.Serialization.XmlSchemas" />
        <Parameter Name="importer" Type="System.Xml.Serialization.XmlSchemaImporter" />
        <Parameter Name="compileUnit" Type="System.CodeDom.CodeCompileUnit" />
        <Parameter Name="mainNamespace" Type="System.CodeDom.CodeNamespace" />
        <Parameter Name="options" Type="System.Xml.Serialization.CodeGenerationOptions" />
        <Parameter Name="codeProvider" Type="System.CodeDom.Compiler.CodeDomProvider" />
      </Parameters>
      <Docs>
        <param name="name">Имя элемента.</param>
        <param name="ns">Пространство имен элемента.</param>
        <param name="context">Сведения о схеме, такие как номер строки, содержащей элемент XML.</param>
        <param name="schemas">Коллекция схем документа.</param>
        <param name="importer">Используемый импортер.</param>
        <param name="compileUnit"><see cref="T:System.CodeDom.CodeCompileUnit" />, к которому можно добавлять структуры CodeDOM для создания альтернативного кода обработки XSD.</param>
        <param name="mainNamespace">Текущее пространство имен для элемента.</param>
        <param name="options">Битовая комбинация значений перечисления, которые указывают параметры компилятора кода.</param>
        <param name="codeProvider"><see cref="T:System.CodeDom.Compiler.CodeDomProvider" />, используемый для создания нового кода.</param>
        <summary>Позволяет управлять созданным кодом, проверяя импортируемую схему и указываемую тип среды CLR, на который выполняется отображение.</summary>
        <returns>Имя типа среды CLR, на который он отображается.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для управления созданием кода, необходимо использовать классы, находящиеся в <xref:System.CodeDom> пространства имен. Дополнительные сведения см. в разделе [использование CodeDOM](~/docs/framework/reflection-and-codedom/using-the-codedom.md) и [краткий справочник по CodeDOM](https://msdn.microsoft.com/library/c77b8bfd-0a32-4e36-b59a-4f687f32c524(v=vs.100).aspx).  
  
   
  
## Examples  
 В приведенном ниже примере показана простая реализация из <xref:System.Xml.Serialization.Advanced.SchemaImporterExtension.ImportSchemaType%28System.String%2CSystem.String%2CSystem.Xml.Schema.XmlSchemaObject%2CSystem.Xml.Serialization.XmlSchemas%2CSystem.Xml.Serialization.XmlSchemaImporter%2CSystem.CodeDom.CodeCompileUnit%2CSystem.CodeDom.CodeNamespace%2CSystem.Xml.Serialization.CodeGenerationOptions%2CSystem.CodeDom.Compiler.CodeDomProvider%29> метод. Код проверяет пространства имен и имени. При обнаружении правильные значения, он добавляет имя пользовательской сборке («Order.dll»), должна иметься ссылка в созданном коде. Затем он добавляет новое пространство имен («Microsoft.Samples»), создается в коде.  
  
 [!code-csharp[SchemaImporterExtensionExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/SchemaImporterExtensionExample/CS/SchemaImporterExtensionExample.cs#1)]
 [!code-vb[SchemaImporterExtensionExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/SchemaImporterExtensionExample/VB/SchemaImporterExtensionExample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>