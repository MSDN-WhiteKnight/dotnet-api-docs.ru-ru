<Type Name="InertiaProcessor2D" FullName="System.Windows.Input.Manipulations.InertiaProcessor2D">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd0b9296dacb1cfd41cabd11bc52d511d9a5b6ab" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55404912" /></Metadata><TypeSignature Language="C#" Value="public class InertiaProcessor2D" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit InertiaProcessor2D extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Input.Manipulations.InertiaProcessor2D" />
  <TypeSignature Language="VB.NET" Value="Public Class InertiaProcessor2D" />
  <TypeSignature Language="C++ CLI" Value="public ref class InertiaProcessor2D" />
  <TypeSignature Language="F#" Value="type InertiaProcessor2D = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Реализует экстраполяцию позиции, ориентации и среднего радиуса манипуляции.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D> Объекта позволяет вашему приложению экстраполировать расположение элемента, ориентацию и другие свойства, имитируя поведение реальных.  
  
 Например когда пользователь перемещает элемент и освобождает его, элемент может продолжить движение, замедление и затем медленно остановиться. Обработчик инерции реализует это поведение, вызывая аффинных двумерных значений (источник, масштабирования, трансляции и поворота) меняться с течением указанного времени с заданной скоростью замедления.  
  
 Обработчик инерции сам по себе не вызывает элемент перемещение и замедление. Приложение получает данные от процессора инерции и применяет значения, при необходимости к элементу конкретного приложения. Как правило приложение использует информацию, полученную от процессора инерции для изменения расположения, размера или ориентации элемента.  
  
 Обработка инерции обычно используется в сочетании с Обработка манипуляции. Дополнительные сведения см. в описании класса <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D>.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InertiaProcessor2D ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InertiaProcessor2D();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Input.Manipulations.InertiaProcessor2D" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Complete">
      <MemberSignature Language="C#" Value="public void Complete (long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Complete(int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Complete (timestamp As Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Complete(long timestamp);" />
      <MemberSignature Language="F#" Value="member this.Complete : int64 -&gt; unit" Usage="inertiaProcessor2D.Complete timestamp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timestamp">Метка времени для завершения экстраполяции (за 100 наносекундных тактов).</param>
        <summary>Завершает последнюю экстраполяцию с помощью указанной метки времени и вызывает событие <see cref="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метки времени, в единицах, равных 100 нс.  
  
   
  
## Examples  
 В следующем примере обработчик событий для <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> проверяет событие, если выполняется обработка инерции и если да, останавливает его, вызвав <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Complete%2A> метод.  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра метки времени меньше значения изначальной или предыдущей метки.</exception>
      </Docs>
    </Member>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; Completed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; Completed" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed" />
      <MemberSignature Language="VB.NET" Value="Public Event Completed As EventHandler(Of Manipulation2DCompletedEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::Manipulations::Manipulation2DCompletedEventArgs ^&gt; ^ Completed;" />
      <MemberSignature Language="F#" Value="member this.Completed : EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; " Usage="member this.Completed : System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DCompletedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит по завершении экстраполяции.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delta">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; Delta;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; Delta" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta" />
      <MemberSignature Language="VB.NET" Value="Public Event Delta As EventHandler(Of Manipulation2DDeltaEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Windows::Input::Manipulations::Manipulation2DDeltaEventArgs ^&gt; ^ Delta;" />
      <MemberSignature Language="F#" Value="member this.Delta : EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; " Usage="member this.Delta : System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Windows.Input.Manipulations.Manipulation2DDeltaEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит после изменения источника экстраполяции или после перемещения, масштабирования или поворота.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Delta?displayProperty=nameWithType> Событий и <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Delta?displayProperty=nameWithType> события относятся к одному типу. Как правило можно использовать один и тот же обработчик событий для обоих событий.  
  
   
  
## Examples  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationOrInertiaDelta](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationorinertiadelta)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpansionBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaExpansionBehavior2D ExpansionBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaExpansionBehavior2D ExpansionBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property ExpansionBehavior As InertiaExpansionBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ ExpansionBehavior { System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaExpansionBehavior2D ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ExpansionBehavior : System.Windows.Input.Manipulations.InertiaExpansionBehavior2D with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.ExpansionBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaExpansionBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает поведение расширения для процессора инерции.</summary>
        <value>Поведение расширения для процессора инерции.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialOriginX">
      <MemberSignature Language="C#" Value="public float InitialOriginX { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 InitialOriginX" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialOriginX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float InitialOriginX { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.InitialOriginX : single with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает координату x исходного начала координат (в единицах координат).</summary>
        <value>Координата x исходного начала координат (в единицах координат).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Точка происхождения, представленная <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> и <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> свойства — это среднее положение всех манипуляторов, связанные с элементом.  
  
 Является допустимым значением для <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> любой конечным числом. Значение по умолчанию — 0,0.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialOriginY">
      <MemberSignature Language="C#" Value="public float InitialOriginY { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 InitialOriginY" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialOriginY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float InitialOriginY { float get(); void set(float value); };" />
      <MemberSignature Language="F#" Value="member this.InitialOriginY : single with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает координату y исходного начала координат (в единицах координат).</summary>
        <value>Координата y исходного начала координат (в единицах координат).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Точка происхождения, представленная <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginX%2A> и <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> свойства — это среднее положение всех манипуляторов, связанные с элементом.  
  
 Является допустимым значением для <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.InitialOriginY%2A> любой конечным числом. Значение по умолчанию — 0,0.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRunning">
      <MemberSignature Language="C#" Value="public bool IsRunning { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRunning" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRunning As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRunning { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRunning : bool" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.IsRunning" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, имеет ли место инерция в данный момент.</summary>
        <value>Логическое значение, указывающее, имеет ли место инерция в данный момент.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере обработчик событий для <xref:System.Windows.Input.Manipulations.ManipulationProcessor2D.Started?displayProperty=nameWithType> события проверяет, если Обработка инерции работает и, если да, останавливает его, вызвав <xref:System.Windows.Input.Manipulations.InertiaProcessor2D.Completed> метод.  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_OnManipulationStarted](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_onmanipulationstarted)]  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_Timestamp](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_timestamp)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Process">
      <MemberSignature Language="C#" Value="public bool Process (long timestamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Process(int64 timestamp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.Process(System.Int64)" />
      <MemberSignature Language="VB.NET" Value="Public Function Process (timestamp As Long) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Process(long timestamp);" />
      <MemberSignature Language="F#" Value="member this.Process : int64 -&gt; bool" Usage="inertiaProcessor2D.Process timestamp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timestamp" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="timestamp">Отметка времени для выполнения экстраполяции (за 100-наносекундных тактов).</param>
        <summary>Экстраполирует позицию, ориентацию и средний радиус манипуляции за указанное время.</summary>
        <returns>Позиция, ориентация и средний радиус манипуляции за указанное время. <see langword="true" />, если экстраполяция выполняется. В противном случае — <see langword="false" />, если экстраполяция завершена.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метки времени, в единицах, равных 100 нс.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра метки времени меньше значения изначальной или предыдущей метки.</exception>
      </Docs>
    </Member>
    <Member MemberName="RotationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaRotationBehavior2D RotationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaRotationBehavior2D RotationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property RotationBehavior As InertiaRotationBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ RotationBehavior { System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaRotationBehavior2D ^ value); };" />
      <MemberSignature Language="F#" Value="member this.RotationBehavior : System.Windows.Input.Manipulations.InertiaRotationBehavior2D with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.RotationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaRotationBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает поведение поворота для процессора инерции.</summary>
        <value>Поведение поворота для процессора инерции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере <xref:System.Windows.Input.Manipulations.InertiaRotationBehavior2D.DesiredRotation%2A> свойство имеет значение, чтобы включить обработку инерции для трех и один полтора раза больше объекта из его исходную ориентацию поворота.  
  
 [!code-csharp[ManipulationAPI#_ManipulationItem_SetDesiredRotation](~/samples/snippets/csharp/VS_Snippets_Misc/manipulationapi/cs/manipulationitem.xaml.cs#_manipulationitem_setdesiredrotation)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParameters">
      <MemberSignature Language="C#" Value="public void SetParameters (System.Windows.Input.Manipulations.InertiaParameters2D parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetParameters(class System.Windows.Input.Manipulations.InertiaParameters2D parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Input.Manipulations.InertiaProcessor2D.SetParameters(System.Windows.Input.Manipulations.InertiaParameters2D)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetParameters (parameters As InertiaParameters2D)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetParameters(System::Windows::Input::Manipulations::InertiaParameters2D ^ parameters);" />
      <MemberSignature Language="F#" Value="member this.SetParameters : System.Windows.Input.Manipulations.InertiaParameters2D -&gt; unit" Usage="inertiaProcessor2D.SetParameters parameters" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="parameters" Type="System.Windows.Input.Manipulations.InertiaParameters2D" />
      </Parameters>
      <Docs>
        <param name="parameters">Параметры для установки.</param>
        <summary>Задает параметры процессора инерции.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslationBehavior">
      <MemberSignature Language="C#" Value="public System.Windows.Input.Manipulations.InertiaTranslationBehavior2D TranslationBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Input.Manipulations.InertiaTranslationBehavior2D TranslationBehavior" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior" />
      <MemberSignature Language="VB.NET" Value="Public Property TranslationBehavior As InertiaTranslationBehavior2D" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ TranslationBehavior { System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ get(); void set(System::Windows::Input::Manipulations::InertiaTranslationBehavior2D ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TranslationBehavior : System.Windows.Input.Manipulations.InertiaTranslationBehavior2D with get, set" Usage="System.Windows.Input.Manipulations.InertiaProcessor2D.TranslationBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Input.Manipulations</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Input.Manipulations.InertiaTranslationBehavior2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает поведение перемещения для процессора инерции.</summary>
        <value>Поведение перемещения для процессора инерции.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>