<Type Name="Comparison&lt;T&gt;" FullName="System.Comparison&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1e5143be3534a4856cd6bcb96f9f79eb8322c54d" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="37485568" /></Metadata><TypeSignature Language="C#" Value="public delegate int Comparison&lt;in T&gt;(T x, T y);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Comparison`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Comparison`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Comparison(Of In T)(x As T, y As T) As Integer " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate int Comparison(T x, T y);" />
  <TypeSignature Language="F#" Value="type Comparison&lt;'T&gt; = delegate of 'T * 'T -&gt; int" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="x" Type="T" />
    <Parameter Name="y" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Int32</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Тип сравниваемых объектов.</typeparam>
    <param name="x">Первый из сравниваемых объектов.</param>
    <param name="y">Второй из сравниваемых объектов.</param>
    <summary>Представляет метод, который сравнивает два объекта одного типа.</summary>
    <returns>Знаковое целое число, которое определяет относительные значения параметров <paramref name="x" /> и <paramref name="y" />, как показано в следующей таблице.  
  
 <list type="table"><listheader><term> Значение </term><description> Описание </description></listheader><item><term> Меньше 0 </term><description><paramref name="x" /> меньше <paramref name="y" />.  </description></item><item><term> 0 </term><description><paramref name="x" /> равно <paramref name="y" />.  </description></item><item><term> Больше 0 </term><description><paramref name="x" /> больше <paramref name="y" />. </description></item></list></returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот делегат используется <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29> перегрузка метода <xref:System.Array> класс и <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> перегрузка метода <xref:System.Collections.Generic.List%601> класса для сортировки элементов массива или списка.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Comparison%601> делегат со <xref:System.Collections.Generic.List%601.Sort%28System.Comparison%7B%600%7D%29> перегрузки метода.  
  
 В примере кода определяется метод альтернативное сравнение строк с именем `CompareDinosByLength`. Этот метод работает следующим образом: во-первых, сравниваемых `null`, и ссылкой на null, считается меньше, чем отличный от null. Во-вторых длины строк сравниваются, и значение, считается более длинной строки. В-третьих Если значения длины равны, используется обычное сравнение строк.  
  
 Объект <xref:System.Collections.Generic.List%601> строк создается и заполняется с четырьмя строками в произвольном порядке. Список также содержит пустую строку, а также ссылку на null. Список, при сортировке <xref:System.Comparison%601> универсальный делегат, представляющий `CompareDinosByLength` метод и отображаться в дальнейшем.  
  
 [!code-cpp[List\`1_SortComparison#1](~/samples/snippets/cpp/VS_Snippets_CLR/List`1_SortComparison/cpp/source.cpp#1)]
 [!code-csharp[List\`1_SortComparison#1](~/samples/snippets/csharp/VS_Snippets_CLR/List`1_SortComparison/cs/source.cs#1)]
 [!code-vb[List\`1_SortComparison#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/List`1_SortComparison/vb/source.vb#1)]  
  
 В следующем примере используется <xref:System.Comparison%601> делегат для сортировки элементов в коллекцию `CityInfo` объектов. `CityInfo` — Это класс, определяемый приложением, который содержит сведения о городе и населения. В примере определяются три метода `CompareByName`, `CompareByPopulation`, и `CompareByNames`, обеспечивающие три различных способа упорядочения `CityInfo` объектов. Каждый метод назначается `comparison` аргумент <xref:System.Array.Sort%60%601%28%60%600%5B%5D%2CSystem.Comparison%7B%60%600%7D%29?displayProperty=nameWithType> метод.  
  
 [!code-csharp[System.Comparison\`1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.comparison`1/cs/comparisont1.cs#1)]
 [!code-vb[System.Comparison\`1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.comparison`1/vb/comparisont1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Sort``1(``0[],System.Comparison{``0})" />
    <altmember cref="M:System.Collections.Generic.List`1.Sort(System.Comparison{`0})" />
  </Docs>
</Type>