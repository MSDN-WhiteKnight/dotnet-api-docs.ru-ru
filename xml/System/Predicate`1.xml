<Type Name="Predicate&lt;T&gt;" FullName="System.Predicate&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="aec57cef3fed8cea256c30b4abcc1cef689abe97" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="37727094" /></Metadata><TypeSignature Language="C#" Value="public delegate bool Predicate&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Predicate`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Predicate`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Function Predicate(Of In T)(obj As T) As Boolean " />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate bool Predicate(T obj);" />
  <TypeSignature Language="F#" Value="type Predicate&lt;'T&gt; = delegate of 'T -&gt; bool" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Boolean</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Тип сравниваемого объекта.</typeparam>
    <param name="obj">Объект, проверяемый на соответствие критериям, заданным в методе, который представлен его делегатом.</param>
    <summary>Представляет метод, определяющий набор критериев и соответствие указанного объекта этим критериям.</summary>
    <returns>Значение <see langword="true" />, если объект <paramref name="obj" /> удовлетворяет критериям, заданным в методе, который представляет этот делегат; в противном случае — значение <see langword="false" />.</returns>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот делегат используется несколько методов <xref:System.Array> и <xref:System.Collections.Generic.List%601> классы для поиска элементов в коллекции.  
  
 Как правило <xref:System.Predicate%601> делегата, представленного лямбда-выражение. Так как локального масштаба переменные, доступные для лямбда-выражение, это легко тестировать условие, которое точно не известно во время компиляции. В следующем примере, который определяет имитации `HockeyTeam` класс, содержащий сведения о команде национальных лиги на коньках и год, в котором она была основана. В примере определяется массив целочисленных значений, представляющих лет и случайным образом назначается один элемент массива в `foundedBeforeYear`, которой является переменной, что локально определенные в примере `Main` метод. Так как локального масштаба переменные, доступные для лямбда-выражения, лямбда-выражение передается <xref:System.Collections.Generic.List%601.FindAll%2A?displayProperty=nameWithType> метод может вернуть `HockeyTeam` объект для каждой команды, основанная на или перед за этот год.  
  
 [!code-csharp[System.Predicate\`1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicate1.cs#3)]
 [!code-vb[System.Predicate\`1#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicate1.vb#3)]  
  
   
  
## Examples  
 В следующем примере кода используется <xref:System.Predicate%601> делегат со <xref:System.Array.Find%2A?displayProperty=nameWithType> метод для поиска массив <xref:System.Drawing.Point> структуры. В примере явным образом определяется <xref:System.Predicate%601> делегат с именем `predicate` и присваивает его метод с именем `FindPoints` , возвращающий `true` Если произведение <xref:System.Drawing.Point.X%2A?displayProperty=nameWithType> и <xref:System.Drawing.Point.Y%2A?displayProperty=nameWithType> поля превышает 100 000. Обратите внимание, что обычно использования лямбда-выражения, а не явно определить делегат типа <xref:System.Predicate%601>, как показано во втором примере.  
  
 [!code-csharp[System.Predicate\`1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex2.cs#4)]
 [!code-vb[System.Predicate\`1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex2.vb#4)]  
  
 Следующий пример идентичен предыдущему примеру, за исключением того, что он использует лямбда-выражение для представления <xref:System.Predicate%601> делегировать.  Каждый элемент `points` массив передается лямбда-выражению, пока выражение выполняет поиск элемента, удовлетворяющего условиям поиска. В этом случае лямбда-выражение возвращает `true` Если произведение поля X и Y больше 100 000.  
  
 [!code-csharp[System.Predicate\`1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Predicate`1/cs/predicateex1.cs#2)]
 [!code-vb[System.Predicate\`1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Predicate`1/vb/predicateex1.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Array.Find``1(``0[],System.Predicate{``0})" />
  </Docs>
</Type>