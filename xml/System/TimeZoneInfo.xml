<Type Name="TimeZoneInfo" FullName="System.TimeZoneInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="25e19b7d157dbe922506010b94767d4a672e028c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58709146" /></Metadata><TypeSignature Language="C#" Value="public sealed class TimeZoneInfo : IEquatable&lt;TimeZoneInfo&gt;, System.Runtime.Serialization.IDeserializationCallback, System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TimeZoneInfo extends System.Object implements class System.IEquatable`1&lt;class System.TimeZoneInfo&gt;, class System.Runtime.Serialization.IDeserializationCallback, class System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.TimeZoneInfo" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TimeZoneInfo&#xA;Implements IDeserializationCallback, IEquatable(Of TimeZoneInfo), ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZoneInfo sealed : IEquatable&lt;TimeZoneInfo ^&gt;, System::Runtime::Serialization::IDeserializationCallback, System::Runtime::Serialization::ISerializable" />
  <TypeSignature Language="F#" Value="type TimeZoneInfo = class&#xA;    interface IEquatable&lt;TimeZoneInfo&gt;&#xA;    interface ISerializable&#xA;    interface IDeserializationCallback" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IEquatable&lt;System.TimeZoneInfo&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.IDeserializationCallback</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Runtime.Serialization.ISerializable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=2.0.5.0, Culture=Neutral, PublicKeyToken=7cec85d7bea7798e")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5;xamarinandroid-7.1;xamarinios-10.8;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.CompilerServices.TypeForwardedFrom("System.Core, Version=3.5.0.0, Culture=Neutral, PublicKeyToken=b77a5c561934e089")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет любой часовой пояс в мире.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Часовой пояс — это географическая область, в которой действует одно и то же время.  
  
 <xref:System.TimeZoneInfo> Класс предоставляет значительные улучшения по сравнению <xref:System.TimeZone> класс, который предоставляет ограниченные функциональные возможности.  
  
 <xref:System.TimeZone> Класс распознает только местный часовой пояс, а может преобразовывать время в формате UTC в формате UTC и местным временем. Объект <xref:System.TimeZoneInfo> объект может представлять любой часовой пояс, а также методы <xref:System.TimeZoneInfo> класс может использоваться для преобразования времени из одного часового пояса в соответствующее время в часовом поясе. Члены <xref:System.TimeZoneInfo> класса поддерживают следующие операции:  
  
-   Получение часовой пояс, который уже определен в операционной системе.  
  
-   Перечисление часовых поясов, которые доступны в системе.  
  
-   Преобразование времени между разными часовыми поясами.  
  
-   Создание нового часового пояса, который еще не определен в операционной системе.  
  
-   Сериализация часовой пояс для последующего извлечения.  
  
> [!NOTE]
>  Экземпляр <xref:System.TimeZoneInfo> класс является неизменяемым. После создания экземпляра объекта его значение нельзя изменить.  
  
 Не удается создать экземпляр <xref:System.TimeZoneInfo> с помощью `new` ключевое слово. Вместо этого необходимо вызвать один из статических членов <xref:System.TimeZoneInfo> класс, показанный в следующей таблице.  
  
|Имя статического члена|Описание|  
|------------------------|-----------------|  
|Метод <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A>|Создает пользовательский часовой пояс на основе данных, предоставляемую приложением.|  
|Метод <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A>|Создает экземпляр часовой пояс, по его идентификатору.|  
|Метод <xref:System.TimeZoneInfo.FromSerializedString%2A>|Выполняет десериализацию строковое значение для повторного создания ранее сериализованного <xref:System.TimeZoneInfo> объекта.|  
|Метод <xref:System.TimeZoneInfo.GetSystemTimeZones%2A>|Возвращает перечислимый объект <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> из <xref:System.TimeZoneInfo> объекты, которые представляет все часовые пояса, доступные в локальной системе.|  
|Свойство<xref:System.TimeZoneInfo.Local%2A> |Создает экземпляр <xref:System.TimeZoneInfo> , представляющий местный часовой пояс.|  
|Свойство<xref:System.TimeZoneInfo.Utc%2A> |Создает экземпляр <xref:System.TimeZoneInfo> объект, представляющий часовой пояс UTC.|  
  
 Можно использовать <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> метод для создания часовой пояс, который не определен в локального системного реестра в системах Windows, или классами часового пояса в [ICU библиотеки](http://userguide.icu-project.org/datetime/timezone) в Linux или macOS. Затем можно использовать <xref:System.TimeZoneInfo.ToSerializedString%2A> свойство для сохранения сведений о часовом поясе объекта как строку, которая может храниться в определенной форме, доступной для приложения. Можно использовать <xref:System.TimeZoneInfo.FromSerializedString%2A> метод для преобразования строки в сериализованном <xref:System.TimeZoneInfo> объекта.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BaseUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan BaseUtcOffset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan BaseUtcOffset" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.BaseUtcOffset" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseUtcOffset As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan BaseUtcOffset { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseUtcOffset : TimeSpan" Usage="System.TimeZoneInfo.BaseUtcOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает разницу между зимним временем в текущем часовом поясе и временем в формате UTC.</summary>
        <value>Объект, указывающий разницу между зимним временем в текущем часовом поясе и временем в формате UTC.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Интервал времени, возвращаемые <xref:System.TimeZoneInfo.BaseUtcOffset%2A> свойства могут варьироваться от 14 часов (для часового пояса 14 часов опережает время в формате UTC) до-14 часов (для часового пояса 14 часов отстает от времени UTC). Часовые пояса, раньше UTC, имеют положительное смещение; часовые пояса, отстает от времени UTC, имеют отрицательное смещение.  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Значение представлено в виде целого числа минут. Он не может включать дробное количество минут.  
  
> [!NOTE]
>  Так как <xref:System.TimeZoneInfo.BaseUtcOffset%2A> является свойством <xref:System.TimeZoneInfo> объекта, а не <xref:System.TimeZoneInfo.AdjustmentRule> объекта, <xref:System.TimeZoneInfo> класс применяется одно смещение от времени UTC, все настройки часового пояса. Чтобы отразить часовой пояс, который изменил его смещение от UTC, необходимо создать новый часовой пояс с помощью <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> метод.  
  
 <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Свойство отличается от <xref:System.TimeZoneInfo.GetUtcOffset%2A> метод одним из следующих способов:  
  
-   <xref:System.TimeZoneInfo.BaseUtcOffset%2A> Свойство возвращает разницу между временем UTC и временем стандартного часового пояса; <xref:System.TimeZoneInfo.GetUtcOffset%2A> метод возвращает разницу между временем UTC и временем часового пояса в определенной точке во времени.  
  
-   <xref:System.TimeZoneInfo.GetUtcOffset%2A> Метод отражает приложению из любого правила коррекции часового пояса; <xref:System.TimeZoneInfo.BaseUtcOffset%2A> не поддерживает свойство.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.TimeZoneInfo.BaseUtcOffset%2A> свойство, чтобы увидеть разницу между местным временем и временем в формате UTC.  
  
 [!code-csharp[System.TimeZone2.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#1)]
 [!code-vb[System.TimeZone2.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.GetUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="ClearCachedData">
      <MemberSignature Language="C#" Value="public static void ClearCachedData ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ClearCachedData() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ClearCachedData" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub ClearCachedData ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void ClearCachedData();" />
      <MemberSignature Language="F#" Value="static member ClearCachedData : unit -&gt; unit" Usage="System.TimeZoneInfo.ClearCachedData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет кэшированные данные о часовом поясе.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Данные о часовом поясе, кэшированные включает в себя данные местного часового пояса и зоне формате UTC (UTC).  
  
 Можно вызвать `ClearCachedData` метод, чтобы уменьшить память, предназначенного для кэша приложения, чтобы отразить тот факт, что изменения часового пояса локальной системы или сведения о часовом поясе.  
  
 Сохранение ссылок на локальных дисках и часовой пояс UTC не рекомендуется. После вызова `ClearCachedData` метод, эти объектные переменные будут определены <xref:System.TimeZoneInfo> объекты, которые больше не являются ссылками на <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> или <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Например, в следующем коде, второй вызов <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> вызывает метод <xref:System.ArgumentException> поскольку `local` переменная считается равным <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.  
  
 [!code-csharp[System.TimeZone2.BestPractices#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/cs/System.TimeZone2.BestPractices.cs#1)]
 [!code-vb[System.TimeZone2.BestPractices#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.BestPractices/vb/System.TimeZone2.BestPractices.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует время во время в заданном часовом поясе.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Преобразовываемые дата и время.</param>
        <param name="destinationTimeZone">Часовой пояс, в который требуется преобразовать <paramref name="dateTime" />.</param>
        <summary>Преобразует время во время в заданном часовом поясе.</summary>
        <returns>Дата и время в часовом поясе назначения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Во время преобразования, <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> метод применим все правила коррекции, фактически в `destinationTimeZone` часового пояса.  
  
 Эта перегрузка <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> метод определяет исходный часовой пояс из значения `dateTime` параметра <xref:System.DateTime.Kind%2A> свойства, как показано в следующей таблице.  
  
|Значение свойства Kind|Исходный часовой пояс|Поведение метода|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Преобразует местное время во время в `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Преобразует время в формате UTC (UTC) `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Предполагается, что <xref:System.TimeZoneInfo.Local%2A>.|Преобразует местное время во время в `destinationTimeZone`.|  
  
 <xref:System.DateTime.Kind%2A> Свойства возвращаемого <xref:System.DateTime> значение задано, как показано в следующей таблице.  
  
|Условие|Тип возвращаемого значения свойства|  
|---------------|----------------------------------|  
|Значение параметра `destinationTimeZone` — <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Значение параметра `destinationTimeZone` — <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Все другие значения даты и времени и часовые пояса назначения.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Если значение `dateTime` является неоднозначными местным временем, то он интерпретируется как зимнее время. Если `dateTime` параметр является недопустимым временем местное, этот метод выдает <xref:System.ArgumentException>.  
  
 Если преобразование `dateTime` приводит к значению даты и времени, более ранняя, чем <xref:System.DateTime.MinValue?displayProperty=nameWithType> или более поздней версии, чем <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTime.MinValue?displayProperty=nameWithType> или <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, соответственно.  
  
 Можно также преобразовать для или от времени UTC, вызвав <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> и <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> методы.  
  
   
  
## Examples  
 В следующем примере преобразуется массив значений даты и времени для времени в зоне Восточное время США и Канады. Он показывает, что исходный часовой пояс зависит от <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> свойство источника <xref:System.DateTime> значение. Также показано, что <xref:System.TimeZoneInfo.ConvertTime%2A> метод принимает коррекции часового пояса в учетную запись, так как изменение часового пояса в исходном и конечном часовых поясах в 2:00 7 ноября 2010 г.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime1.cs#1)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение параметра <paramref name="dateTime" /> представляет недопустимое время.</exception>
        <exception cref="T:System.ArgumentNullException">параметр <paramref name="destinationTimeZone" /> имеет значение <see langword="null" />;</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTime (DateTimeOffset dateTimeOffset, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTime(valuetype System.DateTimeOffset dateTimeOffset, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTimeOffset,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTime(DateTimeOffset dateTimeOffset, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTimeOffset * TimeZoneInfo -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTime (dateTimeOffset, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Преобразовываемые дата и время.</param>
        <param name="destinationTimeZone">Часовой пояс, в который требуется преобразовать <paramref name="dateTime" />.</param>
        <summary>Преобразует время во время в заданном часовом поясе.</summary>
        <returns>Дата и время в часовом поясе назначения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Во время преобразования, <xref:System.TimeZoneInfo.ConvertTime%28System.DateTimeOffset%2CSystem.TimeZoneInfo%29> метод применим все правила коррекции, фактически в `destinationTimeZone` часового пояса.  
  
 Эта перегрузка отличается от других перегрузок <xref:System.TimeZoneInfo.ConvertTime%2A> метод, принимая <xref:System.DateTimeOffset> значение, что ее первый параметр. Определяет дату и время как смещение от времени в формате UTC, а не как дату и время в заданном часовом поясе. В результате `dateTimeOffset` параметра не может представлять неоднозначное время или недопустимое время.  
  
 При преобразовании `dateTimeOffset` значение во время в часовом поясе назначения, этот метод учитывает все правила коррекции, действующие в часовом поясе назначения.  
  
 Если преобразование `dateTimeOffset` приводит к значению даты и времени, более ранняя, чем <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> или более поздней версии, чем <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> или <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, соответственно.  
  
   
  
## Examples  
 В следующем примере преобразуется в массив <xref:System.DateTimeOffset> значения времени в восточном часовом поясе США и Канады. Этот пример иллюстрирует <xref:System.TimeZoneInfo.ConvertTime%2A> метод принимает коррекции часового пояса в учетную запись, так как изменение часового пояса в исходном и конечном часовых поясах в 2:00 7 ноября 2010 г.  
  
 [!code-csharp[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.converttime/cs/converttime2.cs#2)]
 [!code-vb[System.TimeZoneInfo.ConvertTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.converttime/vb/converttime2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">параметр <paramref name="destinationTimeZone" /> имеет значение <see langword="null" />;</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTime">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTime (DateTime dateTime, TimeZoneInfo sourceTimeZone, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTime(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTime(System.DateTime,System.TimeZoneInfo,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTime(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTime : DateTime * TimeZoneInfo * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTime (dateTime, sourceTimeZone, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Преобразовываемые дата и время.</param>
        <param name="sourceTimeZone">Часовой пояс, соответствующий значению <paramref name="dateTime" />.</param>
        <param name="destinationTimeZone">Часовой пояс, в который требуется преобразовать <paramref name="dateTime" />.</param>
        <summary>Преобразует время в одном часовом поясе во время в другом.</summary>
        <returns>Дата и время в часовом поясе назначения, которые соответствуют значению параметра <paramref name="dateTime" /> в исходном часовом поясе.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Во время преобразования, <xref:System.TimeZoneInfo.ConvertTime%2A> метод применим все правила коррекции, фактически в `destinationTimeZone` часового пояса.  
  
 Значение <xref:System.DateTime.Kind%2A> свойство `dateTime` параметр должен соответствовать `sourceTimeZone` параметра, как показано в следующей таблице.  
  
|Значение DateTime.Kind|значение sourceTimeZone|Поведение метода|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Равняется <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Преобразует `dateTime` время в часовом поясе назначения.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Не равно <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|Создает <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Равняется <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Преобразует `dateTime` время в часовом поясе назначения.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Не равно <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|Создает <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Любой.|Преобразует `dateTime` время в часовом поясе назначения.|  
  
 Можно также преобразовать для или от времени в формате UTC, вызвав <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> и <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> методы.  
  
 <xref:System.DateTime.Kind%2A> Свойства возвращаемого <xref:System.DateTime> значение задано, как показано в следующей таблице.  
  
|Условие|Тип возвращаемого значения свойства|  
|---------------|----------------------------------|  
|Аргумент `destinationTimeZone` имеет значение <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Аргумент `destinationTimeZone` имеет значение <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|  
|Все другие даты и значения времени часовые пояса источника и назначения часовых поясов.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Если значение `dateTime` параметр имеет неоднозначное время в исходном часовом поясе, то он интерпретируется как зимнее время. Если `dateTime` параметр является недопустимым временем в исходном часовом поясе, этот метод выдает <xref:System.ArgumentException>.  
  
 Если преобразование `dateTime` приводит к значению даты и времени, более ранняя, чем <xref:System.DateTime.MinValue?displayProperty=nameWithType> или более поздней версии, чем <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTime.MinValue?displayProperty=nameWithType> или <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, соответственно.  
  
 <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> Вызывает метод <xref:System.ArgumentException> исключения Если <xref:System.DateTime.Kind%2A?displayProperty=nameWithType> свойство `dateTime` аргумент <xref:System.DateTimeKind.Local?displayProperty=nameWithType> , но `sourceTimeZone` аргумент не является <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Чтобы определить, является ли исходный часовой пояс местного часового пояса или universal часовой пояс, метод проверяет ссылочное равенство вместо проверки на предмет равенства значений с <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> метод. Обратите внимание, что <xref:System.TimeZoneInfo> объекты, представляющие местного часового пояса и который извлекаются путем вызова <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> метод имеет ссылочное равенство с <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. Кроме того <xref:System.TimeZoneInfo> объекты, представляющие локальная группа безопасности или universal часовой пояс и, извлекаются с помощью итерации коллекции, возвращаемой <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> метод имеет ссылочное равенство с <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> или <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>. Кроме того, можно вызвать <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29> метод.  
  
   
  
## Examples  
 Следующий пример иллюстрирует использование <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29> метода для преобразования из гавайского стандартного времени в местное время.  
  
 [!code-csharp[System.TimeZone2.Concepts#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#9)]
 [!code-vb[System.TimeZone2.Concepts#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#9)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.DateTime.Kind" /> параметра <paramref name="dateTime" /> — <see cref="F:System.DateTimeKind.Local" />, но параметр <paramref name="sourceTimeZone" /> не равен <see cref="F:System.DateTimeKind.Local" />.  
  
-или- 
Свойство <see cref="P:System.DateTime.Kind" /> параметра <paramref name="dateTime" /> — <see cref="F:System.DateTimeKind.Utc" />, но параметр <paramref name="sourceTimeZone" /> не равен <see cref="P:System.TimeZoneInfo.Utc" />.  
  
-или- 
Параметр <paramref name="dateTime" /> является недопустимым временем (то есть он представляет время, которое не существует из-за правил коррекции часового пояса).</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="sourceTimeZone" /> имеет значение <see langword="null" />.  
  
-или- 
Параметр <paramref name="destinationTimeZone" /> имеет значение <see langword="null" />.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId" />
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeBySystemTimeZoneId">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует время во время в другом часовом поясе, исходя из идентификатора этого пояса.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Преобразовываемые дата и время.</param>
        <param name="destinationTimeZoneId">Идентификатор часового пояса назначения.</param>
        <summary>Преобразует время во время в другом часовом поясе, исходя из идентификатора этого пояса.</summary>
        <returns>Дата и время в часовом поясе назначения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Во время преобразования, <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> метод применим все правила коррекции, фактически в `destinationTimeZoneId` часового пояса.  
  
 Эта перегрузка во многом совпадает с вызовом метода <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> за тем исключением, что он позволяет указать часовой пояс назначения, по его идентификатору, а не ссылку на объект. Этот метод наиболее полезен в случаях, когда необходимо преобразовать время без получения объекта часовой пояс, который соответствует к нему и не обязательно знать, находится ли преобразованное время "стандартный" или летнего времени.  
  
 <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%29> Метод определяет исходный часовой пояс из значения `dateTime` параметра <xref:System.DateTime.Kind%2A> свойства, как показано в следующей таблице.  
  
|Значение свойства Kind|Исходный часовой пояс|Поведение метода|  
|-------------------------|----------------------|---------------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A>|Преобразует местное время во время в `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A>|Преобразует время в формате UTC (UTC) `destinationTimeZone`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Предполагается, что <xref:System.TimeZoneInfo.Local%2A>.|Преобразует местное время во время в `destinationTimeZone`.|  
  
 <xref:System.DateTime.Kind%2A> Свойства возвращаемого <xref:System.DateTime> значение задано, как показано в следующей таблице.  
  
|Условие|Тип возвращаемого значения свойства|  
|---------------|----------------------------------|  
|Значение параметра `destinationTimeZone` — `TimeZoneInfo.Utc.Id`.|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|  
|Любой другой `destinationTimeZone` значение.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|  
  
 Если значение `dateTime` является неоднозначными местным временем, то он интерпретируется как зимнее время. Если `dateTime` параметр является недопустимым временем местное, этот метод выдает <xref:System.ArgumentException>.  
  
 Если преобразование `dateTime` приводит к значению даты и времени, более ранняя, чем <xref:System.DateTime.MinValue?displayProperty=nameWithType> или более поздней версии, чем <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTime.MinValue?displayProperty=nameWithType> или <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, соответственно.  
  
 Этот метод извлекает сведения о часовом поясе, идентификатор которого задается `destinationTimeZoneId` параметр из реестра в системах Windows и из [ICU библиотеки](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS. Не удалось получить объект часовой пояс, который создается с помощью <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> метод. `destinationTimeZoneId` Параметр должен точно соответствовать идентификатор часового пояса в длину, но не в случае для успешного сопоставления; то есть сравнение `destinationTimeZoneId` с часовым поясом идентификаторы без учета регистра.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> — <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Идентификатор часового пояса найден, однако данные реестра повреждены.</exception>
        <exception cref="T:System.Security.SecurityException">Процесс не имеет разрешений, необходимых для чтения из раздела реестра, который содержит сведения о часовом поясе.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Идентификатор <paramref name="destinationTimeZoneId" /> не найден в локальной системе.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTimeOffset ConvertTimeBySystemTimeZoneId (DateTimeOffset dateTimeOffset, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTimeOffset ConvertTimeBySystemTimeZoneId(valuetype System.DateTimeOffset dateTimeOffset, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTimeOffset,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTimeOffset ConvertTimeBySystemTimeZoneId(DateTimeOffset dateTimeOffset, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTimeOffset * string -&gt; DateTimeOffset" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTimeOffset, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Преобразовываемые дата и время.</param>
        <param name="destinationTimeZoneId">Идентификатор часового пояса назначения.</param>
        <summary>Преобразует время во время в другом часовом поясе, исходя из идентификатора этого пояса.</summary>
        <returns>Дата и время в часовом поясе назначения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Во время преобразования, <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> метод применим все правила коррекции, фактически в `destinationTimeZoneId` часового пояса.  
  
 Эта перегрузка совпадает с вызовом метода <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%29> за тем исключением, что он позволяет указать часовой пояс назначения, по его идентификатору, а не ссылку на объект. Этот метод наиболее полезен в случаях, когда необходимо преобразовать время без получения объекта часовой пояс, который соответствует к нему и не обязательно знать, находится ли преобразованное время "стандартный" или летнего времени.  
  
 Так как `dateTimeOffset` параметр представляет даты и времени вместе с этого времени смещение от времени в формате UTC, он не может представлять неоднозначное время или недопустимое время.  
  
 Этот метод извлекает часовой пояс, идентификатор которого задается `destinationTimeZoneId` параметр из реестра в системах Windows и из [ICU библиотеки](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS. Не удалось получить объект часовой пояс, который создается с помощью <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> метод. `destinationTimeZoneId` Параметр должен точно соответствовать идентификатор часового пояса в длину, но не в случае для успешного сопоставления; то есть сравнение `destinationTimeZoneId` с часовым поясом идентификаторы без учета регистра.  
  
 При преобразовании `dateTimeOffset` значение во время в часовом поясе назначения, метод учитывает все правила коррекции, действующие в часовом поясе назначения.  
  
 Если преобразование `dateTimeOffset` приводит к значению даты и времени, более ранняя, чем <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> или более поздней версии, чем <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTimeOffset.MinValue?displayProperty=nameWithType> или <xref:System.DateTimeOffset.MaxValue?displayProperty=nameWithType>, соответственно.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZoneId" /> — <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Идентификатор часового пояса найден, однако данные реестра повреждены.</exception>
        <exception cref="T:System.Security.SecurityException">Процесс не имеет разрешений, необходимых для чтения из раздела реестра, который содержит сведения о часовом поясе.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Идентификатор <paramref name="destinationTimeZoneId" /> не найден в локальной системе.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeBySystemTimeZoneId">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeBySystemTimeZoneId (DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeBySystemTimeZoneId(valuetype System.DateTime dateTime, string sourceTimeZoneId, string destinationTimeZoneId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId(System.DateTime,System.String,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeBySystemTimeZoneId(DateTime dateTime, System::String ^ sourceTimeZoneId, System::String ^ destinationTimeZoneId);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeBySystemTimeZoneId : DateTime * string * string -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId (dateTime, sourceTimeZoneId, destinationTimeZoneId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="sourceTimeZoneId" Type="System.String" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZoneId" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Преобразовываемые дата и время.</param>
        <param name="sourceTimeZoneId">Идентификатор исходного часового пояса.</param>
        <param name="destinationTimeZoneId">Идентификатор часового пояса назначения.</param>
        <summary>Преобразует время в одном часовом поясе во время в другом, исходя из идентификаторов этих поясов.</summary>
        <returns>Дата и время в часовом поясе назначения, которые соответствуют значению параметра <paramref name="dateTime" /> в исходном часовом поясе.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Во время преобразования, <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> метод применим все правила коррекции, фактически в `destinationTimeZoneId` часового пояса.  
  
 Несмотря на то, что это похоже на <xref:System.TimeZoneInfo.ConvertTime%28System.DateTime%2CSystem.TimeZoneInfo%2CSystem.TimeZoneInfo%29?displayProperty=nameWithType> метод, можно использовать <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> для указания источника и назначения часовых поясов, их идентификаторам, а не их <xref:System.TimeZoneInfo> объектов. Этот метод наиболее полезен в случаях, когда необходимо преобразовать время без получения объекта часовой пояс, который соответствует к нему и не обязательно знать, находится ли преобразованное время "стандартный" или летнего времени.  
  
 Этот метод извлекает часовых поясов, идентификаторы которых находятся `sourceTimeZoneId` и `destinationTimeZoneId` параметров из реестра в системах Windows и из [ICU библиотеки](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS. Не удалось получить объекты часовых поясов, которые создаются с помощью <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> метод.  
  
 Значение <xref:System.DateTime.Kind%2A> свойство `dateTime` параметр должен соответствовать `sourceTimeZoneId` параметра, как показано в следующей таблице.  
  
|Значение DateTime.Kind|значение sourceTimeZone|Поведение метода|  
|-------------------------|--------------------------|---------------------|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Равняется `TimeZoneInfo.Utc.Id`.|Преобразует `dateTime` время в часовом поясе назначения.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Не равно `TimeZoneInfo.Utc.Id`.|Создает <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Равняется `TimeZoneInfo.Local.Id`.|Преобразует `dateTime` время в часовом поясе назначения.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Не равно `TimeZoneInfo.Local.Id`.|Создает <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Любой.|Преобразует `dateTime` время в часовом поясе назначения.|  
  
 Так как она опирается на вызовы <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> метод, <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%2A> метод выполняет поиск без учета регистра, чтобы найти часовых поясов, которые соответствуют `sourceTimeZoneId` и `destinationTimeZoneId`.  
  
 Если значение `dateTime` параметр имеет неоднозначное время в исходном часовом поясе, то он интерпретируется как зимнее время. Если `dateTime` параметр является недопустимым временем в исходном часовом поясе, этот метод выдает <xref:System.ArgumentException>.  
  
 <xref:System.DateTime.Kind%2A> Свойства возвращаемого <xref:System.DateTime> присваивается значение <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> Если часовой пояс назначения не является временем в формате UTC, в противном случае он становится равным <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.TimeZoneInfo.ConvertTimeBySystemTimeZoneId%28System.DateTime%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> метод для отображения времени, соответствующий в локальное системное время в восемь городах мира.  
  
 [!code-csharp[System.TimeZone2.Conversions#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#3)]
 [!code-vb[System.TimeZone2.Conversions#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение свойства <see cref="P:System.DateTime.Kind" /> параметра <paramref name="dateTime" /> не соответствует исходному часовому поясу.  
  
-или- 
 Значение <paramref name="dateTime" /> является недопустимым временем в исходном часовом поясе.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZoneId" /> — <see langword="null" />.  
  
-или- 
 <paramref name="destinationTimeZoneId" /> — <see langword="null" />.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Идентификаторы часовых поясов найдены, однако данные реестра повреждены.</exception>
        <exception cref="T:System.Security.SecurityException">У пользователя отсутствуют разрешения, необходимые для чтения из разделов реестра, в которых содержатся сведения о часовом поясе.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Идентификатор <paramref name="sourceTimeZoneId" /> не найден в локальной системе.  
  
-или- 
Идентификатор <paramref name="destinationTimeZoneId" /> не найден в локальной системе.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeFromUtc (DateTime dateTime, TimeZoneInfo destinationTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeFromUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo destinationTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeFromUtc(DateTime dateTime, TimeZoneInfo ^ destinationTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeFromUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeFromUtc (dateTime, destinationTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="destinationTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Время в формате UTC.</param>
        <param name="destinationTimeZone">Часовой пояс, в который требуется преобразовать <paramref name="dateTime" />.</param>
        <summary>Преобразует время в формате UTC во время в указанном часовом поясе.</summary>
        <returns>Дата и время в часовом поясе назначения. Его свойство <see cref="P:System.DateTime.Kind" /> равно <see cref="F:System.DateTimeKind.Utc" />, если значение <paramref name="destinationTimeZone" /> равно <see cref="P:System.TimeZoneInfo.Utc" />; в противном случае — значение свойства <see cref="P:System.DateTime.Kind" /> равно <see cref="F:System.DateTimeKind.Unspecified" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Во время преобразования, <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A> метод применим все правила коррекции, фактически в `destinationTimeZone` часового пояса.  
  
 Точное поведение этого метода зависит от значения <xref:System.DateTime.Kind%2A> свойство `dateTime` параметра, как показано в следующей таблице.  
  
|Свойство DateTime.Kind|Преобразование|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Создает <xref:System.ArgumentException>.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType> или <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Преобразует из всеобщего скоординированного времени (UTC).|  
  
 Если преобразование `dateTime` приводит к значению даты и времени, более ранняя, чем <xref:System.DateTime.MinValue?displayProperty=nameWithType> или более поздней версии, чем <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTime.MinValue?displayProperty=nameWithType> или <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, соответственно.  
  
   
  
## Examples  
 В следующем примере преобразуется временем в формате UTC в центральное время.  
  
 [!code-csharp[System.TimeZone2.Concepts#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Concepts/CS/TimeZone2Concepts.cs#8)]
 [!code-vb[System.TimeZone2.Concepts#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Concepts/VB/TimeZone2Concepts.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.DateTime.Kind" /> параметра <paramref name="dateTime" /> равно <see cref="F:System.DateTimeKind.Local" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="destinationTimeZone" /> — <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ConvertTimeToUtc">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Преобразует дату и время в формат UTC.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Преобразовываемые дата и время.</param>
        <summary>Преобразует указанные дату и время в формат UTC.</summary>
        <returns>Время в формате UTC, соответствующее значению параметра <paramref name="dateTime" />. Свойству <see cref="T:System.DateTime" /> значения <see cref="P:System.DateTime.Kind" /> всегда присваивается значение <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Точное преобразование, выполненное зависит от значения <xref:System.DateTime.Kind%2A> свойство `dateTime` параметра, как показано в следующей таблице.  
  
|Свойство DateTime.Kind|Преобразование|  
|----------------------------|----------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Преобразует местное время в формате UTC в формате UTC.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Предполагается, что `dateTime` является местным временем и преобразовывает местное время в формате UTC.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Возвращает `dateTime` без изменений.|  
  
 Если `dateTime` соответствует местное время является неоднозначным, этот способ предполагает, что это стандартный местное время. Если `dateTime` соответствует недопустимый местное время, вызывает метод <xref:System.ArgumentException>.  
  
> [!NOTE]
>  Если текущий компьютер локального часового пояса включает в себя несколько правил коррекции, эта перегрузка <xref:System.TimeZoneInfo.ConvertTimeToUtc%2A> метод может возвращать результаты, отличные от <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> и <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> методы. <xref:System.TimeZone.ToUniversalTime%2A?displayProperty=nameWithType> всегда применяется текущее правило коррекции ли преобразование часовых поясов `dateTime` находится внутри ее диапазона дат. И при выполнении на [!INCLUDE[net_v35_long](~/includes/net-v35-long-md.md)], <xref:System.DateTime.ToUniversalTime%2A?displayProperty=nameWithType> также применяется текущее правило коррекции ли преобразование часовых поясов `dateTime` находится внутри ее диапазона дат.  
  
 Если формате UTC, эквивалентное `dateTime` более ранняя, чем <xref:System.DateTime.MinValue?displayProperty=nameWithType> или более поздней версии, <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTime.MinValue> или <xref:System.DateTime.MaxValue>, соответственно.  
  
   
  
## Examples  
 В следующем примере показано преобразование значения времени, <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, <xref:System.DateTimeKind.Local?displayProperty=nameWithType>, и <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, соответственно. Здесь также показано преобразование неоднозначного и недопустимого времени.  
  
 [!code-csharp[System.TimeZone2.Conversions#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/System.TimeZone2.Conversions.cs#1)]
 [!code-vb[System.TimeZone2.Conversions#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/System.TimeZone2.Conversions.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><see langword="TimeZoneInfo.Local.IsInvalidDateTime(" />
          <paramref name="dateTime" />
          <see langword=")" /> возвращает <see langword="true" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToUtc">
      <MemberSignature Language="C#" Value="public static DateTime ConvertTimeToUtc (DateTime dateTime, TimeZoneInfo sourceTimeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.DateTime ConvertTimeToUtc(valuetype System.DateTime dateTime, class System.TimeZoneInfo sourceTimeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime,System.TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static DateTime ConvertTimeToUtc(DateTime dateTime, TimeZoneInfo ^ sourceTimeZone);" />
      <MemberSignature Language="F#" Value="static member ConvertTimeToUtc : DateTime * TimeZoneInfo -&gt; DateTime" Usage="System.TimeZoneInfo.ConvertTimeToUtc (dateTime, sourceTimeZone)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="sourceTimeZone" Type="System.TimeZoneInfo" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="dateTime">Преобразовываемые дата и время.</param>
        <param name="sourceTimeZone">Часовой пояс, соответствующий значению <paramref name="dateTime" />.</param>
        <summary>Преобразует время в указанном часовом поясе в формат UTC.</summary>
        <returns>Время в формате UTC, соответствующее значению параметра <paramref name="dateTime" />. Свойству <see cref="P:System.DateTime.Kind" /> объекта <see cref="T:System.DateTime" /> всегда присваивается значение <see cref="F:System.DateTimeKind.Utc" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.DateTime.Kind%2A> свойство `dateTime` равняется <xref:System.DateTimeKind.Utc?displayProperty=nameWithType> и `sourceTimeZone` равняется <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>, этот метод возвращает `dateTime` без выполнения преобразования.  
  
 Если `dateTime` соответствующее время является неоднозначным, этот способ предполагает, что это стандартное время часового пояса источника. Если `dateTime` соответствует недопустимое время, этот метод создает исключение <xref:System.ArgumentException>.  
  
 Если эквивалент в формате UTC (UTC) `dateTime` более ранняя, чем <xref:System.DateTime.MinValue?displayProperty=nameWithType> или более поздней версии, <xref:System.DateTime.MaxValue?displayProperty=nameWithType>, этот метод возвращает <xref:System.DateTime.MinValue> или <xref:System.DateTime.MaxValue>, соответственно.  
  
   
  
## Examples  
 Следующий пример получает текущую дату из локальной системы преобразует его в формате UTC (UTC), а затем преобразует его в Токийское время и наконец преобразует из Токийское время UTC. Обратите внимание на то, что два раза UTC идентичны.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="dateTime" />.<see langword="Kind" /> равно <see cref="F:System.DateTimeKind.Utc" />, а <paramref name="sourceTimeZone" /> не равняется <see cref="P:System.TimeZoneInfo.Utc" />.  
  
-или- 
 <paramref name="dateTime" />.<see langword="Kind" /> равно <see cref="F:System.DateTimeKind.Local" />, а <paramref name="sourceTimeZone" /> не равняется <see cref="P:System.TimeZoneInfo.Local" />.  
  
-или- 
 <paramref name="sourceTimeZone" /><see langword=".IsInvalidDateTime(" /><paramref name="dateTime" /><see langword=")" /> возвращает <see langword="true" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="sourceTimeZone" /> — <see langword="null" />.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a51e1a3b-c983-4320-b31a-1f9fa3cf824a">Преобразование времени из одного часового пояса в другой</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateCustomTimeZone">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет часовой пояс, который не удалось найти на локальном компьютере.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">Идентификатор часового пояса.</param>
        <param name="baseUtcOffset">Объект, представляющий разность между значением времени в данном часовом поясе и временем в формате UTC.</param>
        <param name="displayName">Отображаемое имя нового часового пояса.</param>
        <param name="standardDisplayName">Имя зимнего времени нового часового пояса.</param>
        <summary>Создает пользовательский часовой пояс с указанным идентификатором, смещением от времени в формате UTC, отображаемым именем, а также отображаемым именем зимнего времени.</summary>
        <returns>Новый часовой пояс.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29> метод подходит для создания часовой пояс, который имеет каких-либо корректировок (то есть, часовой пояс, который не поддерживает летнее время). Чтобы определить часовой пояс, который включает в себя коррекции для летнего времени, используйте <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> или <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> метод.  
  
 В следующей таблице показаны связи между параметрами, которые предоставляются <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> метод и свойства <xref:System.TimeZoneInfo> объект, возвращаемый в результате вызова метода.  
  
|Параметр CreateCustomTimeZone|Свойство TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
  
 Как правило именем зимнего времени часового пояса и его идентификатор совпадают. Тем не менее длина идентификатора часового пояса не должен превышать 32 символов. Строка, передаваемая `displayName` параметр имеет довольно стандартный формат. Первая часть отображаемое имя является базовым смещением часового пояса относительно UTC, который обозначается аббревиатурой GMT (по Гринвичу), заключенный в круглые скобки. Это следует строка, определяющая часовой пояс, или один или несколько городов, регионов или стран в часовом поясе и (или). Например:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 В следующем примере создается пользовательский часовой пояс для областей Моусон и Холмевика может указываться Антарктида. Затем он отобразит результат преобразования местного времени во время в новый часовой пояс.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#1)]
 [!code-vb[System.TimeZone2.CreateTimeZone#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="id" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="id" /> представляет собой пустую строку ("").  
  
-или- 
Параметр <paramref name="baseUtcOffset" /> не представляет целое число минут.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="baseUtcOffset" /> больше 14 часов или меньше –14 часов.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Практическое руководство. Создание часовых поясов без правил коррекции</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[])" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule()) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">Идентификатор часового пояса.</param>
        <param name="baseUtcOffset">Объект, представляющий разность между значением времени в данном часовом поясе и временем в формате UTC.</param>
        <param name="displayName">Отображаемое имя нового часового пояса.</param>
        <param name="standardDisplayName">Имя зимнего времени нового часового пояса.</param>
        <param name="daylightDisplayName">Имя летнего времени нового часового пояса.</param>
        <param name="adjustmentRules">Массив, который прибавляет базовое смещение относительно UTC для определенного периода.</param>
        <summary>Создает пользовательский часовой пояс с указанным идентификатором, смещением от времени в формате UTC, отображаемым именем, именем зимнего времени, именем летнего времени и правилами коррекции для летнего времени.</summary>
        <returns>Объект <see cref="T:System.TimeZoneInfo" />, представляющий новый часовой пояс.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта перегрузка <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> метод подходит для создания часовой пояс, который поддерживает летнее время. Чтобы определить часовой пояс, который не поддерживает летнее время, используйте <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> или <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> метод.  
  
 В следующей таблице показаны связи между параметрами, которые предоставляются <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> метода и членов <xref:System.TimeZoneInfo> объект, возвращаемый в результате вызова метода.  
  
|Параметр CreateCustomTimeZone|Член TimeZoneInfo|  
|------------------------------------|-------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A>|  
|`adjustmentRules`|Массив <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> объектов, возвращенных <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> метод.|  
  
 Как правило именем зимнего времени часового пояса и его идентификатор совпадают. Тем не менее длина идентификатора часового пояса не должен превышать 32 символов. Строка, передаваемая `displayName` параметр имеет довольно стандартный формат. Первая часть отображаемое имя является базовым смещением часового пояса относительно UTC, который обозначается аббревиатурой GMT (по Гринвичу), заключенный в круглые скобки. Это следует строка, определяющая часовой пояс, или один или несколько городов, регионов или стран в часовом поясе и (или). Например:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 `baseUtcOffset` Параметр определяет смещение пользовательский часовой пояс в формате UTC (UTC) для всех правил коррекции часового пояса. Другими словами <xref:System.TimeZoneInfo> объектной модели предполагается, что смещение часового пояса от времени UTC неизменным на протяжении всего жизненного цикла часовой пояс и существует независимо от отдельных правил коррекции. С учетом часового пояса, которая была изменена его смещение от времени UTC, необходимо создать новый объект часового пояса.  
  
 Правила коррекции часовых поясов определяются следующим образом:  
  
1.  Вызов любого <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> или <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> метод для определения начального и конечного времени перехода для каждого правила коррекции.  
  
2.  Вызов <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> метод для каждого правила коррекции.  
  
3.  Назначение правил коррекции в массив может быть передан как `adjustmentRules` параметр.  
  
   
  
## Examples  
 В следующем примере создается пользовательский часовой пояс для станция Палмер и Анверс в Антарктиде. Затем преобразует местное время во время в новый часовой пояс и отображает результат.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#2)]
 [!code-vb[System.TimeZone2.CreateTimeZone#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="id" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="id" /> представляет собой пустую строку ("").  
  
-или- 
Параметр <paramref name="baseUtcOffset" /> не представляет целое число минут.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="baseUtcOffset" /> больше 14 часов или меньше –14 часов.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Правила коррекции, заданные в параметре <paramref name="adjustmentRules" />, перекрываются.  
  
-или- 
Последовательность правил коррекции, заданных в параметре <paramref name="adjustmentRules" />, не является хронологической.  
  
-или- 
Один или несколько элементов в <paramref name="adjustmentRules" /> имеют значение <see langword="null" />.  
  
-или- 
К одной дате может быть применено несколько правил коррекции.  
  
-или- 
Сумма параметра <paramref name="baseUtcOffset" /> и значения свойства <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> одного или нескольких объектов в массиве <paramref name="adjustmentRules" /> больше 14 часов или меньше –14 часов.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Практическое руководство. Создание часовых поясов с правилами коррекции</related>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo CreateCustomTimeZone (string id, TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, TimeZoneInfo.AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo CreateCustomTimeZone(string id, valuetype System.TimeSpan baseUtcOffset, string displayName, string standardDisplayName, string daylightDisplayName, class System.TimeZoneInfo/AdjustmentRule[] adjustmentRules, bool disableDaylightSavingTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.CreateCustomTimeZone(System.String,System.TimeSpan,System.String,System.String,System.String,System.TimeZoneInfo.AdjustmentRule[],System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateCustomTimeZone (id As String, baseUtcOffset As TimeSpan, displayName As String, standardDisplayName As String, daylightDisplayName As String, adjustmentRules As TimeZoneInfo.AdjustmentRule(), disableDaylightSavingTime As Boolean) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ CreateCustomTimeZone(System::String ^ id, TimeSpan baseUtcOffset, System::String ^ displayName, System::String ^ standardDisplayName, System::String ^ daylightDisplayName, cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ adjustmentRules, bool disableDaylightSavingTime);" />
      <MemberSignature Language="F#" Value="static member CreateCustomTimeZone : string * TimeSpan * string * string * string * TimeZoneInfo.AdjustmentRule[] * bool -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.CreateCustomTimeZone (id, baseUtcOffset, displayName, standardDisplayName, daylightDisplayName, adjustmentRules, disableDaylightSavingTime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="baseUtcOffset" Type="System.TimeSpan" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="displayName" Type="System.String" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="standardDisplayName" Type="System.String" Index="3" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="daylightDisplayName" Type="System.String" Index="4" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="adjustmentRules" Type="System.TimeZoneInfo+AdjustmentRule[]" Index="5" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="disableDaylightSavingTime" Type="System.Boolean" Index="6" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="id">Идентификатор часового пояса.</param>
        <param name="baseUtcOffset">Объект <see cref="T:System.TimeSpan" />, представляющий разность между значением времени в данном часовом поясе и временем в формате UTC.</param>
        <param name="displayName">Отображаемое имя нового часового пояса.</param>
        <param name="standardDisplayName">Имя зимнего времени нового часового пояса.</param>
        <param name="daylightDisplayName">Имя летнего времени нового часового пояса.</param>
        <param name="adjustmentRules">Массив объектов <see cref="T:System.TimeZoneInfo.AdjustmentRule" />, которые прибавляют базовое смещение относительно UTC для определенного периода.</param>
        <param name="disableDaylightSavingTime">Значение <see langword="true" /> для сброса в новом объекте всех связанных с летним временем сведений, представленных в параметре <paramref name="adjustmentRules" />; в противном случае — <see langword="false" />.</param>
        <summary>Создает пользовательский часовой пояс с указанным идентификатором, смещением от времени в формате UTC, отображаемым именем, именем зимнего времени, именем летнего времени, правилами коррекции для летнего времени и значением, позволяющим определить, отражает ли возвращаемый объект сведения о летнем времени.</summary>
        <returns>Новый часовой пояс. Если значение параметра <paramref name="disableDaylightSavingTime" /> равно <see langword="true" />, в возвращаемом объекте отсутствуют данные о летнем времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно использовать эту перегрузку <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> метод, чтобы создать пользовательский часовой пояс которого поддержки перехода на летнее время можно определить с помощью условий во время выполнения.  
  
 В следующей таблице показаны связи между параметрами, которые предоставляются <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> метода и членов <xref:System.TimeZoneInfo> объект, возвращаемый в результате вызова метода.  
  
|Параметр CreateCustomTimeZone|Свойство TimeZoneInfo|  
|------------------------------------|---------------------------|  
|`id`|<xref:System.TimeZoneInfo.Id%2A>|  
|`baseUtcOffset`|<xref:System.TimeZoneInfo.BaseUtcOffset%2A>|  
|`displayName`|<xref:System.TimeZoneInfo.DisplayName%2A>|  
|`standardDisplayName`|<xref:System.TimeZoneInfo.StandardName%2A>|  
|`daylightDisplayName`|<xref:System.TimeZoneInfo.DaylightName%2A> Если `disableDaylightSavingTime` является `false`; <xref:System.String.Empty?displayProperty=nameWithType> Если `disableDaylightSavingTime` является `true`.|  
|`adjustmentRules`|Массив <xref:System.TimeZoneInfo.AdjustmentRule> объектов, возвращенных <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> метод Если `disableDaylightSavingTime` — `false`; пустой массив, возвращаемый <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> метод Если `disableDaylightSavingTime` является `true`.|  
|`disableDaylightSavingTime`|Не <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A>.|  
  
 Как правило именем зимнего времени часового пояса и его идентификатор совпадают. Тем не менее длина идентификатора часового пояса не должен превышать 32 символов. Строка, передаваемая `displayName` параметр имеет довольно стандартный формат. Первая часть отображаемое имя является базовым смещением часового пояса относительно UTC, который обозначается аббревиатурой GMT (по Гринвичу), заключенный в круглые скобки. Это следует строка, определяющая часовой пояс, или один или несколько городов, регионов или стран в часовом поясе и (или). Например:  
  
```  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
 Правила коррекции часовых поясов определяются следующим образом:  
  
1.  Вызов любого <xref:System.TimeZoneInfo.TransitionTime.CreateFloatingDateRule%2A> или <xref:System.TimeZoneInfo.TransitionTime.CreateFixedDateRule%2A> метод для определения начала и окончания правил перехода для каждого правила коррекции.  
  
2.  Вызов <xref:System.TimeZoneInfo.AdjustmentRule.CreateAdjustmentRule%2A> метод для каждого правила коррекции.  
  
3.  Назначение правил коррекции в массив может быть передан как `adjustmentRules` параметр.  
  
 Если `disableDaylightSavingTime` параметр `false`, идентична работу данного метода <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> перегрузки. Если `disableDaylightSavingTime` — `true`, возвращаемый объект содержит без правил корректировки и <xref:System.TimeZoneInfo.DaylightName%2A> свойства, значение которого представляет собой пустую строку.  
  
   
  
## Examples  
 В следующем примере создается пользовательский часовой пояс для станция Палмер и Анверс в Антарктиде. Он задает `disableDaylightSavingTime` параметр в вызове <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A?displayProperty=nameWithType> метод `true`. Затем отображается имя летнего времени нового часового пояса, если таковой имеется и число правил коррекции для подтверждения нет сведений о летнего времени нового часового пояса.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#3)]
 [!code-vb[System.TimeZone2.CreateTimeZone#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="id" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="id" /> представляет собой пустую строку ("").  
  
-или- 
Параметр <paramref name="baseUtcOffset" /> не представляет целое число минут.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="baseUtcOffset" /> больше 14 часов или меньше –14 часов.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Правила коррекции, заданные в параметре <paramref name="adjustmentRules" />, перекрываются.  
  
-или- 
Последовательность правил коррекции, заданных в параметре <paramref name="adjustmentRules" />, не является хронологической.  
  
-или- 
Один или несколько элементов в <paramref name="adjustmentRules" /> имеют значение <see langword="null" />.  
  
-или- 
К одной дате может быть применено несколько правил коррекции.  
  
-или- 
Сумма параметра <paramref name="baseUtcOffset" /> и значения свойства <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> одного или нескольких объектов в массиве <paramref name="adjustmentRules" /> больше 14 часов или меньше –14 часов.</exception>
        <related type="Article" href="https://msdn.microsoft.com/library/a6af8647-7893-4f29-95a9-d94c65a6e8dd">Практическое руководство. Создание часовых поясов без правил коррекции</related>
        <related type="Article" href="https://msdn.microsoft.com/library/c52ef192-13a9-435f-8015-3b12eae8c47c">Практическое руководство. Создание часовых поясов с правилами коррекции</related>
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZoneInfo.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает отображаемое имя для летнего времени текущего часового пояса.</summary>
        <value>Отображаемое имя для летнего времени текущего часового пояса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Отображаемое имя локализуется согласно язык и региональные параметры, установленные с операционной системы Windows.  
  
 Объект <xref:System.TimeZoneInfo.DaylightName%2A> свойство, значение которого не равно <xref:System.String.Empty?displayProperty=nameWithType> или `null` не обязательно означает, что часовой пояс поддерживает летнее время. Чтобы определить, поддерживает ли часового пояса на летнее время, проверьте значение его <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> свойство.  
  
 В большинстве случаев `DaylightName` свойство системных часовых поясов не <xref:System.String.Empty?displayProperty=nameWithType> или `null`. Тем не менее <xref:System.TimeZoneInfo.DaylightName%2A> свойству настраиваемых часовых поясов может быть присвоено <xref:System.String.Empty?displayProperty=nameWithType>. Это происходит, когда пользовательский часовой пояс, создаваемые <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%29?displayProperty=nameWithType> или <xref:System.TimeZoneInfo.CreateCustomTimeZone%28System.String%2CSystem.TimeSpan%2CSystem.String%2CSystem.String%2CSystem.String%2CSystem.TimeZoneInfo.AdjustmentRule%5B%5D%2CSystem.Boolean%29?displayProperty=nameWithType> перегрузки и `disableDaylightSavingTime` параметр `true`. Таким образом, код должен никогда не предполагается, что значение <xref:System.TimeZoneInfo.DaylightName%2A> свойство не `null` или пустым.  
  
 <xref:System.TimeZoneInfo.DaylightName%2A> Свойство является аналогом <xref:System.TimeZone.DaylightName%2A> свойство <xref:System.TimeZone> класса.  
  
   
  
## Examples  
 В следующем примере определяется метод с именем `DisplayDateWithTimeZoneName` , использующий <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> метод, чтобы определить, следует ли отображать имя зимнего времени часового пояса или имя летнего времени.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string" Usage="System.TimeZoneInfo.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает универсальное отображаемое имя, представляющее часовой пояс.</summary>
        <value>Общее отображаемое название часового пояса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Отображаемое имя локализуется согласно язык и региональные параметры, установленные с операционной системы Windows.  
  
 Отображаемые имена для часовых поясов системы Windows выполните стандартному формату. Первая часть отображаемое имя является базовым смещением часового пояса относительно UTC, который обозначается аббревиатурой GMT (по Гринвичу), заключенный в круглые скобки. Для времени в формате UTC аббревиатура GMT смещение не заключен в круглые скобки.  Это следует строка, определяющая часовой пояс либо один или несколько городов, регионов или стран в часовом поясе. Например:  
  
```  
(GMT) Greenwich Mean Time : Dublin, Edinburgh, Lisbon, London  
(GMT+02:00) Athens, Beirut, Istanbul, Minsk  
(GMT-02:00) Mid-Atlantic  
(GMT-07:00) Mountain Time (US & Canada)  
```  
  
   
  
## Examples  
 В следующем примере извлекается <xref:System.TimeZoneInfo> объект, представляющий местный часовой пояс и выводит его отображаемое имя, именем зимнего времени, а также имя летнего времени. Выходные данные отображаются для систем в США. США.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет равенство двух объектов <see cref="T:System.TimeZoneInfo" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="timeZoneInfo.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="obj">Второй объект, сравниваемый с текущим объектом.</param>
        <summary>Определяет, равен ли текущий объект <see cref="T:System.TimeZoneInfo" /> другому объекту.</summary>
        <returns><see langword="true" />, если параметр <paramref name="obj" /> является объектом <see cref="T:System.TimeZoneInfo" />, который равен текущему экземпляру; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод преобразует или приводит к `obj` для <xref:System.TimeZoneInfo> объекта и сравнивает его с текущим экземпляром. Проверка на равенство на основе сравнения значений. Текущий <xref:System.TimeZoneInfo> экземпляра и `obj` считаются равными при следующих условиях:  
  
-   Тип времени выполнения `obj` является <xref:System.TimeZoneInfo>.  
  
-   Два объекта имеют одинаковые <xref:System.TimeZoneInfo.Id%2A> значение свойства.  
  
-   Два объекта имеют те же правила коррекции.  
  
 Если значением параметра `obj` является `null`, метод возвращает `false`.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.TimeZoneInfo.Equals%28System.Object%29> метод, чтобы определить, является ли местный часовой пояс по тихоокеанскому времени или по восточному времени.  
  
 [!code-csharp[System.TimeZoneInfo.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.timezoneinfo.equals/cs/equals1.cs#1)]
 [!code-vb[System.TimeZoneInfo.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.timezoneinfo.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.Equals(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Equals(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="override this.Equals : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.Equals other" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IEquatable`1.Equals(`0)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="other">Второй объект, сравниваемый с текущим объектом.</param>
        <summary>Определяет, равен ли текущий объект <see cref="T:System.TimeZoneInfo" /> другому объекту <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Значение <see langword="true" />, если два объекта <see cref="T:System.TimeZoneInfo" /> равны; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Равенство основано на сравнение значений. Два <xref:System.TimeZoneInfo> объекты считаются равными при следующих условиях:  
  
-   Значение их <xref:System.TimeZoneInfo.Id%2A> свойство похоже.  
  
-   Они имеют те же правила коррекции.  
  
 <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> Возвращает логическое значение, полученный в результате вычисление следующего выражения:  
  
 ```csharp 
 other.Id == this.Id && HasSameRules(other);  
 ```
  
 ```vb
 other.Id = me.Id AndAlso HasSameRules(other)  
 ```

 Если `other` параметр является неинициализированного <xref:System.TimeZoneInfo> объекта, этот метод возвращает `false`.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29> метод, чтобы определить, является ли местный часовой пояс по тихоокеанскому времени или по восточному времени.  
  
 [!code-csharp[System.TimeZone2.Class#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#7)]
 [!code-vb[System.TimeZone2.Class#7](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindSystemTimeZoneById">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FindSystemTimeZoneById (string id);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FindSystemTimeZoneById(string id) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FindSystemTimeZoneById(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FindSystemTimeZoneById (id As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FindSystemTimeZoneById(System::String ^ id);" />
      <MemberSignature Language="F#" Value="static member FindSystemTimeZoneById : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FindSystemTimeZoneById id" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="id">Идентификатор часового пояса, соответствующий свойству <see cref="P:System.TimeZoneInfo.Id" />.</param>
        <summary>Создает новый экземпляр объекта <see cref="T:System.TimeZoneInfo" /> на основе его идентификатора.</summary>
        <returns>Объект, идентификатор которого равен значению параметра <paramref name="id" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `id` Параметр должен точно соответствовать идентификатор часового пояса в длину, но не в случае для успешного сопоставления; то есть сравнение `id` с часовым поясом идентификаторы без учета регистра. Если вы хотите получить объекты часового пояса в зависимости от частичные совпадения, можно написать пользовательские процедуры, которые работают с доступным только для чтения коллекция <xref:System.TimeZoneInfo> объектов, возвращенных <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> метод.  
  
 В системах Windows `FindSystemTimeZoneById` пытается сопоставить `id` к имена подразделов реестра HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones ветви. В Linux и macOS, он использует сведения о часовом поясе в [ICU библиотеки](http://userguide.icu-project.org/datetime/timezone). Если не содержит сведения о часовом поясе, необходимы, реестр или в библиотеке, можно создать определенный часовой пояс либо путем вызова одной из перегрузок <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> метод или вызвав <xref:System.TimeZoneInfo.FromSerializedString%2A> для десериализации <xref:System.TimeZoneInfo> объекта, представляет требуемый часовой пояс. Тем не менее, не определенный системой времени часовых поясов, созданные эти вызовы методов и нельзя получить с помощью <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> метод. Эти пользовательские часовые пояса может осуществляться только через ссылку на объект, возвращаемый <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> или <xref:System.TimeZoneInfo.FromSerializedString%2A> вызова метода.  
  
Этот метод возвращает новый <xref:System.TimeZoneInfo> экземпляра для каждого вызова метода; он не возвращает кэшированные объекты. Это может повлиять на производительность приложений, которые вызывают `FindSystemTimeZoneById` метод несколько раз с тем же идентификатором.   
  
## Examples  
 В следующем примере используется <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> метод для извлечения Токио стандартном часовом поясе. Это <xref:System.TimeZoneInfo> объект затем используется для преобразования местного времени во время в Токио и определить, является ли оно Токийское время или летнее.  
  
 [!code-csharp[System.TimeZone2.Conversions#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Conversions/cs/convertdt2.cs#2)]
 [!code-vb[System.TimeZone2.Conversions#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Conversions/vb/convertdt2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">В системе недостаточно памяти для хранения сведений о часовом поясе.</exception>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="id" /> имеет значение <see langword="null" />.</exception>
        <exception cref="T:System.TimeZoneNotFoundException">Не найден идентификатор часового пояса, заданный параметром <paramref name="id" />. Это означает, что идентификатор часового пояса, имя которого соответствует <paramref name="id" />, не существует, или что идентификатор существует, но не содержит данных о часовом поясе.</exception>
        <exception cref="T:System.Security.SecurityException">Процесс не имеет разрешений, необходимых для чтения из раздела реестра, который содержит сведения о часовом поясе.</exception>
        <exception cref="T:System.InvalidTimeZoneException">Идентификатор часового пояса найден, однако данные реестра повреждены.</exception>
        <altmember cref="P:System.TimeZoneInfo.Id" />
        <related type="Article" href="https://msdn.microsoft.com/library/8cb620e5-c6a6-4267-a52e-beeb73cd1a34">Практическое руководство. Создание экземпляра объекта TimeZoneInfo</related>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedString">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo FromSerializedString (string source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.TimeZoneInfo FromSerializedString(string source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromSerializedString (source As String) As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static TimeZoneInfo ^ FromSerializedString(System::String ^ source);" />
      <MemberSignature Language="F#" Value="static member FromSerializedString : string -&gt; TimeZoneInfo" Usage="System.TimeZoneInfo.FromSerializedString source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="source">Строковое представление сериализованного объекта <see cref="T:System.TimeZoneInfo" />.</param>
        <summary>Десериализует строку для повторного создания исходного сериализованного объекта <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Исходный сериализованный объект.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Нет альтернативы предоставлению весь код, необходимый для создания часовой пояс, который не найден в реестре Windows или в [ICU библиотеки](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS. Вы можете определить пользовательский часовой пояс и либо использовать <xref:System.TimeZoneInfo.ToSerializedString%2A> метода в исполняемый файл или используйте программу установки приложения для сохранения часового пояса в виде строки. Приложения можно получить эту строку из исходного хранилища и создать его с помощью <xref:System.TimeZoneInfo.FromSerializedString%2A> метод.  
  
   
  
## Examples  
 Следующий пример осуществляет попытку извлечь Антарктики/южному часового пояса из локальной системы. Если происходит сбой, в коде предпринимается попытка получить сведения о часовом поясе из текстового файла в каталоге приложения. Если эта попытка завершается неудачей, код создает часовой пояс и записывает сведения о часовом поясе в текстовом файле.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="source" /> имеет значение <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException">Значением параметра <paramref name="source" /> является строка NULL.</exception>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Исходный параметр нельзя десериализовать обратно в объект <see cref="T:System.TimeZoneInfo" />.</exception>
        <altmember cref="M:System.TimeZoneInfo.ToSerializedString" />
        <related type="Article" href="https://msdn.microsoft.com/library/6b7b4de9-da07-47e3-8f4c-823f81798ee7">Практическое руководство. Восстановление часовых поясов из внедренного ресурса</related>
      </Docs>
    </Member>
    <Member MemberName="GetAdjustmentRules">
      <MemberSignature Language="C#" Value="public TimeZoneInfo.AdjustmentRule[] GetAdjustmentRules ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.TimeZoneInfo/AdjustmentRule[] GetAdjustmentRules() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAdjustmentRules" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAdjustmentRules () As TimeZoneInfo.AdjustmentRule()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeZoneInfo::AdjustmentRule ^&gt; ^ GetAdjustmentRules();" />
      <MemberSignature Language="F#" Value="member this.GetAdjustmentRules : unit -&gt; TimeZoneInfo.AdjustmentRule[]" Usage="timeZoneInfo.GetAdjustmentRules " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo+AdjustmentRule[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Извлекает массив объектов <see cref="T:System.TimeZoneInfo.AdjustmentRule" />, который применятся к текущему объекту <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Массив объектов для данного часового пояса.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> Метод извлекает массив <xref:System.TimeZoneInfo.AdjustmentRule?displayProperty=nameWithType> объектов. Каждый объект в массиве определяет дату вступления в силу начала и окончания этого времени для часового пояса, а также его разностных (точное значение, по которому должно измениться время в результате коррекции). Кроме того, два свойства возвращают <xref:System.TimeZoneInfo.TransitionTime?displayProperty=nameWithType> объектами, которые определяют, когда происходит каждый ежегодный переход к стандартному времени и с.  
  
 Если несколько правил коррекции часового пояса, они обычно упорядочены от ранней (с нулевым индексом) последней версии (по индексу <xref:System.Array.Length%2A> - 1).  
  
 Если часовых поясов без правил корректировки <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> метод возвращает пустой массив (массив которого <xref:System.Array.Length%2A> равно нулю).  
  
 Изменения в элементы массива, возвращаемого <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> метод, не отражаются в правила коррекции, которые принадлежат к определенному часовому поясу. Для изменения правил коррекции часового пояса (например, для отражения исторического перехода на и с летнего времени) вы должны создать новый часовой пояс с соответствующими правилами коррекции, а не изменять существующий.  
  
   
  
## Examples  
 Следующий пример извлекает все часовые пояса, определенные для локальной системы и отображает полные сведения об их правил коррекции в консоль.  
  
 [!code-csharp[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/cs/System.TimeZone2.AdjustmentRule.Class.cs#3)]
 [!code-vb[System.TimeZone2.AdjustmentRule.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.AdjustmentRule.Class/vb/System.TimeZone2.AdjustmentRule.Class.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">В системе недостаточно памяти для создания внутренней копии правил коррекции.</exception>
        <altmember cref="T:System.TimeZoneInfo.AdjustmentRule" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAmbiguousTimeOffsets">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает сведения о возможных датах и времени, которым можно сопоставить неоднозначные значения этих величин.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTime -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Дата и время.</param>
        <summary>Возвращает сведения о возможных датах и времени, которым можно сопоставить неоднозначные значения этих величин.</summary>
        <returns>Массив объектов, представляющий возможные смещения относительно времени UTC, которым может соответствовать определенная дата и время.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Точное поведение этого метода зависит от связи между <xref:System.DateTime.Kind%2A> свойство и <xref:System.TimeZoneInfo> объекта, как показано в следующей таблице.  
  
|Тип объекта TimeZoneInfo|Значение свойства Kind|Поведение|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> или <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Неоднозначное время возвращает смещений для `dateTime`.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Преобразует `dateTime` местное время, а затем возвращает смещений неоднозначного времени для этого времени.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|Любое значение.|Создает <xref:System.ArgumentException>.|  
|Любому другому часовому поясу.|<xref:System.DateTimeKind.Local> или <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Преобразует `dateTime` для указанного часового пояса, а затем определяет, является ли время неоднозначным.|  
|Любому другому часовому поясу.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Определяет, является ли `dateTime` в указанном часовом поясе является неоднозначным.|  
  
 Порядок <xref:System.TimeSpan> объектов в массиве, возвращенное этим методом не определено. Тем не менее, можно определить, какой элемент представляет смещение от стандартного времени часового пояса путем сравнения его значения с часовым поясом <xref:System.TimeZoneInfo.BaseUtcOffset%2A> свойство. Сопоставление неоднозначного времени стандартному времени часового пояса, см. в разделе [как: Разрешение проблемы неоднозначности времени](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
   
  
## Examples  
 В следующем примере определяется метод с именем `ShowPossibleUtcTimes` , использующий <xref:System.TimeZoneInfo.GetAmbiguousTimeOffsets%28System.DateTime%29> метод, которое будет сопоставлено неоднозначное время возможных время соответствующего формате UTC (UTC).  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#1)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#1)]  
  
 Затем метод можно вызывать с помощью следующего кода:  
  
 [!code-csharp[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/cs/System.TimeZone2.GetAmbiguousTimeOffsets.cs#2)]
 [!code-vb[System.TimeZone2.GetAmbiguousTimeOffsets#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetAmbiguousTimeOffsets/vb/System.TimeZone2.GetAmbiguousTimeOffsets.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="dateTime" /> не является неоднозначным временем.</exception>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Практическое руководство. Разрешение проблемы неоднозначности времени</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Практическое руководство. Предоставление пользователям возможности разрешения неоднозначности времени</related>
      </Docs>
    </Member>
    <Member MemberName="GetAmbiguousTimeOffsets">
      <MemberSignature Language="C#" Value="public TimeSpan[] GetAmbiguousTimeOffsets (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan[] GetAmbiguousTimeOffsets(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetAmbiguousTimeOffsets(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;TimeSpan&gt; ^ GetAmbiguousTimeOffsets(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetAmbiguousTimeOffsets : DateTimeOffset -&gt; TimeSpan[]" Usage="timeZoneInfo.GetAmbiguousTimeOffsets dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Дата и время.</param>
        <summary>Возвращает сведения о возможных датах и времени, которым можно сопоставить неоднозначные значения этих величин.</summary>
        <returns>Массив объектов, представляющий возможные смещения относительно времени UTC, которым может соответствовать определенная дата и время.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Точное поведение этого метода зависит от связи между <xref:System.DateTimeOffset.Offset%2A> свойство `dateTimeOffset` параметр и <xref:System.TimeZoneInfo> объекта. Если значение <xref:System.DateTimeOffset.Offset%2A> свойство соответствует возможные смещения часового пояса от времени UTC для что даты и времени, этот метод возвращает возможные смещения. В противном случае она преобразует `dateTimeOffset` для времени в текущем часовом поясе, а затем возвращает возможные смещения, Дата и время.  
  
 Порядок <xref:System.TimeSpan> объектов в массиве, возвращенное этим методом не определено. Тем не менее, можно определить, какой элемент представляет смещение от стандартного времени часового пояса путем сравнения его значения с часовым поясом <xref:System.TimeZoneInfo.BaseUtcOffset%2A> свойство. Сопоставление неоднозначного времени стандартному времени часового пояса, см. в разделе [как: Разрешение проблемы неоднозначности времени](~/docs/standard/datetime/resolve-ambiguous-times.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="dateTimeOffset" /> не является неоднозначным временем.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
        <related type="Article" href="https://msdn.microsoft.com/library/2cf5fb25-492c-4875-9245-98cac8348e97">Практическое руководство. Разрешение проблемы неоднозначности времени</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bca874ee-5b68-4654-8bbd-3711220ef332">Практическое руководство. Предоставление пользователям возможности разрешения неоднозначности времени</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="timeZoneInfo.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Служит хэш-функцией для алгоритмов хэширования и таких структур данных, как хэш-таблицы.</summary>
        <returns>32-битовое целое число со знаком, выступающее в роли хэш-кода данного объекта <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об <xref:System.TimeZoneInfo.GetHashCode%2A> метод, см. в разделе <xref:System.Object.GetHashCode%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSystemTimeZones">
      <MemberSignature Language="C#" Value="public static System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt; GetSystemTimeZones ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.TimeZoneInfo&gt; GetSystemTimeZones() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetSystemTimeZones" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetSystemTimeZones () As ReadOnlyCollection(Of TimeZoneInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::ObjectModel::ReadOnlyCollection&lt;TimeZoneInfo ^&gt; ^ GetSystemTimeZones();" />
      <MemberSignature Language="F#" Value="static member GetSystemTimeZones : unit -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;TimeZoneInfo&gt;" Usage="System.TimeZoneInfo.GetSystemTimeZones " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>System.Security.SecurityTreatAsSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.TimeZoneInfo&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает сохраненную коллекцию всех часовых поясов, сведения о которых доступны в локальной системе.</summary>
        <returns>Доступная только для чтения коллекция объектов <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Метод извлекает все доступные сведения о часовом поясе из подразделов реестра HKEY_LOCAL_MACHINE\Software\Microsoft\Windows NT\CurrentVersion\Time Zones ключа в системах Windows и из [ICU библиотеки](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS. Если не удалось успешно извлечь и проанализировать значения для свойств определенной строки отдельных <xref:System.TimeZoneInfo> объектов, этот метод задает значения пустую строку (»»).  
  
> [!IMPORTANT]
>  <xref:System.TimeZoneInfo.GetSystemTimeZones%2A> Метод возвращает коллекцию <xref:System.TimeZoneInfo> объектов только для часового пояса, заданного в или ICU библиотеки. Он не включает часовых поясов, созданных с помощью перегрузок <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> метод. Они доступны только через ссылку на объект, возвращаемый методом создания часового пояса.  
  
 Коллекция, возвращаемая этим методом сортируется по смещению UTC и для часовых поясов, которые имеют то же смещение UTC по отображаемому имени, с использованием текущего языка и региональных параметров. Сведения о отображаемое имя, см. в разделе <xref:System.TimeZoneInfo.DisplayName%2A>.  
  
 <xref:System.Collections.ObjectModel.ReadOnlyCollection%601> Поддерживает объект, возвращаемый этим методом <xref:System.Collections.Generic.IEnumerable%601> интерфейс, который означает, что его проходе можно с помощью `foreach` (в C#) или `For Each…Next` (в Visual Basic) инструкции. Каждая итерация цикла предоставляет следующий <xref:System.TimeZoneInfo> объекта в коллекции.  
  
 Коллекция <xref:System.TimeZoneInfo> объектов представляет часовые пояса, определенные на локальном компьютере; его не обязательно предоставляет полные сведения для всех часовых поясов во время все периоды времени. Если приложению требуется часовых поясов не найден на локальном компьютере, можно создать пользовательский часовой пояс, с помощью перегрузок <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> метод. Дополнительные сведения см. в разделе [Как Создание часовых поясов без правил коррекции](~/docs/standard/datetime/create-time-zones-without-adjustment-rules.md) и [как: Создание часовых поясов с правилами коррекции](~/docs/standard/datetime/create-time-zones-with-adjustment-rules.md).  
  
 Вы также можете определить, определен ли отдельные часового пояса на локальном компьютере путем вызова <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> с указанием идентификатора часового пояса, можно извлекать в качестве параметра.  
  
   
  
## Examples  
 В следующем примере извлекается коллекция объектов часовых поясов, которые представляют часового пояса, заданного на компьютере и записывает сведения о них в текстовый файл.  
  
 [!code-csharp[System.TimeZone2.Class#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/getsystemtimezones1.cs#6)]
 [!code-vb[System.TimeZone2.Class#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/getsystemtimezones1.vb#6)]
  [!code-powershell[System.TimeZone2.Class#6](~/samples/snippets/powershell/VS_Snippets_CLR_System/System.TimeZone2.Class/PS/Timezone2_Examples.ps1)]   
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Недостаточно памяти для хранения сведений обо всех часовых поясах.</exception>
        <exception cref="T:System.Security.SecurityException">У пользователя отсутствует разрешение для чтения из разделов реестра, в которых содержатся сведения о часовых поясах.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetUtcOffset">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Вычисляет для определенной даты и времени смещение или разность между временем в данном часовом поясе и временем в формате UTC.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Дата и время, для которых необходимо определить смещение.</param>
        <summary>Вычисляет для определенной даты и времени смещение или разность между временем в данном часовом поясе и временем в формате UTC.</summary>
        <returns>Объект, в котором указывается разность во времени между двумя часовыми поясами.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращенный промежуток включает в себя все различия, из-за применение правил коррекции для текущего часового пояса. Он отличается от <xref:System.TimeZoneInfo.BaseUtcOffset%2A> свойство, которое возвращает разницу между временем в формате UTC и часового пояса (зима) и, следовательно, не учитывать правила коррекции.  
  
 Если `dateTime` параметра <xref:System.DateTime.Kind%2A> свойства не соответствует объекту часового пояса, этот метод выполняет необходимые преобразования перед возвращением результата. Например, это может произойти, если <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType> , но часовой пояс не местного часового пояса. Если `dateTime` является неоднозначным, или если преобразованное время является неоднозначным, этот метод интерпретирует неоднозначное время как зимнее время. Если `dateTime` является недопустимым, этот метод возвращает <xref:System.TimeSpan> объект, который отражает разницу между временем UTC и временем стандартного часового пояса.  
  
 <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29?displayProperty=nameWithType> Метод аналогичен в операциях с <xref:System.TimeZone.GetUtcOffset%2A> метод <xref:System.TimeZone> класса.  
  
   
  
## Examples  
 Следующий пример иллюстрирует использование <xref:System.TimeZoneInfo.GetUtcOffset%28System.DateTime%29> метод с различными часовыми поясами и значения даты, которые имеют различные <xref:System.DateTime.Kind%2A> значения свойств.  
  
 [!code-csharp[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/cs/System.TimeZone2.GetUtcOffset.cs#1)]
 [!code-vb[System.TimeZone2.GetUtcOffset#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.GetUtcOffset/vb/System.TimeZone2.GetUtcOffset.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.BaseUtcOffset" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public TimeSpan GetUtcOffset (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.GetUtcOffset(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TimeSpan GetUtcOffset(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.GetUtcOffset : DateTimeOffset -&gt; TimeSpan" Usage="timeZoneInfo.GetUtcOffset dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Дата и время, для которых необходимо определить смещение.</param>
        <summary>Вычисляет для определенной даты и времени смещение или разность между временем в данном часовом поясе и временем в формате UTC.</summary>
        <returns>Объект, в котором указывается разность между временем в формате UTC и временем в текущем часовом поясе.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращенный промежуток включает в себя все различия, из-за применение правил коррекции для текущего часового пояса. Он отличается от <xref:System.TimeZoneInfo.BaseUtcOffset%2A> свойство, которое возвращает разницу между временем в формате UTC и часового пояса (зима) и, следовательно, не учитывать правила коррекции.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasSameRules">
      <MemberSignature Language="C#" Value="public bool HasSameRules (TimeZoneInfo other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasSameRules(class System.TimeZoneInfo other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.HasSameRules(System.TimeZoneInfo)" />
      <MemberSignature Language="VB.NET" Value="Public Function HasSameRules (other As TimeZoneInfo) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasSameRules(TimeZoneInfo ^ other);" />
      <MemberSignature Language="F#" Value="member this.HasSameRules : TimeZoneInfo -&gt; bool" Usage="timeZoneInfo.HasSameRules other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.TimeZoneInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="other">Второй объект, сравниваемый с текущим объектом <see cref="T:System.TimeZoneInfo" />.</param>
        <summary>Указывает, совпадают ли правила коррекции текущего объекта и другого объекта <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Значение <see langword="true" />, если правила коррекции и базовые смещения двух часовых поясов совпадают; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как и <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> метод, <xref:System.TimeZoneInfo.HasSameRules%2A> метод указывает, имеют ли два часовых поясов же базовое смещение относительно (согласно определению <xref:System.TimeZoneInfo.BaseUtcOffset%2A> свойства) и те же правила коррекции. В отличие от <xref:System.TimeZoneInfo.Equals%28System.TimeZoneInfo%29?displayProperty=nameWithType> метод, <xref:System.TimeZoneInfo.HasSameRules%2A> не сравнивает идентификаторы часовых поясов (согласно определению <xref:System.TimeZoneInfo.Id%2A> свойство).  
  
   
  
## Examples  
 Как правило, количество часовые пояса, определенные в реестре Windows и [ICU библиотеки](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS иметь одинаковое смещение от времени в формате UTC и те же правила коррекции. Следующий пример отображает список этих часовых поясов в консоль.  
  
 [!code-csharp[System.TimeZone2.HasSameRules#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/cs/HasSameRules.cs#1)]
 [!code-vb[System.TimeZone2.HasSameRules#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.HasSameRules/vb/HasSameRules.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="other" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Id">
      <MemberSignature Language="C#" Value="public string Id { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Id" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Id" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Id As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Id { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Id : string" Usage="System.TimeZoneInfo.Id" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает идентификатор часового пояса.</summary>
        <value>Идентификатор часового пояса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Идентификатор часового пояса является ключевую строку, которая однозначно определяет конкретный часовой пояс. В системах Windows, он соответствует подразделов ветви реестра в системах Windows и из зоны NT\CurrentVersion\Time HKEY_LOCAL_MACHINE\Software\Microsoft\Windows [ICU библиотеки](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS. Ее можно передать в качестве параметра <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> метод для создания экземпляра <xref:System.TimeZoneInfo> , представляющий конкретный часовой пояс.  
  
> [!IMPORTANT]
>  Несмотря на то, что имя ключа в реестре Windows не может превышать 255 символов, мы рекомендуем использовать идентификатор, назначаемый пользовательский часовой пояс не более 32 символов. Чем длиннее идентификатор, тем больше вероятность того, что неверное имя ключа будет указано, при извлечении.  
  
 Значение <xref:System.TimeZoneInfo.Id%2A> свойство обычно, но не всегда, идентична <xref:System.TimeZoneInfo.StandardName%2A> свойство. Идентификатор часового пояса UTC — UTC.  
  
   
  
## Examples  
 В следующем примере перечисляются идентификатор каждого из часового пояса, заданного на локальном компьютере.  
  
 [!code-csharp[System.TimeZone2.Class#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#5)]
 [!code-vb[System.TimeZone2.Class#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsAmbiguousTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Определяет, являются ли заданная дата и время в заданном часовом поясе неоднозначными и можно ли им сопоставить два и более момента времени в формате UTC.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Значение даты и времени.</param>
        <summary>Определяет, являются ли заданная дата и время в заданном часовом поясе неоднозначными и можно ли им сопоставить два и более момента времени в формате UTC.</summary>
        <returns>Значение <see langword="true" />, если параметр <paramref name="dateTime" /> неоднозначен; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Неоднозначное время попадает в диапазон времени для текущего часового пояса. Это означает, что это может быть стандартное время или время, полученный в результате применения правил коррекции. Как правило неоднозначность времени возникает при переводится для возврата стандартного времени на зимнее время. См. в разделе "Пример" пример.  
  
 Время (UTC) имеет нет неоднозначности времени; ни один часовых поясов, которые не поддерживают летнего времени. Таким образом, у этих часовых поясов без правил коррекции и вызовы <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> метод всегда возвращает `false`.  
  
 Для часовых поясов, которые наблюдают за летнее время, точное поведение этого метода зависит от связи между <xref:System.DateTime.Kind%2A> свойство и <xref:System.TimeZoneInfo> объекта, как показано в следующей таблице.  
  
|Тип объекта TimeZoneInfo|Значение свойства Kind|Поведение|  
|------------------------------|-------------------------|--------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> или <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Определяет, является ли `dateTime` параметра является неоднозначным.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Преобразует `dateTime` в местное время, а затем определяет, является ли время неоднозначным.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType> или <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Возвращает `false`.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|Если `dateTime` является неоднозначным, предполагается, что он является стандартное время, преобразует его в формат UTC и возвращает `false`.|  
|Любому другому часовому поясу.|<xref:System.DateTimeKind.Local?displayProperty=nameWithType> или <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Преобразует `dateTime` во время в указанном часовом поясе, а затем определяет, является ли время неоднозначным.|  
|Любому другому часовому поясу.|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Определяет, является ли `dateTime` является неоднозначным.|  
  
   
  
## Examples  
 В тихоокеанском часовом поясе летнего времени заканчивается в 2:00 утра 4 ноября 2007 г. В следующем примере передается время с интервалом в одну минуту из 0:59:00 4 ноября 2007 г. в 2:01:00. 4 ноября 2007 г. Чтобы <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> метод <xref:System.TimeZoneInfo> , представляющий Тихоокеанский часовой пояс. В выходных данных консоли показывают все значения времени с 01:00:00 4 ноября 2007 г. для 1:59:00 4 ноября 2007 г. являются неоднозначными.  
  
 [!code-csharp[System.TimeZone2.Class#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#8)]
 [!code-vb[System.TimeZone2.Class#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.DateTime.Kind" /> значения <paramref name="dateTime" /> — <see cref="F:System.DateTimeKind.Local" />, а <paramref name="dateTime" /> — недопустимое время.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsAmbiguousTime">
      <MemberSignature Language="C#" Value="public bool IsAmbiguousTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsAmbiguousTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsAmbiguousTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAmbiguousTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsAmbiguousTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsAmbiguousTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Дата и время.</param>
        <summary>Определяет, являются ли заданная дата и время в заданном часовом поясе неоднозначными и можно ли им сопоставить два и более момента времени в формате UTC.</summary>
        <returns>Значение <see langword="true" />, если значение параметра <paramref name="dateTimeOffset" /> в текущем часовом поясе является неоднозначным; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Неоднозначное время попадает в диапазон времени для текущего часового пояса. Это означает, что он может быть стандартное время или время, полученный в результате применения правил коррекции. Как правило неоднозначность времени возникает при переводится для возврата стандартного времени на зимнее время. Время (UTC) имеет нет неоднозначности времени; ни один часовых поясов, которые не поддерживают летнего времени.  
  
 Точное поведение метода зависит от связи между <xref:System.DateTimeOffset.Offset%2A> свойство `dateTimeOffset` параметр и в текущем часовом поясе. Если значение <xref:System.DateTimeOffset.Offset%2A> свойство имеет возможного смещение от времени UTC текущего часового пояса, этот метод определяет ли эта дата и время является неоднозначным. В противном случае она преобразует `dateTimeOffset` во время в текущем часовом поясе, а затем определяет ли эта дата и время является неоднозначным.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Указывает, попадают ли заданные дата и время в диапазон летнего времени для часового пояса текущего объекта <see cref="T:System.TimeZoneInfo" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Значение даты и времени.</param>
        <summary>Указывает, попадают ли заданные дата и время в диапазон летнего времени для часового пояса текущего объекта <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Значение <see langword="true" />, если параметр <paramref name="dateTime" /> относится к летнему времени; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращаемое значение <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> зависит от связи между часового пояса, представленное <xref:System.TimeZoneInfo> объекта и <xref:System.DateTime.Kind%2A> свойство `dateTime` параметра, как показано в следующей таблице.  
  
|Объекта TimeZoneInfo|Свойство DateTime.Kind|Результат|  
|-------------------------|----------------------------|------------|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Local`|Определяет, является ли `dateTime` является летнего времени.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Utc`|Преобразует `dateTime` от времени UTC в местное время и определяет, является ли летнее время.|  
|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|`DateTimeKind.Unspecified`|Предполагается, что `dateTime` представляет местное время и определяет, является ли летнее время.|  
|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType>|`DateTimeKind.Local`, `DateTimeKind.Unspecified`или `DateTimeKind.Utc`|Возвращает `false` (в формате UTC не поддерживает летнее время).|  
|Любой другой <xref:System.TimeZoneInfo> объекта.|`DateTimeKind.Local`|Преобразует местное время в эквивалентное время <xref:System.TimeZoneInfo> объекта и затем определяет, является ли последнее летнего времени.|  
|Любой другой <xref:System.TimeZoneInfo> объекта.|`DateTimeKind.Utc`|Преобразует UTC в эквивалентное время <xref:System.TimeZoneInfo> объекта и затем определяет, является ли последнее летнего времени.|  
|Любой другой <xref:System.TimeZoneInfo> объекта.|`DateTimeKind.Unspecified`|Определяет, является ли `dateTime` является летнего времени.|  
  
 Если часовой пояс, представленный <xref:System.TimeZoneInfo> объект не поддерживает летнее время, этот метод всегда возвращает `false`. Число часовых поясов, включая <xref:System.TimeZoneInfo.Utc%2A>, не соблюдаются летнего времени.  Чтобы определить, поддерживает ли часового пояса на летнее время, получить значение его <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> свойство.  
  
 Если `dateTime` параметр указывает неоднозначное время в часовом поясе текущего объекта, <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> метод интерпретирует `dateTime` качестве (зима) и возвращает `false` если его <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType> или <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>. Если <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, этот метод будет выбрать правильный неоднозначное время и он указывает на летнее время.  
  
 Так как <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29?displayProperty=nameWithType> метод может возвращать `false` для даты и времени, который является неоднозначным (то есть, даты и времени, который может представлять стандартное или как летнее время в заданном часовом поясе), <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29?displayProperty=nameWithType> метод может быть связан с <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> метод, чтобы определить, может ли время летнее время. Так как неоднозначное время — оно может быть летнее время и стандартное время, <xref:System.TimeZoneInfo.IsAmbiguousTime%28System.DateTime%29> метод может вызываться сначала для определения даты и времени может ли летнее время. Если метод возвращает `false`, <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> метод можно вызвать для определения ли <xref:System.DateTime> значение — летнее время. В следующем примере этот метод.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#2)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#2)]  
  
 Если `dateTime` параметр указывает недопустимое время, в вызове метода создается <xref:System.ArgumentException> Если значение `dateTime` параметра <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType>; в противном случае метод возвращает `false`.  
  
 Вызовите <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> метод, чтобы определить, следует ли использовать часовых поясов <xref:System.TimeZoneInfo.StandardName%2A> значение или его <xref:System.TimeZoneInfo.DaylightName%2A> значение при отображении имени часового пояса. См. в разделе "Пример" пример.  
  
   
  
## Examples  
 В следующем примере определяется метод с именем `DisplayDateWithTimeZoneName` , использующий <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> метод, чтобы определить, следует ли отображать имя зимнего времени часового пояса или имя летнего времени.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Свойство <see cref="P:System.DateTime.Kind" /> значения <paramref name="dateTime" /> — <see cref="F:System.DateTimeKind.Local" />, а <paramref name="dateTime" /> — недопустимое время.</exception>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool IsDaylightSavingTime (DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsDaylightSavingTime(valuetype System.DateTimeOffset dateTimeOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTimeOffset)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDaylightSavingTime(DateTimeOffset dateTimeOffset);" />
      <MemberSignature Language="F#" Value="member this.IsDaylightSavingTime : DateTimeOffset -&gt; bool" Usage="timeZoneInfo.IsDaylightSavingTime dateTimeOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTimeOffset" Type="System.DateTimeOffset" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTimeOffset">Значение даты и времени.</param>
        <summary>Указывает, попадают ли заданные дата и время в диапазон летнего времени для часового пояса текущего объекта <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Значение <see langword="true" />, если параметр <paramref name="dateTimeOffset" /> относится к летнему времени; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возвращаемое значение <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> зависит от связи между часового пояса, представленное <xref:System.TimeZoneInfo> объекта и <xref:System.DateTimeOffset.Offset%2A> свойство `dateTimeOffset` параметр. Если `dateTimeOffset` не соответствует смещению часового пояса от времени UTC, преобразует метода, которые время во время в текущем часовом поясе. Затем определяется, является ли эта дата и время летнему времени.  
  
 Если часовой пояс, представленный <xref:System.TimeZoneInfo> объект не поддерживает летнее время, этот метод всегда возвращает `false`. Чтобы определить, поддерживает ли часового пояса на летнее время, получить значение его <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> свойство.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      </Docs>
    </Member>
    <Member MemberName="IsInvalidTime">
      <MemberSignature Language="C#" Value="public bool IsInvalidTime (DateTime dateTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsInvalidTime(valuetype System.DateTime dateTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.IsInvalidTime(System.DateTime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInvalidTime(DateTime dateTime);" />
      <MemberSignature Language="F#" Value="member this.IsInvalidTime : DateTime -&gt; bool" Usage="timeZoneInfo.IsInvalidTime dateTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dateTime" Type="System.DateTime" Index="0" FrameworkAlternate="xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="dateTime">Значение даты и времени.</param>
        <summary>Указывает, являются ли определенная дата и время допустимыми.</summary>
        <returns>Значение <see langword="true" />, если значение <paramref name="dateTime" /> недопустимо; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Недопустимое время попадает в диапазон времени для текущего часового пояса, который не удается сопоставить по Гринвичу (UTC), из-за применения правил коррекции. Как правило недопустимое время возникает при переходе на летнее время. См. в разделе "Пример" пример.  
  
 Значение <xref:System.DateTime.Kind%2A> свойство `dateTime` параметр влияет ли `dateTime` представляет недопустимое время, как показано в следующей таблице.  
  
|Свойство DateTime.Kind|Объекта TimeZoneInfo (если применимо)|Поведение|  
|----------------------------|-------------------------------------------|--------------|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>|Определяет, является ли время недопустимый.|  
|<xref:System.DateTimeKind.Local?displayProperty=nameWithType>|<xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> или локальному часовому поясу.|Преобразует `dateTime` времени <xref:System.TimeZoneInfo> объекта и возвращает `false`.|  
|<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>|Неприменимо.|Предполагается, что `dateTime` время <xref:System.TimeZoneInfo> объекта и определяет, является ли он недопустимые.|  
|<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>|Неприменимо.|Возвращает `false`.|  
  
   
  
## Examples  
 В тихоокеанском часовом поясе летнее время начинается в 2:00 2 апреля 2006 г. Приведенный ниже код передает время с интервалом в одну минуту с 01:59:00 2 апреля 2006 г. до 3:01 часов 2 апреля 2006 г. Чтобы <xref:System.TimeZoneInfo.IsInvalidTime%2A> метод <xref:System.TimeZoneInfo> , представляющий Тихоокеанский часовой пояс. В выходных данных консоли показывают все значения времени с 2:00 2 апреля 2006 г. до 2:59 часов 2 апреля 2006 г. являются недопустимыми.  
  
 [!code-csharp[System.TimeZone2.Class#9](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#9)]
 [!code-vb[System.TimeZone2.Class#9](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#9)]  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.TimeZoneInfo.IsAmbiguousTime" />
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Local" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Local" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Local As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Local { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Local : TimeZoneInfo" Usage="System.TimeZoneInfo.Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.5">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.TimeZoneInfo" />, представляющий местный часовой пояс.</summary>
        <value>Объект, представляющий местный часовой пояс.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Местный часовой пояс — это часовой пояс на компьютере, где выполняется код.  
  
> [!IMPORTANT]
>  Следует всегда обращаться к местным часовым поясом <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> свойства, а не местный часовой пояс в <xref:System.TimeZoneInfo> переменной объекта. Это предотвращает <xref:System.TimeZoneInfo> переменной объекта путем вызова <xref:System.TimeZoneInfo.ClearCachedData%2A> метод.  
  
 В системах Windows <xref:System.TimeZoneInfo> объект, возвращаемый <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> свойство отражает настройку **автоматически корректировались перехода на летнее время** флажок на панели управления **даты и времени**  приложения. Если флажок не установлен, кэшированная копия местного часового пояса не содержат летним временем сведений. Это означает следующее.  
  
-   Местного часового пояса <xref:System.TimeZoneInfo.GetAdjustmentRules%2A> метод возвращает массив, длина которого равна нулю.  
  
-   Местного часового пояса <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> возвращает `false`.  
  
-   Местный часовой пояс имеет не раз или недопустимость (все вызовы <xref:System.TimeZoneInfo.IsAmbiguousTime%2A> или <xref:System.TimeZoneInfo.IsInvalidTime%2A> возвращают `false`).  
  
-   Все вызовы <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A> с отдельным местное время возвращает значение false.  
  
 Это не так, тем не менее, если ссылку на местный часовой пояс извлекается с использованием <xref:System.TimeZoneInfo.FindSystemTimeZoneById%2A> метод.  
  
 <xref:System.TimeZoneInfo.Local%2A> Свойство соответствует <xref:System.TimeZone.CurrentTimeZone%2A> свойство <xref:System.TimeZone> класса.  
  
   
  
## Examples  
 В следующем примере извлекается <xref:System.TimeZoneInfo> объект, представляющий местный часовой пояс и выводит его отображаемое имя, именем зимнего времени, а также имя летнего времени.  
  
 [!code-csharp[System.TimeZone2.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/ShowTimeZoneNames1.cs#2)]
 [!code-vb[System.TimeZone2.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/ShowTimeZoneNames1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Практическое руководство. Доступ к предварительно определенным объектам UTC и объектам местных часовых поясов</related>
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZoneInfo.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает отображаемое имя для зимнего времени часового пояса.</summary>
        <value>Отображаемое название стандартного времени часового пояса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Отображаемое имя локализуется согласно язык и региональные параметры, установленные с операционной системы Windows.  
  
 <xref:System.TimeZoneInfo.StandardName%2A> Свойство идентично <xref:System.TimeZone.StandardName%2A> свойство <xref:System.TimeZone> класса.  
  
 Если язык операционной системы является английский, значение <xref:System.TimeZoneInfo.StandardName%2A> свойство обычно, но не всегда, идентична <xref:System.TimeZoneInfo.Id%2A> свойство.  
  
   
  
## Examples  
 В следующем примере определяется метод с именем `DisplayDateWithTimeZoneName` , использующий <xref:System.TimeZoneInfo.IsDaylightSavingTime%28System.DateTime%29> метод, чтобы определить, следует ли отображать имя зимнего времени часового пояса или имя летнего времени.  
  
 [!code-csharp[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/cs/IsDaylightSavingTime.cs#1)]
 [!code-vb[System.TimeZone2.IsDaylightSavingTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.IsDaylightSavingTime/vb/IsDaylightSavingTime.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public bool SupportsDaylightSavingTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsDaylightSavingTime" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SupportsDaylightSavingTime As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportsDaylightSavingTime { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.SupportsDaylightSavingTime : bool" Usage="System.TimeZoneInfo.SupportsDaylightSavingTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, позволяющее определить, заданы ли для часового пояса какие-либо правила перехода на летнее время.</summary>
        <value>Значение <see langword="true" />, если часовой пояс поддерживает летнее время; в противном случае — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение <xref:System.TimeZoneInfo.SupportsDaylightSavingTime%2A> свойство для местного часового пояса, возвращенный <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> свойство отражает параметр панели управления **даты и времени** приложения управления checkbox, определяет ли система автоматически Корректирует перехода на летнее время. Если он не установлен или не флажок отображается для часового пояса, значение этого свойства является `false`.  
  
   
  
## Examples  
 В следующем примере возвращает коллекцию всех часовых поясов, которые доступны в локальной системе и отображает имена пользователей, которые не поддерживают летнего времени.  
  
 [!code-csharp[System.TimeZone2.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#4)]
 [!code-vb[System.TimeZone2.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#4)]
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.IDeserializationCallback.OnDeserialization">
      <MemberSignature Language="C#" Value="void IDeserializationCallback.OnDeserialization (object sender);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(object sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#IDeserializationCallback#OnDeserialization(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub OnDeserialization (sender As Object) Implements IDeserializationCallback.OnDeserialization" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System::Object ^ sender) = System::Runtime::Serialization::IDeserializationCallback::OnDeserialization;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.IDeserializationCallback.OnDeserialization(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="System.Object" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="sender">Объект, который инициализирует обратный вызов. Данная функциональная возможность для этого параметра в настоящее время не реализуется.</param>
        <summary>Выполняется после завершения десериализации объекта.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Runtime.Serialization.SerializationException">Объект <see cref="T:System.TimeZoneInfo" /> содержит недопустимые или поврежденные данные.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.Serialization.ISerializable.GetObjectData">
      <MemberSignature Language="C#" Value="void ISerializable.GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Runtime.Serialization.ISerializable.GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.System#Runtime#Serialization#ISerializable#GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Sub GetObjectData (info As SerializationInfo, context As StreamingContext) Implements ISerializable.GetObjectData" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Runtime.Serialization.ISerializable.GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context) = System::Runtime::Serialization::ISerializable::GetObjectData;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-2.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, который требуется заполнить данными.</param>
        <param name="context">Конечный объект для этой сериализации (см. раздел, посвященный <see cref="T:System.Runtime.Serialization.StreamingContext" />).</param>
        <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> данными, необходимыми для сериализации текущего объекта <see cref="T:System.TimeZoneInfo" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="info" /> имеет значение <see langword="null" />.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Требует полного доверия для непосредственного вызывающего объекта. Этот член не может использоваться частично доверенным или прозрачным кодом.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToSerializedString">
      <MemberSignature Language="C#" Value="public string ToSerializedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string ToSerializedString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToSerializedString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToSerializedString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToSerializedString();" />
      <MemberSignature Language="F#" Value="member this.ToSerializedString : unit -&gt; string" Usage="timeZoneInfo.ToSerializedString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Преобразует текущий объект <see cref="T:System.TimeZoneInfo" /> в сериализованную строку.</summary>
        <returns>Строка, представляющая текущий объект <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приложения, зависящие от часовых поясов, которые обычно не определены в реестре Windows систем или [библиотеки ICU](http://userguide.icu-project.org/datetime/timezone) можно использовать в Linux и macOScan <xref:System.TimeZoneInfo.CreateCustomTimeZone%2A> метод для создания экземпляра необходимые часовых поясов как <xref:System.TimeZoneInfo>объектов. Затем приложение может вызвать <xref:System.TimeZoneInfo.ToSerializedString%2A> метод для преобразования объекта часового пояса в строку.  
  
 <xref:System.TimeZoneInfo> Объекта также должны храниться в расположении, где приложение может получить его при необходимости. Возможные расположения:  
  
-   Реестр в системах Windows.  
  
-   Файл ресурсов приложения.  
  
-   Внешний файл, например, текстовый файл.  
  
   
  
## Examples  
 Следующий пример осуществляет попытку извлечь Антарктики/южному часового пояса из локальной системы. Если происходит сбой, в коде предпринимается попытка получить сведения о часовом поясе из текстового файла в каталоге приложения. Если эта попытка завершается неудачей, код создает часовой пояс и записывает сведения о нем в текстовом файле.  
  
 [!code-csharp[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/cs/System.TimeZone2.CreateTimeZone.cs#4)]
 [!code-vb[System.TimeZone2.CreateTimeZone#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.CreateTimeZone/vb/System.TimeZone2.CreateTimeZone.vb#4)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.FromSerializedString(System.String)" />
        <related type="Article" href="https://msdn.microsoft.com/library/3c96d83a-a057-4496-abb0-8f4b12712558">Практическое руководство. Сохранение часовых поясов во внедренном ресурсе</related>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZoneInfo.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timeZoneInfo.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает отображаемое имя текущего объекта <see cref="T:System.TimeZoneInfo" />.</summary>
        <returns>Значение свойства <see cref="P:System.TimeZoneInfo.DisplayName" /> текущего объекта <see cref="T:System.TimeZoneInfo" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если назначение коллекции, который содержит <xref:System.TimeZoneInfo> объекты к элементу управления списка, такие как <xref:System.Windows.Forms.ListBox> элемента управления, элемент управления автоматически вызывает <xref:System.TimeZoneInfo.ToString%2A> метод для извлечения строка с описанием каждого объекта, должны быть представлены в списке. Таким образом не нужно хранить понятное описание объекта в виде строки, и пользователю не нужно использовать эту строку для извлечения объекта из коллекции. См. практическое руководство по [ Перечисление часовых поясов, присутствующих на компьютере](~/docs/standard/datetime/enumerate-time-zones.md) для получения дополнительных сведений.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Utc">
      <MemberSignature Language="C#" Value="public static TimeZoneInfo Utc { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZoneInfo Utc" />
      <MemberSignature Language="DocId" Value="P:System.TimeZoneInfo.Utc" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Utc As TimeZoneInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZoneInfo ^ Utc { TimeZoneInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Utc : TimeZoneInfo" Usage="System.TimeZoneInfo.Utc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZoneInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.TimeZoneInfo" />, представляющий часовой пояс UTC.</summary>
        <value>Объект, представляющий часовой пояс UTC.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это встроенный объект; сведения об этом <xref:System.TimeZoneInfo> объект не извлекается из реестра в системах Windows и из [ICU библиотеки](http://userguide.icu-project.org/datetime/timezone) в Linux и macOS.  
  
> [!IMPORTANT]
>  Следует всегда обращаться к зоне формате UTC (UTC) <xref:System.TimeZoneInfo.Utc%2A?displayProperty=nameWithType> свойство, вместо назначения часовом поясе UTC для <xref:System.TimeZoneInfo> переменной объекта. Это предотвращает <xref:System.TimeZoneInfo> переменной объекта путем вызова <xref:System.TimeZoneInfo.ClearCachedData%2A> метод.  
  
 Время ранее была известна как время по Гринвичу (GMT).  
  
   
  
## Examples  
 В следующем примере извлекается <xref:System.TimeZoneInfo> объект, представляющий время в формате UTC и выводит его отображаемое имя, именем зимнего времени, а также имя летнего времени.  
  
 [!code-csharp[System.TimeZone2.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone2.Class/CS/TimeZone2_Examples.cs#3)]
 [!code-vb[System.TimeZone2.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone2.Class/VB/TimeZone2_Examples.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/961fb70b-83f0-4dab-a042-cb5fcd817cf5">Практическое руководство. Доступ к предварительно определенным объектам UTC и объектам местных часовых поясов</related>
      </Docs>
    </Member>
  </Members>
</Type>