<Type Name="TypeInitializationException" FullName="System.TypeInitializationException">
  <Metadata><Meta Name="ms.openlocfilehash" Value="50be9471baf5ea755d0e9bd0d9bc823115703d2e" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57939453" /></Metadata><TypeSignature Language="C#" Value="public sealed class TypeInitializationException : SystemException" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit TypeInitializationException extends System.SystemException" />
  <TypeSignature Language="DocId" Value="T:System.TypeInitializationException" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class TypeInitializationException&#xA;Inherits SystemException" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeInitializationException sealed : SystemException" />
  <TypeSignature Language="F#" Value="type TypeInitializationException = class&#xA;    inherit SystemException" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Exception</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.SystemException</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Исключение, которое выбрасывается как оболочка для исключения, выброшенного инициализатором класса. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если инициализация типа инициализатором класса завершилась сбоем, то будет создан объект <xref:System.TypeInitializationException>, которому будет передана ссылка на исключение, созданное инициализатором класса этого типа. <xref:System.Exception.InnerException%2A> Свойство <xref:System.TypeInitializationException> базовое исключение заносится в.  
  
 Как правило <xref:System.TypeInitializationException> исключение отражает катастрофической условие (среда выполнения не удалось создать экземпляр типа), препятствующая продолжению приложения.  Чаще всего <xref:System.TypeInitializationException> вызывается в ответ на некоторые изменения в среде выполнения приложения. Следовательно, отличных от возможно для устранения неполадок отладки кода, исключение не должен обрабатываться в `try` / `catch` блока. Вместо этого причину исключения следует изучить и устранить.  
  
 <xref:System.TypeInitializationException> использует COR_E_TYPEINITIALIZATION HRESULT, которое имеет значение 0x80131534.  
  
 Список начальных значений свойств для экземпляра <xref:System.TypeInitializationException>, см. в разделе <xref:System.TypeInitializationException.%23ctor%2A> конструкторы.  
  
 В следующих разделах описаны некоторые ситуации, в которой <xref:System.TypeInitializationException> возникает исключение.  
  
- [Статические конструкторы и TypeInitializationException-исключение](#Static)   
- [Значения времени ожидания совпадения регулярного выражения](#Timeout)   
- [Календари и культуры данных](#Calendars)  
  
<a name="Static"></a>   
## <a name="static-constructors-and-the-typeinitializationexception"></a>Статические конструкторы и TypeInitializationException

 Статический конструктор, если таковой существует, вызывается автоматически средой выполнения до создания экземпляра типа. Статические конструкторы можно явным образом определить разработчиком. Если статический конструктор не определена явно, компиляторы автоматически создан для инициализации любых `static` (в C#) или `Shared` (в Visual Basic) члены типа.  Дополнительные сведения о статических конструкторов, см. в разделе [статические конструкторы](~/docs/csharp/programming-guide/classes-and-structs/static-constructors.md).  
  
 Чаще всего <xref:System.TypeInitializationException> исключение вызывается, когда статический конструктор не может создать экземпляр типа.  <xref:System.Exception.InnerException%2A> Свойство указывает, почему статического конструктора не удалось создать экземпляр типа. Некоторые из наиболее распространенных причин <xref:System.TypeInitializationException> , исключение:  
  
- Необработанное исключение в статическом конструкторе  
 
   Если в статическом конструкторе создается исключение, это исключение заключается в <xref:System.TypeInitializationException> исключения и тип не может быть создан.  
  
   Часто это исключение трудны в отладке в том, что всегда явным образом статические конструкторы не определены в исходном коде. Статический конструктор существует в типе, если:  
  
   -   Он был явно определен как члена типа.  
  
   -   Тип имеет `static` (в C#) или `Shared` (в Visual Basic) переменные, которые объявляются и инициализируются в одной инструкции. В этом случае компилятор языка создает статический конструктор для типа. Рекомендуется проверить при помощи программы, такие как [дизассемблер IL](~/docs/framework/tools/ildasm-exe-il-disassembler.md). Например когда компиляторы C# и VB Скомпилируйте следующий пример, они создания IL для статический конструктор, который будет выглядеть:  
  
   ```  
   .method private specialname rtspecialname static   
           void  .cctor() cil managed  
   {  
     // Code size       12 (0xc)  
     .maxstack  8  
     IL_0000:  ldc.i4.3  
     IL_0001:  newobj     instance void TestClass::.ctor(int32)  
     IL_0006:  stsfld     class TestClass Example::test  
     IL_000b:  ret  
   } // end of method Example::.cctor  
   ```  
  
   В следующем примере показан <xref:System.TypeInitializationException> исключение, вызываемое компилятором статический конструктор. `Example` Класс включает `static` (в C#) или `Shared` (в Visual Basic) поле типа `TestClass` , создается путем передачи его конструктору класса значение 3.  Тем не менее, это значение является недопустимым; допускаются только значения 0 или 1. В результате `TestClass` класса конструктор выдаст <xref:System.ArgumentOutOfRangeException>. Так как это исключение не обработано, оно помещается в <xref:System.TypeInitializationException> исключение.  
  
   [!code-csharp[System.TypeInitializationException#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/ctorException1.cs#3)]
   [!code-vb[System.TypeInitializationException#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/CtorException1.vb#3)]  
  
   Обратите внимание, что сообщение об исключении отображаются сведения о <xref:System.Exception.InnerException%2A> свойство.  
  
- Отсутствующий файл сборки или данных  
 
   Распространенной причиной <xref:System.TypeInitializationException> исключением является то, что файл сборки или данных, который присутствовал в средах разработки и тестирования приложения отсутствует его средой выполнения. Например можно скомпилировать в сборку с именем Missing1a.dll с помощью следующего синтаксиса командной строки следующим:  
  
   ```csharp  
   csc -t:library Missing1a.cs  
   ```  
  
   ```vb  
   vbc Missing1a.vb -t:library  
   ```  
  
   [!code-csharp[System.TypeInitializationException#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1a.cs#1)]
   [!code-vb[System.TypeInitializationException#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1a.vb#1)]  
  
   Можно скомпилировать в исполняемый файл с именем Missing1.exe, включая ссылку на Missing1a.dll следующим:  
  
   ```csharp
   csc Missing1.cs /r:Missing1a.dll  
   ```  
  
   ```vb
   vbc Missing1.vb /r:Missing1a.dll  
   ```  
  
   Однако если переименовать, переместить, или удалить Missing1a.dll и запустить пример, он выдает <xref:System.TypeInitializationException> исключения и отображает результат, показанный в примере.  Обратите внимание, что сообщение об исключении включает сведения о <xref:System.Exception.InnerException%2A> свойство. В данном случае является во внутреннем исключении <xref:System.IO.FileNotFoundException> , возникает исключение, так как среда выполнения не удается найти зависимую сборку.  
  
   [!code-csharp[System.TypeInitializationException#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Missing1.cs#2)]
   [!code-vb[System.TypeInitializationException#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Missing1.vb#2)]  
  
   > [!NOTE]
   >  В этом примере <xref:System.TypeInitializationException> было создано исключение, поскольку не удалось загрузить сборку. Если статический конструктор пытается открыть файл данных, такие как файл конфигурации, в XML-файл или файл, содержащий сериализованные данные, что его не удается найти, можно также вызывается исключение.  
  
<a name="Timeout"></a>   
## <a name="regular-expression-match-timeout-values"></a>Значения времени ожидания совпадения регулярного выражения  
 Можно задать значение времени ожидания по умолчанию для сравнения операции на основе на уровне домена приложения с шаблоном регулярного выражения. Время ожидания определяется путем указания <xref:System.TimeSpan> значение для свойства «REGEX_DEFAULT_MATCH_TIMEOUT» <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> метод. Интервал времени должен быть допустимым <xref:System.TimeSpan> объект, который больше нуля и меньше, чем приблизительно 24 дня. Если эти требования не выполнены, попытка установить значение времени ожидания по умолчанию создает <xref:System.ArgumentOutOfRangeException>, который, в свою очередь, упаковывается в <xref:System.TypeInitializationException> исключение.  
  
 В следующем примере показан <xref:System.TypeInitializationException> , создаваемое, когда значение присваивается свойству «REGEX_DEFAULT_MATCH_TIMEOUT» является недопустимым. Чтобы устранить исключение, присвойте свойству «REGEX_DEFAULT_MATCH_TIMEOUT» <xref:System.TimeSpan> значение, которое больше нуля и меньше, чем приблизительно 24 дня.  
  
 [!code-csharp[System.TypeInitializationException#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/System.TypeInitializationException/cs/Regex1.cs#4)]
 [!code-vb[System.TypeInitializationException#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/System.TypeInitializationException/vb/Regex1.vb#4)]  
  
<a name="Calendars"></a>   
## <a name="calendars-and-cultural-data"></a>Календари и культуры данных  
 Если попытаться создать экземпляр календаря, но среда выполнения не удается создать экземпляр <xref:System.Globalization.CultureInfo> объект, соответствующий календарь, он выдает <xref:System.TypeInitializationException> исключение. Это исключение может генерироваться следующие конструкторы класса календаря:  
  
-   Конструктор по умолчанию для <xref:System.Globalization.JapaneseCalendar> класса.  
  
-   Конструктор по умолчанию для <xref:System.Globalization.KoreanCalendar> класса.  
  
-   Конструктор по умолчанию для <xref:System.Globalization.TaiwanCalendar> класса.  
  
 Так как региональные данные для этих языков и региональных параметров, должны быть доступны во всех системах, возникает редко, если когда-нибудь, это исключение.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Exception" />
    <related type="Article" href="~/docs/standard/exceptions/index.md">Обработка и создание исключений в .NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeInitializationException (string fullTypeName, Exception innerException);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fullTypeName, class System.Exception innerException) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.#ctor(System.String,System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fullTypeName As String, innerException As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeInitializationException(System::String ^ fullTypeName, Exception ^ innerException);" />
      <MemberSignature Language="F#" Value="new TypeInitializationException : string * Exception -&gt; TypeInitializationException" Usage="new System.TypeInitializationException (fullTypeName, innerException)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fullTypeName" Type="System.String" />
        <Parameter Name="innerException" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="fullTypeName">Полное имя типа, который не удалось инициализировать.</param>
        <param name="innerException">Исключение, которое является причиной текущего исключения. Если параметр <paramref name="innerException" /> не является указателем null (<see langword="Nothing" /> в Visual Basic), то текущее исключение создается в блоке <see langword="catch" />, обрабатывающем внутреннее исключение.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.TypeInitializationException" /> используемым по умолчанию сообщением об ошибке, указанным именем типа и ссылкой на внутреннее исключение, которое является основной причиной возникновения данного исключения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Исключение, созданное как прямой результат предыдущего исключения, может содержать в свойстве <xref:System.Exception.InnerException%2A> ссылку на предыдущее исключение. Свойство <xref:System.Exception.InnerException%2A> возвращает то же значение, которое передается конструктору, или пустую ссылку (`Nothing` в Visual Basic), если свойство <xref:System.Exception.InnerException%2A> не предоставляет конструктору значение внутреннего исключения.  
  
 В следующей таблице представлены исходные значения свойств экземпляра класса <xref:System.TypeInitializationException>.  
  
|Свойство.|Значение|  
|--------------|-----------|  
|<xref:System.Exception.InnerException%2A>|Ссылка на внутреннее исключение.|  
|<xref:System.Exception.Message%2A>|Строка локализованного сообщения об ошибке.|  
|<xref:System.TypeInitializationException.TypeName%2A>|Имя типа.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Exception" />
        <related type="Article" href="~/docs/standard/exceptions/index.md">Обработка и создание исключений в .NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public override void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TypeInitializationException.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="override this.GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="typeInitializationException.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" />, хранящий сериализованные данные объекта, относящиеся к выдаваемому исключению.</param>
        <param name="context">Объект <see cref="T:System.Runtime.Serialization.StreamingContext" />, содержащий контекстные сведения об источнике или назначении.</param>
        <summary>Задает имя типа и дополнительные сведения об исключении для объекта <see cref="T:System.Runtime.Serialization.SerializationInfo" />.</summary>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Требует полного доверия для непосредственного вызывающего объекта. Этот член не может использоваться частично доверенным или прозрачным кодом.</permission>
      </Docs>
    </Member>
    <Member MemberName="TypeName">
      <MemberSignature Language="C#" Value="public string TypeName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TypeName" />
      <MemberSignature Language="DocId" Value="P:System.TypeInitializationException.TypeName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TypeName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeName : string" Usage="System.TypeInitializationException.TypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает полное имя типа, который не удалось инициализировать.</summary>
        <value>Полное имя типа, который не удалось инициализировать.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>