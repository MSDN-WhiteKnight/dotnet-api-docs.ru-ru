<Type Name="Action&lt;T&gt;" FullName="System.Action&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8ab953c752307704b27d543b7fddbb8209fb5f1f" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58721572" /></Metadata><TypeSignature Language="C#" Value="public delegate void Action&lt;in T&gt;(T obj);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Action`1&lt;- T&gt; extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Action`1" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub Action(Of In T)(obj As T)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public delegate void Action(T obj);" />
  <TypeSignature Language="F#" Value="type Action&lt;'T&gt; = delegate of 'T -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Contravariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Parameters>
    <Parameter Name="obj" Type="T" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <typeparam name="T">Тип параметра метода, инкапсулируемого данным делегатом.</typeparam>
    <param name="obj">Параметр метода, инкапсулируемого данным делегатом.</param>
    <summary>Инкапсулирует метод, который принимает один параметр и не возвращает значений.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно использовать <xref:System.Action%601> делегат для передачи методу в качестве параметра без явного объявления пользовательского делегата. Инкапсулированный метод должно соответствовать сигнатуре метода, который определен этот делегат. Это означает, что инкапсулированный метод должен иметь один параметр, который передается по значению, и не должен возвращать значение. (В C#, метод должен возвращать `void`. В Visual Basic, он должен быть определен с `Sub`...`End Sub` Конструкция. Также можно метод, возвращающий значение, игнорируется.) Как правило этот метод используется для выполнения операции.  
  
> [!NOTE]
>  Для ссылки на метод, который имеет один параметр и возвращает значение, используйте универсальный <xref:System.Func%602> вместо этого делегата.  
  
 При использовании <xref:System.Action%601> делегата, не нужно явным образом определять делегат, который инкапсулирует метод с одним параметром. Например, в следующем коде явно объявляется делегат с именем `DisplayMessage` и ссылка на либо <xref:System.Console.WriteLine%2A> метод или `ShowWindowsMessage` метод его экземпляру делегата.  
  
 [!code-cpp[System.Action~1#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/delegate.cpp#1)]
 [!code-csharp[System.Action~1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Delegate.cs#1)]
 [!code-vb[System.Action~1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Delegate.vb#1)]  
  
 В следующем примере этот код упрощается путем создания экземпляра <xref:System.Action%601> делегат вместо явного объявления нового делегата и присвоения именованного метода.  
  
 [!code-cpp[System.Action~1#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Action~1/cpp/action`1.cpp#2)]
 [!code-csharp[System.Action~1#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Action1.cs#2)]
 [!code-vb[System.Action~1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/Action1.vb#2)]  
  
 Можно также использовать <xref:System.Action%601> делегировать с анонимными методами в C#, как показано в следующем примере. (Введение в анонимные методы, см. в разделе [анонимные методы](~/docs/csharp/programming-guide/statements-expressions-operators/anonymous-methods.md).)  
  
 [!code-csharp[System.Action~1#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Anon.cs#3)]  
  
 Вы также можете назначить лямбда-выражения <xref:System.Action%601> делегировать экземпляра, как показано в следующем примере. (Введение в лямбда-выражения, см. в разделе [лямбда-выражения](~/docs/csharp/programming-guide/statements-expressions-operators/lambda-expressions.md).)  
  
 [!code-csharp[System.Action~1#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action~1/cs/Lambda.cs#4)]
 [!code-vb[System.Action~1#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action~1/vb/lambda.vb#4)]  
  
 <xref:System.Collections.Generic.List%601.ForEach%2A> И <xref:System.Array.ForEach%2A> каждого методы принимают <xref:System.Action%601> делегат в качестве параметра. Метод, заключенный в делегат позволяет выполнить действие для каждого элемента в массиве или списке. В примере используется <xref:System.Collections.Generic.List%601.ForEach%2A> метод, чтобы предоставить иллюстрацию.  
  
   
  
## Examples  
 В следующем примере показано использование <xref:System.Action%601> делегат для печати содержимого <xref:System.Collections.Generic.List%601> объекта. В этом примере `Print` метод используется для отображения содержимого списка в консоль. Кроме того в примере C# также демонстрирует использование анонимных методов для отображения содержимого на консоль. Обратите внимание, что пример явно не объявляет <xref:System.Action%601> переменной. Вместо этого он передает ссылку на метод, который принимает один параметр и не возвращает значение, чтобы <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> метод, единственным параметром которого является <xref:System.Action%601> делегировать. Аналогичным образом, в примере C# <xref:System.Action%601> делегата экземпляр не создается явно, так как подпись анонимного метода соответствует сигнатуре <xref:System.Action%601> делегат, который ожидается <xref:System.Collections.Generic.List%601.ForEach%2A?displayProperty=nameWithType> метод.  
  
 [!code-csharp[System.Action_PrintExample#01](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Action_PrintExample/cs/action.cs#01)]
 [!code-vb[System.Action_PrintExample#01](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Action_PrintExample/vb/action.vb#01)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Func`2" />
  </Docs>
</Type>