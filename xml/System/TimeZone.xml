<Type Name="TimeZone" FullName="System.TimeZone">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6f5ddabd633aaf554f98326712c002874aeb143c" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56383119" /></Metadata><TypeSignature Language="C#" Value="public abstract class TimeZone" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit TimeZone extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.TimeZone" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class TimeZone" />
  <TypeSignature Language="C++ CLI" Value="public ref class TimeZone abstract" />
  <TypeSignature Language="F#" Value="type TimeZone = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netstandard-2.0;netcore-2.2;netcore-3.0">
      <AttributeName>System.Obsolete("System.TimeZone has been deprecated.  Please investigate the use of System.TimeZoneInfo instead.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет часовой пояс.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Часовой пояс — это географическая область, в котором используется то же время standard.  
  
> [!IMPORTANT]
>  По возможности используйте <xref:System.TimeZoneInfo> вместо класса <xref:System.TimeZone> класса.  
  
 Можно использовать <xref:System.TimeZone> класса для получения сведений о текущем часовом поясе, а также преобразовать время из местное время по Гринвичу (UTC) или наоборот. Тем не менее, нельзя использовать <xref:System.TimeZone> класс для представления часовых поясов, отличных от локального или для обработки преобразования даты и времени из одного часового пояса в другой. Для этой цели использовать <xref:System.TimeZoneInfo> класса. Этот класс можно использовать для получения информации о любой часовой пояс, определенный в локальной системе, чтобы создать пользовательский часовой пояс и преобразовать время из одного часового пояса в другой.  
  
 <xref:System.TimeZone> Класс поддерживает только правило коррекции единый летнего времени для местного часового пояса. В результате <xref:System.TimeZone> класса можно точно отчет с данными летнего времени или преобразование между временем UTC и местным только для период, в котором последнее правило коррекции. Напротив <xref:System.TimeZoneInfo> класс поддерживает несколько правил коррекции, что позволяет работать с историческими данными часового пояса.  
  
   
  
## Examples  
 Следующий пример ссылки и отображает выбранные `TimeZone` класса элементов.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Помимо предоставления реализаций для его <see langword="abstract" /> элементы (файлы, отмеченные <see langword="MustOverride" /> в Visual Basic), очень важно, что классы, производные от <see cref="T:System.TimeZone" /> переопределить поведение по умолчанию <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> метод. Это обусловлено тем, по умолчанию <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> в .NET Framework версии 2.0 не зависит от вызова <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" />, как и в .NET Framework версий 1.0 и 1.1.  Дополнительные сведения см. в разделе <see cref="M:System.TimeZone.ToLocalTime(System.DateTime)" /> метод.</para></block>
    <altmember cref="T:System.DateTime" />
    <altmember cref="T:System.DateTimeOffset" />
    <altmember cref="T:System.TimeZoneInfo" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected TimeZone ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; TimeZone();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.TimeZone" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTimeZone">
      <MemberSignature Language="C#" Value="public static TimeZone CurrentTimeZone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.TimeZone CurrentTimeZone" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.CurrentTimeZone" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property CurrentTimeZone As TimeZone" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property TimeZone ^ CurrentTimeZone { TimeZone ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentTimeZone : TimeZone" Usage="System.TimeZone.CurrentTimeZone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeZone</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает часовой пояс текущего компьютера.</summary>
        <value>Объект <see cref="T:System.TimeZone" />, представляющий текущий локальный часовой пояс.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.CurrentTimeZone%2A> Свойство соответствует <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> свойство. По возможности используйте <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType> свойство.  
  
   
  
## Examples  
 Следующие ссылки на примере `CurrentTimeZone` свойства и отображает имена для стандартного времени и летнего времени для местного часового пояса.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="usage"><para>Данные зоны местного времени кэшируется после <see cref="P:System.TimeZone.CurrentTimeZone" /> сначала используется для получения сведений о часовом поясе. Если локальный часовой пояс последующем изменении, <see cref="P:System.TimeZone.CurrentTimeZone" /> свойство данное изменение не отражено. Если вам нужно обрабатывать изменения часового пояса при ваше приложение работает, используйте <see cref="T:System.TimeZoneInfo" /> класса и вызове его <see cref="M:System.TimeZoneInfo.ClearCachedData" /> метод.</para></block>
        <altmember cref="P:System.TimeZoneInfo.Local" />
      </Docs>
    </Member>
    <Member MemberName="DaylightName">
      <MemberSignature Language="C#" Value="public abstract string DaylightName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DaylightName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.DaylightName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property DaylightName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ DaylightName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DaylightName : string" Usage="System.TimeZone.DaylightName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает имя летнего времени для часового пояса.</summary>
        <value>Имя летнего времени для часового пояса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если не используется летнее время в часовом поясе, пустая строка ("») возвращается.  
  
 <xref:System.TimeZone.DaylightName%2A> Свойство соответствует <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType> свойство. По возможности используйте <xref:System.TimeZoneInfo.DaylightName%2A?displayProperty=nameWithType> свойство.  
  
   
  
## Examples  
 Следующий пример ссылки и отображает `DaylightName` свойство текущего часового пояса.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.TimeZoneInfo.DaylightName" />
      </Docs>
    </Member>
    <Member MemberName="GetDaylightChanges">
      <MemberSignature Language="C#" Value="public abstract System.Globalization.DaylightTime GetDaylightChanges (int year);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Globalization.DaylightTime GetDaylightChanges(int32 year) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetDaylightChanges(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetDaylightChanges (year As Integer) As DaylightTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Globalization::DaylightTime ^ GetDaylightChanges(int year);" />
      <MemberSignature Language="F#" Value="abstract member GetDaylightChanges : int -&gt; System.Globalization.DaylightTime" Usage="timeZone.GetDaylightChanges year" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.DaylightTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="year" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="year">Год, к которому относится период летнего времени.</param>
        <summary>Возвращает период летнего времени для определенного года.</summary>
        <returns>Объект <see cref="T:System.Globalization.DaylightTime" />, содержащий начальную и конечную дату периода летнего времени в <paramref name="year" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Поддерживается только один период летнего времени в год.  
  
 Если летнее время не используется в текущем часовом поясе, возвращаемое значение не <xref:System.Globalization.DaylightTime> объекта, где значение <xref:System.Globalization.DaylightTime.Start%2A> и <xref:System.Globalization.DaylightTime.End%2A> является <xref:System.DateTime.MinValue?displayProperty=nameWithType>, а для параметра <xref:System.Globalization.DaylightTime.Delta%2A?displayProperty=nameWithType> является <xref:System.TimeSpan> значением 0 квантов времени.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="year" /> меньше 1 или больше 9999.</exception>
        <block subset="none" type="usage"><para>Так как <see cref="T:System.TimeZone" /> класс поддерживает только одно правило коррекции летнего времени, <see cref="M:System.TimeZone.GetDaylightChanges(System.Int32)" /> метод текущее правило коррекции применяется к любой год, независимо от того, правила коррекции фактически, применяется ли к за этот год. Доступен при условии, что сама операционная система имеет точность данных за определенный год, более точный результат при работе с массивом <see cref="T:System.TimeZoneInfo.AdjustmentRule" /> объектов, возвращенных <see cref="M:System.TimeZoneInfo.GetAdjustmentRules" /> метод. <see cref="P:System.Globalization.DaylightTime.Start" />, <see cref="P:System.Globalization.DaylightTime.End" />, И <see cref="P:System.Globalization.DaylightTime.Delta" /> свойства соответствуют <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateStart" />, <see cref="P:System.TimeZoneInfo.AdjustmentRule.DateEnd" />, и <see cref="P:System.TimeZoneInfo.AdjustmentRule.DaylightDelta" /> свойства.</para></block>
        <altmember cref="M:System.TimeZoneInfo.GetAdjustmentRules" />
      </Docs>
    </Member>
    <Member MemberName="GetUtcOffset">
      <MemberSignature Language="C#" Value="public abstract TimeSpan GetUtcOffset (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.TimeSpan GetUtcOffset(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.GetUtcOffset(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUtcOffset (time As DateTime) As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract TimeSpan GetUtcOffset(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member GetUtcOffset : DateTime -&gt; TimeSpan" Usage="timeZone.GetUtcOffset time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Значение даты и времени.</param>
        <summary>Возвращает смещение всеобщего скоординированного времени (UTC) относительно заданного местного времени.</summary>
        <returns>Смещение всеобщего скоординированного времени (UTC) относительно <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод возвращает смещение или разность между `time` параметр и временем в формате UTC. Это означает следующее:  
  
 `time` = UTC + смещение  
  
 Этот метод интерпретирует часовой пояс `time` на основе его <xref:System.DateTime.Kind%2A> свойство. Если значение <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Local?displayProperty=nameWithType> или <xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>, метод возвращает смещение местного часового пояса. Если значение <xref:System.DateTime.Kind%2A> свойство <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>, метод возвращает смещение равно <xref:System.TimeSpan.Zero?displayProperty=nameWithType>.  
  
 Если местный часовой пояс обнаруживает летнего времени, <xref:System.TimeZone.GetUtcOffset%2A> применяется текущее правило коррекции для `time` при определении смещение местного часового пояса. То есть смещение, возвращенный <xref:System.TimeZone.GetUtcOffset%2A> отражает ли `time` попадает в стандартное время часового пояса или его летнее время.  
  
> [!NOTE]
>  <xref:System.TimeZone.GetUtcOffset%2A> Метод распознает только текущее правило коррекции летнего времени, для местного часового пояса. Таким образом гарантируется возврат точного смещение UTC в местное время только в течение периода, в котором фактически является последнее правило коррекции. Он может возвращать неточные результаты, если `time` является исторические значения даты и времени, когда действовало предыдущее правило коррекции.  
  
 <xref:System.TimeZone.GetUtcOffset%2A> Метод соответствует <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType> метод. По возможности используйте <xref:System.TimeZoneInfo.GetUtcOffset%2A?displayProperty=nameWithType> метод.  
  
 Так как значение даты и времени, представленное `time` и это значение смещения относительно времени UTC не связаны тесно, дату локальной или не задан, и значение времени может возвращать разные значения смещения при на разных компьютерах или при запуске на том же компьютере в разные часовые пояса. Если такое поведение нежелательно, используйте <xref:System.DateTimeOffset> вместо этого значения. <xref:System.DateTimeOffset> Тип данных жестко связывает значение даты и времени с его смещение от времени UTC.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.GetUtcOffset(System.DateTime)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="IsDaylightSavingTime">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает значение, указывающее, принадлежат ли заданные дата и время к периоду летнего времени.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public virtual bool IsDaylightSavingTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDaylightSavingTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IsDaylightSavingTime (time As DateTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool IsDaylightSavingTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member IsDaylightSavingTime : DateTime -&gt; bool&#xA;override this.IsDaylightSavingTime : DateTime -&gt; bool" Usage="timeZone.IsDaylightSavingTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Дата и время.</param>
        <summary>Возвращает значение, указывающее, принадлежат ли заданные дата и время к периоду летнего времени.</summary>
        <returns><see langword="true" />, если <paramref name="time" /> принадлежит к периоду летнего времени; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Год, к которому относится период летнего времени является производным от `time` параметра.  
  
 Так как <xref:System.TimeZone> класс поддерживает правило коррекции единый летнего времени, <xref:System.TimeZone.IsDaylightSavingTime%28System.DateTime%29> метод применяется текущее правило коррекции на любую дату, независимо от того, был ли правила коррекции он действует для этой даты. Доступен при условии, что самой операционной системы содержит точные исторические летнего времени данные, более точный результат с помощью <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> метод. По возможности используйте <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="IsDaylightSavingTime">
      <MemberSignature Language="C#" Value="public static bool IsDaylightSavingTime (DateTime time, System.Globalization.DaylightTime daylightTimes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsDaylightSavingTime(valuetype System.DateTime time, class System.Globalization.DaylightTime daylightTimes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.IsDaylightSavingTime(System.DateTime,System.Globalization.DaylightTime)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function IsDaylightSavingTime (time As DateTime, daylightTimes As DaylightTime) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool IsDaylightSavingTime(DateTime time, System::Globalization::DaylightTime ^ daylightTimes);" />
      <MemberSignature Language="F#" Value="static member IsDaylightSavingTime : DateTime * System.Globalization.DaylightTime -&gt; bool" Usage="System.TimeZone.IsDaylightSavingTime (time, daylightTimes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
        <Parameter Name="daylightTimes" Type="System.Globalization.DaylightTime" />
      </Parameters>
      <Docs>
        <param name="time">Дата и время.</param>
        <param name="daylightTimes">Период летнего времени.</param>
        <summary>Возвращает значение, указывающее, принадлежат ли заданные дата и время к периоду летнего времени.</summary>
        <returns><see langword="true" />, если <paramref name="time" /> принадлежит к периоду <paramref name="daylightTimes" />; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> Метод обеспечивает ту же функциональность, что эта перегрузка <xref:System.TimeZone.IsDaylightSavingTime%2A> метод. По возможности используйте <xref:System.TimeZoneInfo.IsDaylightSavingTime%2A?displayProperty=nameWithType> метод.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="daylightTimes" /> — <see langword="null" />.</exception>
        <altmember cref="M:System.TimeZoneInfo.IsDaylightSavingTime(System.DateTime)" />
      </Docs>
    </Member>
    <Member MemberName="StandardName">
      <MemberSignature Language="C#" Value="public abstract string StandardName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StandardName" />
      <MemberSignature Language="DocId" Value="P:System.TimeZone.StandardName" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property StandardName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ StandardName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.StandardName : string" Usage="System.TimeZone.StandardName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает стандартное имя часового пояса.</summary>
        <value>Стандартное имя часового пояса.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.TimeZone.StandardName%2A> Свойство соответствует <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType> свойство. По возможности используйте <xref:System.TimeZoneInfo.StandardName%2A?displayProperty=nameWithType> свойство.  
  
   
  
## Examples  
 Следующий пример ссылки и отображает `StandardName` свойство текущего часового пояса.  
  
 [!code-cpp[System.TimeZone.Class#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.TimeZone.Class/CPP/tzclass.cpp#1)]
 [!code-csharp[System.TimeZone.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.Class/CS/tzclass.cs#1)]
 [!code-vb[System.TimeZone.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.Class/VB/tzclass.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Предпринята попытка присвоить этому свойству значение <see langword="null" />.</exception>
        <altmember cref="P:System.TimeZoneInfo.StandardName" />
      </Docs>
    </Member>
    <Member MemberName="ToLocalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToLocalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToLocalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToLocalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToLocalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToLocalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToLocalTime : DateTime -&gt; DateTime&#xA;override this.ToLocalTime : DateTime -&gt; DateTime" Usage="timeZone.ToLocalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Всеобщее скоординированное время (UTC).</param>
        <summary>Возвращает местное время, соответствующее заданному значению даты и времени.</summary>
        <returns>Объект <see cref="T:System.DateTime" />, значением которого является местное время, соответствующее значению <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В следующей таблице показаны связи между `time` параметр и <xref:System.DateTime> значения, возвращаемого этим методом.  
  
|Параметр `time`|Поведение|Возвращаемое значение|  
|----------------------|--------------|------------------|  
|Время по Гринвичу (UTC) (<xref:System.DateTimeKind.Utc?displayProperty=nameWithType>).|Преобразует время от времени UTC в местное время.|Объект <xref:System.DateTime>, значением которого является местное время, соответствующее значению `time`.|  
|Местное время (<xref:System.DateTimeKind.Local?displayProperty=nameWithType>).|Преобразование не требуется.|Же <xref:System.DateTime> значению, представленному `time` параметра.|  
|Неопределенное время (<xref:System.DateTimeKind.Unspecified?displayProperty=nameWithType>).|Предполагается, что время — в формате UTC и преобразует его от времени UTC в местное время.|Объект <xref:System.DateTime>, значением которого является местное время, соответствующее значению `time`.|  
  
 Если местный часовой пояс обнаруживает летнего времени, <xref:System.TimeZone.ToLocalTime%2A> применяется текущее правило коррекции для `time` во время преобразования.  
  
> [!NOTE]
>  <xref:System.TimeZone.ToLocalTime%2A> Метод распознает только текущее правило коррекции летнего времени, для местного часового пояса. Таким образом гарантируется возврат точного местного времени, соответствующий на определенный момент времени в формате UTC, только в течение периода, в котором фактически является последнее правило коррекции. Он может возвращать неточные результаты, если `time` является исторические значения даты и времени, когда действовало предыдущее правило коррекции.  
  
 <xref:System.TimeZone.ToLocalTime%2A> Метод соответствует <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> метод с его `destinationTimeZone` параметру присвоить <xref:System.TimeZoneInfo.Local%2A?displayProperty=nameWithType>. По возможности используйте <xref:System.TimeZoneInfo.ConvertTimeFromUtc%2A?displayProperty=nameWithType> метод.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Несмотря на то, что это не обязательно, в большинстве случаев производные классы, выполняющиеся на платформе .NET Framework версии 2.0 должен переопределить реализацию по умолчанию этого метода. В .NET Framework версий 1.0 и 1.1 <see langword="ToLocalTime" /> метод под названием <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> метод и переводится на летнее время, при возврате местное время. Тем не менее, начиная с .NET Framework 2.0, поведение реализации по умолчанию зависит от <see cref="P:System.DateTime.Kind" /> свойство <paramref name="time" /> параметр. Если его значение равно <see cref="F:System.DateTimeKind.Local" />, этот метод возвращает <paramref name="time" /> без изменений. Если его значение равно <see cref="F:System.DateTimeKind.Utc" /> или <see cref="F:System.DateTimeKind.Unspecified" />, этот способ предполагает <paramref name="time" /> — в формате UTC и преобразует его в локальное системное время без вызова <see cref="M:System.TimeZone.GetUtcOffset(System.DateTime)" /> метод.  
  
В следующем коде приведен простой переопределение реализации по умолчанию <see langword="ToLocalTime" /> метод. В этом коде <see langword="internalTimeZone" /> переменная представляет единичный экземпляр <see langword="TimeZone" /> класса: 
[!code-csharp[System.TimeZone.ToLocalTime#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/CS/TimeZone_ToLocalTime.cs#1)] [!code-vb[System.TimeZone.ToLocalTime#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.TimeZone.ToLocalTime/VB/TimeZone_ToLocalTime.vb#1)]</para></block>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeFromUtc(System.DateTime,System.TimeZoneInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ToUniversalTime">
      <MemberSignature Language="C#" Value="public virtual DateTime ToUniversalTime (DateTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.DateTime ToUniversalTime(valuetype System.DateTime time) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.TimeZone.ToUniversalTime(System.DateTime)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ToUniversalTime (time As DateTime) As DateTime" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual DateTime ToUniversalTime(DateTime time);" />
      <MemberSignature Language="F#" Value="abstract member ToUniversalTime : DateTime -&gt; DateTime&#xA;override this.ToUniversalTime : DateTime -&gt; DateTime" Usage="timeZone.ToUniversalTime time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.DateTime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.DateTime" />
      </Parameters>
      <Docs>
        <param name="time">Дата и время.</param>
        <summary>Возвращает всеобщее скоординированное время (UTC), соответствующее указанному местному времени.</summary>
        <returns>Объект <see cref="T:System.DateTime" />, значением которого является время UTC, соответствующее <paramref name="time" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если местный часовой пояс обнаруживает летнего времени, <xref:System.TimeZone.ToUniversalTime%2A> применяется текущее правило коррекции для `time` параметра при выполнении преобразования.  
  
> [!NOTE]
>  <xref:System.TimeZone.ToUniversalTime%2A> Метод распознает только текущее правило коррекции летнего времени, для местного часового пояса. Таким образом гарантируется возврат точного времени (UTC), соответствующий определенному местному времени только в течение периода, в котором последнее правило коррекции действует. Он может возвращать неточные результаты, если `time` является исторические значения даты и времени, когда действовало предыдущее правило коррекции.  
  
 Если `time` параметр имеет неоднозначное время, метод предполагает, что это стандартное время. (Неоднозначное время — это приложения, можно сопоставить стандартное время или на летнее время в местном часовом поясе.) Если `time` является недопустимым временем, метод просто вычитает местное время от времени UTC местного часового пояса для возврата времени UTC. (Недопустимое время — это приложения, не существует из-за применения правил коррекции летнего времени.)  
  
 Так как `time` интерпретируется относительно текущего часового пояса в текущей системе, дату и время, возвращенное этим методом может отличаться, если приложение запускается на разных компьютерах или на одном компьютере с различными часовыми поясами. Для случаев, в которых значения даты и времени должны представлять одну однозначную точку во времени, использовать <xref:System.DateTimeOffset> значение для отображения местного времени.  
  
 <xref:System.TimeZone.ToUniversalTime%2A> Метод соответствует <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> перегрузку метода с <xref:System.DateTime> параметр которого <xref:System.DateTime.Kind%2A> свойство не равно <xref:System.DateTimeKind.Utc?displayProperty=nameWithType>. По возможности используйте <xref:System.TimeZoneInfo.ConvertTimeToUtc%28System.DateTime%29?displayProperty=nameWithType> перегрузки метода.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.TimeZoneInfo.ConvertTimeToUtc(System.DateTime)" />
      </Docs>
    </Member>
  </Members>
</Type>