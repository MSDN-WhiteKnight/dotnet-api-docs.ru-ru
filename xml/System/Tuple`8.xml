<Type Name="Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;" FullName="System.Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="93f5379c70df111d9811059ce8fca13aac42cb57" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58705980" /></Metadata><TypeSignature Language="C#" Value="public class Tuple&lt;T1,T2,T3,T4,T5,T6,T7,TRest&gt; : IComparable, System.Collections.IStructuralComparable, System.Collections.IStructuralEquatable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Tuple`8&lt;T1, T2, T3, T4, T5, T6, T7, TRest&gt; extends System.Object implements class System.Collections.IStructuralComparable, class System.Collections.IStructuralEquatable, class System.IComparable" />
  <TypeSignature Language="DocId" Value="T:System.Tuple`8" />
  <TypeSignature Language="VB.NET" Value="Public Class Tuple(Of T1, T2, T3, T4, T5, T6, T7, TRest)&#xA;Implements IComparable, IStructuralComparable, IStructuralEquatable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T1, typename T2, typename T3, typename T4, typename T5, typename T6, typename T7, typename TRest&gt;&#xA;public ref class Tuple : IComparable, System::Collections::IStructuralComparable, System::Collections::IStructuralEquatable" />
  <TypeSignature Language="F#" Value="type Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; = class&#xA;    interface IStructuralEquatable&#xA;    interface IStructuralComparable&#xA;    interface IComparable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T1" />
    <TypeParameter Name="T2" />
    <TypeParameter Name="T3" />
    <TypeParameter Name="T4" />
    <TypeParameter Name="T5" />
    <TypeParameter Name="T6" />
    <TypeParameter Name="T7" />
    <TypeParameter Name="TRest" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IStructuralComparable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IStructuralEquatable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IComparable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="T1">Тип первого компонента кортежа.</typeparam>
    <typeparam name="T2">Тип второго компонента кортежа.</typeparam>
    <typeparam name="T3">Тип третьего компонента кортежа.</typeparam>
    <typeparam name="T4">Тип четвертого компонента кортежа.</typeparam>
    <typeparam name="T5">Тип пятого компонента кортежа.</typeparam>
    <typeparam name="T6">Тип шестого компонента кортежа.</typeparam>
    <typeparam name="T7">Тип седьмого компонента кортежа.</typeparam>
    <typeparam name="TRest">Любой универсальный объект <see langword="Tuple" />, который определяет типы остальных компонентов кортежа.</typeparam>
    <summary>Представляет кортеж из *n* компонентов, где *n* равно 8 или больше.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Кортеж — это структура данных, с определенным номером и последовательность значений. <xref:System.Tuple%608> Класса представляет *n*- кортеж с 8 компонентами.  
  
 Можно создать экземпляр <xref:System.Tuple%608> объект с точно восьми компонентов путем вызова статического <xref:System.Tuple.Create%2A?displayProperty=nameWithType> метод. В следующем примере создается кортеж восьми (octuple), содержащий простые числа меньше 20. Обратите внимание на то, что он использует определение типа для определения типа каждого компонента.  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 Можно также создать экземпляр объекта n кортежей с 8 компонентами, вызвав <xref:System.Tuple%608.%23ctor%2A> конструктор. В следующем примере используется <xref:System.Tuple%608.%23ctor%2A> конструктор для создания 8-кортеж, который эквивалентен кортежа, созданные в предыдущем примере.  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
> [!NOTE]
>  Чтобы создать кортеж из n с 9 или более компонентов, необходимо вызвать <xref:System.Tuple%608.%23ctor%2A> конструктор. Статические методы фабрики из <xref:System.Tuple> класс не поддерживают создание `Tuple` объекты с более чем восьми компонентов.  
  
 Для создания экземпляра n кортеж, который имеет восемь или более компонентов с <xref:System.Tuple%608.%23ctor%2A> конструктор, указываемое в универсальный `Tuple` объекта в виде `rest` параметра для определения восьмого по *n*th компонентов кортежа. Путем вложения универсального `Tuple` объектов таким образом, можно создать кортеж, который не имеет практические ограничения на число ее компонентов.  
  
 В следующем примере создается 17-кортеж, содержащий данные о населении для города из Детройт, Мичиган, национальной переписи из 1860 строк до 2000. Первый компонент кортежа — название города. Второй компонент — Дата начала ряда данных, а третий компонент — это совокупности на дату начала. Каждый последующий компонент содержат население интервалы десять лет. 17 кортежа создается путем вложения <xref:System.Tuple%603> объекта внутри <xref:System.Tuple%608> объекта. (Это, <xref:System.Tuple%603> объект передается в качестве значения `rest` параметр в <xref:System.Tuple%608> конструктора класса.) Это <xref:System.Tuple%608> объекта в свою очередь, вложен во внешнем <xref:System.Tuple%608> объекта. (Это, <xref:System.Tuple%608> объект передается в качестве значения `rest` параметра во внешнем <xref:System.Tuple%608> конструктор класса объекта.)  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 Значение первых семи компонентов кортежа можно получить с помощью доступной только для чтения <xref:System.Tuple%607.Item1%2A>, <xref:System.Tuple%607.Item2%2A>, <xref:System.Tuple%607.Item3%2A>, <xref:System.Tuple%607.Item4%2A>, <xref:System.Tuple%607.Item5%2A>, <xref:System.Tuple%607.Item6%2A>, и <xref:System.Tuple%607.Item7%2A> свойства экземпляра. Все дополнительные компоненты являются вложенными и могут быть получены из <xref:System.Tuple%608.Rest%2A> свойство. В предыдущем примере <xref:System.Tuple%608.Item1%2A> через <xref:System.Tuple%608.Item7%2A> свойства получения первого по седьмой кортежа. 14-й компоненты с восьмого по содержатся в кортеже, находящегося на втором уровне, а также представлены `Rest.Item1` через `Rest.Item7` свойства. Пятнадцатого по семнадцатого компоненты содержатся в кортеже, находящегося на третьем уровне, а также представлены `Rest.Rest.Item1` на то, что `Rest.Rest.Item3` свойства.  
  
 Кортежи обычно используются четырьмя способами:  
  
-   Для представления одного набора данных. Например кортеж может представлять запись в базе данных, и его компоненты могут представлять отдельные поля записи.  
  
-   Для предоставления удобный доступ к и манипуляции, набор данных.  
  
-   Для возврата нескольких значений из метода без использования `out` параметры (в C#) или `ByRef` (в Visual Basic). Например, предыдущий пример возвращает рассчитанные статистические данные, а также название города, в <xref:System.Tuple%607> объекта.  
  
-   Чтобы передать несколько значений к методу в качестве одного параметра. Например <xref:System.Threading.Thread.Start%28System.Object%29?displayProperty=nameWithType> метод имеет один параметр, который позволяет задавать одно значение в метод, который выполняется потоком во время запуска. Если вы указали <xref:System.Tuple%607> объекта в виде аргумента метода, можно просто указать процедуру запуска потока с семью элементами данных.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Tuple" />
    <altmember cref="T:System.Tuple`1" />
    <altmember cref="T:System.Tuple`2" />
    <altmember cref="T:System.Tuple`3" />
    <altmember cref="T:System.Tuple`4" />
    <altmember cref="T:System.Tuple`5" />
    <altmember cref="T:System.Tuple`6" />
    <altmember cref="T:System.Tuple`7" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Tuple (T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(!T1 item1, !T2 item2, !T3 item3, !T4 item4, !T5 item5, !T6 item6, !T7 item7, !TRest rest) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.#ctor(`0,`1,`2,`3,`4,`5,`6,`7)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item1 As T1, item2 As T2, item3 As T3, item4 As T4, item5 As T5, item6 As T6, item7 As T7, rest As TRest)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Tuple(T1 item1, T2 item2, T3 item3, T4 item4, T5 item5, T6 item6, T7 item7, TRest rest);" />
      <MemberSignature Language="F#" Value="new Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; : 'T1 * 'T2 * 'T3 * 'T4 * 'T5 * 'T6 * 'T7 * 'Rest -&gt; Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;" Usage="new System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt; (item1, item2, item3, item4, item5, item6, item7, rest)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item1" Type="T1" />
        <Parameter Name="item2" Type="T2" />
        <Parameter Name="item3" Type="T3" />
        <Parameter Name="item4" Type="T4" />
        <Parameter Name="item5" Type="T5" />
        <Parameter Name="item6" Type="T6" />
        <Parameter Name="item7" Type="T7" />
        <Parameter Name="rest" Type="TRest" />
      </Parameters>
      <Docs>
        <param name="item1">Значение первого компонента кортежа.</param>
        <param name="item2">Значение второго компонента кортежа.</param>
        <param name="item3">Значение третьего компонента кортежа.</param>
        <param name="item4">Значение четвертого компонента кортежа.</param>
        <param name="item5">Значение пятого компонента кортежа.</param>
        <param name="item6">Значение шестого компонента кортежа.</param>
        <param name="item7">Значение седьмого компонента кортежа.</param>
        <param name="rest">Любой универсальный объект <see langword="Tuple" />, который содержит значения остальных компонентов кортежа.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Tuple`8" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно также использовать статический <xref:System.Tuple.Create%2A?displayProperty=nameWithType> метод для создания экземпляра объекта 8 кортежей (octuple) без необходимости явно указывать типы его компонентов. В следующем примере используется <xref:System.Tuple.Create%2A?displayProperty=nameWithType> метод для создания экземпляра объекта 8 кортеж, содержащий простые числа меньше 20.  
  
 [!code-csharp[System.Tuple.Create#17](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/createntuple.cs#17)]
 [!code-vb[System.Tuple.Create#17](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/createntuple.vb#17)]  
  
 Это эквивалентно следующий вызов в <xref:System.Tuple%607.%23ctor%2A> конструктора класса.  
  
 [!code-csharp[System.Tuple\`8.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.class/cs/octuple1.cs#1)]
 [!code-vb[System.Tuple\`8.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.class/vb/octuple1.vb#1)]  
  
 Тем не менее статический <xref:System.Tuple.Create%2A?displayProperty=nameWithType> метод не может использоваться для создания объекта кортежа с более чем восьми компонентов.  
  
 При использовании <xref:System.Tuple%608.%23ctor%2A> конструктор для создания n кортеж с 8 компонентами, использовании `rest` параметр для создания вложенных n кортежа, имеющий от одного до семи компонентов. Используя последовательные уровни вложения, можно создать кортеж из n с практически неограниченное количество компонентов. Например, чтобы создать кортеж из 25, можно создать экземпляр <xref:System.Tuple%608> объекта с тремя уровнями вложенности, как показано ниже:  
  
-   Внешний <xref:System.Tuple%608> объект содержит числа с первого по седьмой. Его <xref:System.Tuple%608.Rest%2A> свойство предоставляет доступ к <xref:System.Tuple%608> объекта на первом уровне вложенности.  
  
-   Самых внешних вложенных <xref:System.Tuple%608> объект содержит 14-й компоненты с восьмого по и его <xref:System.Tuple%608.Rest%2A> свойство предоставляет доступ к <xref:System.Tuple%608> объекта на втором уровне вложенности.  
  
-   <xref:System.Tuple%608> Объект на втором уровне вложенности содержит пятнадцатого по двадцать первый компонентов и его <xref:System.Tuple%608.Rest%2A> свойство предоставляет доступ к <xref:System.Tuple%604> объекта на третьем уровне вложенности.  
  
-   Является самой внутренней кортеж <xref:System.Tuple%604> объект, который содержит компоненты двадцать вторым до 25.  
  
   
  
## Examples  
 В следующем примере создается 17-кортеж, содержащий данные о населении для города из Детройт, Мичиган, переписи из 1860 строк до 2000. Первый компонент кортежа — название города. Второй компонент — Дата начала в ряду данных, а третий компонент — это совокупности на дату начала. Каждый последующий компонент содержат население интервалы десять лет. В примере используется два уровня вложения для создания кортежа с 17 элементами: Он определяет кортеж из семи которого с третьего по седьмой содержат данные о населении 1860 через 1900, вложенные 7-кортеж, содержащий данные о населении для 1910 по 1970 года, и также вложенный 3-кортеж, содержащий данные о населении для 1980 до 2000.  
  
 [!code-csharp[System.Tuple.Create#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple.create/cs/example.cs#19)]
 [!code-vb[System.Tuple.Create#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple.create/vb/example.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="rest" /> не является универсальным объектом <see langword="Tuple" />.</exception>
        <altmember cref="M:System.Tuple.Create``8(``0,``1,``2,``3,``4,``5,``6,``7)" />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="tuple.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект, сравниваемый с данным экземпляром.</param>
        <summary>Возвращает значение, показывающее, равен ли текущий объект <see cref="T:System.Tuple`8" /> указанному объекту.</summary>
        <returns>Значение <see langword="true" />, если текущий экземпляр равен указанному объекту; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `obj` Параметр рассматривается как равен текущему экземпляру, если он удовлетворяет все перечисленные ниже условия:  
  
-   Это <xref:System.Tuple%608> объекта.  
  
-   Он имеет же общее число компонентов, имеющих те же типы, что и текущий экземпляр.  
  
-   Компонентов (включая его вложенные компоненты) считаются равными для текущего экземпляра. Равенство определяется путем сравнения по умолчанию для каждого компонента.  
  
   
  
## Examples  
 В следующем примере определяется пять <xref:System.Tuple%608> объектов, содержащих простые числа. Затем он сравнивает первый объект с каждым из остальных объектов. Как показано в выходных данных, только первый и последний <xref:System.Tuple%608> объекты равны, поскольку они имеют одинаковое число компонентов с одинаковыми значениями.  
  
 [!code-csharp[System.Tuple\`8.Equals#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.equals/cs/equals1.cs#1)]
 [!code-vb[System.Tuple\`8.Equals#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.equals/vb/equals1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="tuple.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Вычисляет хэш-код для текущего объекта <see cref="T:System.Tuple`8" />.</summary>
        <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item1">
      <MemberSignature Language="C#" Value="public T1 Item1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T1 Item1" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item1" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item1 As T1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T1 Item1 { T1 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item1 : 'T1" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T1</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение первого компонента текущего объекта <see cref="T:System.Tuple`8" />.</summary>
        <value>Значение первого компонента текущего объекта <see cref="T:System.Tuple`8" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно динамически определить тип <xref:System.Tuple%608.Item1%2A> компонент в одном из двух способов:  
  
-   Путем вызова `GetType` метод на значение, которое возвращается методом <xref:System.Tuple%608.Item1%2A> свойство.  
  
-   Получая <xref:System.Type> , представляющий <xref:System.Tuple%608> объекта и получения первый элемент из массива, возвращаемого его <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> метод.  
  
   
  
## Examples  
 В следующем примере создается объект 17 кортежа, который содержит данные о населении для города из Детройт, Мичиган, из 1860 строк до 2000. Первый компонент кортежа 17 — название города. В примере используется <xref:System.Tuple%608.Item1%2A> свойство для отображения названия города в заголовке таблицы перед отображением данных о населении.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item2">
      <MemberSignature Language="C#" Value="public T2 Item2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T2 Item2" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item2" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item2 As T2" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T2 Item2 { T2 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item2 : 'T2" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение второго компонента текущего объекта <see cref="T:System.Tuple`8" />.</summary>
        <value>Значение второго компонента текущего объекта <see cref="T:System.Tuple`8" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно динамически определить тип <xref:System.Tuple%608.Item2%2A> компонент в одном из двух способов:  
  
-   Путем вызова `GetType` метод на значение, которое возвращается методом <xref:System.Tuple%608.Item2%2A> свойство.  
  
-   Получая <xref:System.Type> , представляющий <xref:System.Tuple%608> объекта и получение второй элемент из массива, возвращаемого его <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> метод.  
  
   
  
## Examples  
 В следующем примере создается объект 17 кортежа, который содержит данные о населении для города из Детройт, Мичиган, из 1860 строк до 2000. Второй компонент кортежа 17 — первый год выручка от ряда данных. В примере присваивается значение <xref:System.Tuple%608.Item2%2A> свойство переменной, а затем использует эту переменную для представления года, данные которого отображается.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item3">
      <MemberSignature Language="C#" Value="public T3 Item3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T3 Item3" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item3" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item3 As T3" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T3 Item3 { T3 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item3 : 'T3" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение третьего компонента текущего объекта <see cref="T:System.Tuple`8" />.</summary>
        <value>Значение третьего компонента текущего объекта <see cref="T:System.Tuple`8" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно динамически определить тип <xref:System.Tuple%608.Item3%2A> компонент в одном из двух способов:  
  
-   Путем вызова `GetType` метод на значение, которое возвращается методом <xref:System.Tuple%608.Item3%2A> свойство.  
  
-   Получая <xref:System.Type> , представляющий <xref:System.Tuple%608> объекта и получения третий элемент из массива, возвращаемого его <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> метод.  
  
   
  
## Examples  
 В следующем примере создается объект 17 кортежа, который содержит данные о населении для города из Детройт, Мичиган, из 1860 строк до 2000. Третьего компонента кортежа с 17 элементами является население в 1860 строк. В примере используется <xref:System.Tuple%608.Item3%2A> свойство для отображения значения заполнения, так и для которого требуется вычислить годовой скорость заполнения изменения между 1860 и 1870.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item4">
      <MemberSignature Language="C#" Value="public T4 Item4 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T4 Item4" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item4" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item4 As T4" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T4 Item4 { T4 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item4 : 'T4" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item4" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение четвертого компонента текущего объекта <see cref="T:System.Tuple`8" />.</summary>
        <value>Значение четвертого компонента текущего объекта <see cref="T:System.Tuple`8" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно динамически определить тип <xref:System.Tuple%608.Item4%2A> компонент в одном из двух способов:  
  
-   Путем вызова `GetType` метод на значение, которое возвращается методом <xref:System.Tuple%608.Item4%2A> свойство.  
  
-   Получая <xref:System.Type> , представляющий <xref:System.Tuple%608> объекта и получения четвертый элемент из массива, возвращаемого его <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> метод.  
  
   
  
## Examples  
 В следующем примере создается объект 17 кортежа, который содержит данные о населении для города из Детройт, Мичиган, из 1860 строк до 2000. Четвертого компонента кортежа с 17 элементами является население в 1870. В примере используется <xref:System.Tuple%608.Item4%2A> свойство для отображения значения заполнения, так и для которого требуется вычислить годовой скорость заполнения изменения между 1870 и 1880.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item5">
      <MemberSignature Language="C#" Value="public T5 Item5 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T5 Item5" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item5" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item5 As T5" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T5 Item5 { T5 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item5 : 'T5" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item5" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T5</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение пятого компонента текущего объекта <see cref="T:System.Tuple`8" />.</summary>
        <value>Значение пятого компонента текущего объекта <see cref="T:System.Tuple`8" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно динамически определить тип <xref:System.Tuple%608.Item5%2A> компонент в одном из двух способов:  
  
-   Путем вызова `GetType` метод на значение, которое возвращается методом <xref:System.Tuple%608.Item5%2A> свойство.  
  
-   Получая <xref:System.Type> , представляющий <xref:System.Tuple%608> объекта и получения пятый элемент из массива, возвращаемого его <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> метод.  
  
   
  
## Examples  
 В следующем примере создается объект 17 кортежа, который содержит данные о населении для города из Детройт, Мичиган, из 1860 строк до 2000. Пятого компонента кортежа с 17 элементами является население в 1880. В примере используется <xref:System.Tuple%608.Item5%2A> свойство для отображения значения заполнения, так и для которого требуется вычислить годовой скорость заполнения изменения между 1880 и 1890 г.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item6">
      <MemberSignature Language="C#" Value="public T6 Item6 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T6 Item6" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item6" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item6 As T6" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T6 Item6 { T6 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item6 : 'T6" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item6" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T6</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение шестого компонента текущего объекта <see cref="T:System.Tuple`8" />.</summary>
        <value>Значение шестого компонента текущего объекта <see cref="T:System.Tuple`8" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно динамически определить тип <xref:System.Tuple%608.Item6%2A> компонент в одном из двух способов:  
  
-   Путем вызова `GetType` метод на значение, которое возвращается методом <xref:System.Tuple%608.Item6%2A> свойство.  
  
-   Получая <xref:System.Type> , представляющий <xref:System.Tuple%608> объекта и получения шестого элемента массива, возвращаемого его <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> метод.  
  
   
  
## Examples  
 В следующем примере создается объект 17 кортежа, который содержит данные о населении для города из Детройт, Мичиган, из 1860 строк до 2000. Шестого компонента кортежа с 17 элементами является население в 1890 г. В примере используется <xref:System.Tuple%608.Item6%2A> свойство для отображения значения заполнения, так и для которого требуется вычислить годовой скорость заполнения изменения между 1890 г и 1900.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item7">
      <MemberSignature Language="C#" Value="public T7 Item7 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T7 Item7" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Item7" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item7 As T7" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T7 Item7 { T7 get(); };" />
      <MemberSignature Language="F#" Value="member this.Item7 : 'T7" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Item7" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T7</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение седьмого компонента текущего объекта <see cref="T:System.Tuple`8" />.</summary>
        <value>Значение седьмого компонента текущего объекта <see cref="T:System.Tuple`8" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно динамически определить тип <xref:System.Tuple%608.Item7%2A> компонент в одном из двух способов:  
  
-   Путем вызова `GetType` метод на значение, которое возвращается методом <xref:System.Tuple%608.Item7%2A> свойство.  
  
-   Получая <xref:System.Type> , представляющий <xref:System.Tuple%608> объекта и получения седьмой элемент из массива, возвращаемого его <xref:System.Type.GetGenericArguments%2A?displayProperty=nameWithType> метод.  
  
   
  
## Examples  
 В следующем примере создается объект 17 кортежа, который содержит данные о населении для города из Детройт, Мичиган, из 1860 строк до 2000. Седьмого компонента кортежа с 17 элементами является население в 1900. В примере используется <xref:System.Tuple%608.Item7%2A> свойство для отображения значения заполнения, так и для которого требуется вычислить годовой скорость заполнения изменения от 1900 до 1910.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rest">
      <MemberSignature Language="C#" Value="public TRest Rest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !TRest Rest" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.Rest" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rest As TRest" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TRest Rest { TRest get(); };" />
      <MemberSignature Language="F#" Value="member this.Rest : 'Rest" Usage="System.Tuple&lt;'T1, 'T2, 'T3, 'T4, 'T5, 'T6, 'T7, 'Rest&gt;.Rest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TRest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает остальные компоненты текущего объекта <see cref="T:System.Tuple`8" />.</summary>
        <value>Значение остальных компонентов текущего объекта <see cref="T:System.Tuple`8" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.Rest%2A> Свойство возвращает вложенный `Tuple` объект, обеспечивающий доступ к восьмой хотя *n*th компонентов кортежа. В зависимости от общего количества компонентов кортежа, значения восьмого из четырнадцати компонентов можно получить из вложенного `Tuple` объекта <xref:System.Tuple%608.Item1%2A> через <xref:System.Tuple%608.Item7%2A> свойства. Затем можно использовать <xref:System.Tuple%608.Rest%2A> вложенное свойство <xref:System.Tuple%608> извлекаемого объекта `Tuple` объекта на следующем уровне вложенности.  
  
 Можно динамически определять количество компонентов в вложенный `Tuple` объект, возвращаемый <xref:System.Tuple%608.Rest%2A> свойство путем извлечения цифр из имени типа. Ниже приведен пример.  
  
 [!code-vb[System.Tuple\`8.Item1#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/rest.vb#2)]  
  
   
  
## Examples  
 В следующем примере создается объект 17 кортежа, который содержит данные о населении для города из Детройт, Мичиган, из 1860 строк до 2000. Седьмого компонента кортежа с 17 элементами является население в 1900. В примере используется <xref:System.Tuple%608.Rest%2A> свойство для извлечения значений восьмого из четырнадцати компонентов и он использует <xref:System.Tuple%608.Rest%2A> свойство вложенного <xref:System.Tuple%608> объекта для извлечения значения остальных компонентов.  
  
 [!code-csharp[System.Tuple\`8.Item1#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.item1/cs/item1.cs#1)]
 [!code-vb[System.Tuple\`8.Item1#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.item1/vb/item1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IStructuralComparable.CompareTo (object other, System.Collections.IComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralComparable.CompareTo(object other, class System.Collections.IComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralComparable#CompareTo(System.Object,System.Collections.IComparer)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (other As Object, comparer As IComparer) As Integer Implements IStructuralComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralComparable.CompareTo(System::Object ^ other, System::Collections::IComparer ^ comparer) = System::Collections::IStructuralComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralComparable.CompareTo(System.Object,System.Collections.IComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IComparer" />
      </Parameters>
      <Docs>
        <param name="other">Объект для сравнения с текущим экземпляром.</param>
        <param name="comparer">Объект, предоставляющий настраиваемые правила для сравнения.</param>
        <summary>Сравнивает текущий объект <see cref="T:System.Tuple`8" /> с указанным объектом, используя заданный компаратор, и возвращает целое число, которое показывает положение текущего объекта относительно указанного объекта в порядке сортировки: перед объектом, после него или в той же позиции.</summary>
        <returns>Целое число со знаком, определяющее относительное положение экземпляра и параметра <paramref name="other" /> в порядке сортировки, как показано в следующей таблице.  
  
 <list type="table"><listheader><term> Значение 
 </term><description> Описание 
 </description></listheader><item><term> Отрицательное целое число 
 </term><description> Данный экземпляр предшествует параметру <paramref name="other" />.  
  
 </description></item><item><term> Нуль 
 </term><description> У этого экземпляра та же позиция в порядке сортировки, что и у <paramref name="other" />.  
  
 </description></item><item><term> Положительное целое число 
 </term><description> Данный экземпляр стоит после параметра <paramref name="other" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Данный член является явной реализацией интерфейса. Он может использоваться только при условии, что экземпляр класса <xref:System.Tuple%608> приведен к типу интерфейса <xref:System.Collections.IStructuralComparable>.  
  
 Этот метод позволяет определять пользовательские процедуры сравнения для <xref:System.Tuple%608> объектов. Например, можно использовать этот метод, чтобы порядок <xref:System.Tuple%608> объекты на основе значения из указанного компонента.  
  
 Несмотря на то, что этот метод может вызываться напрямую, он наиболее часто вызывается сортировки коллекций методы, которые включают <xref:System.Collections.IComparer> параметры для сортировки элементов в коллекцию. Например, она будет вызвана <xref:System.Array.Sort%28System.Array%2CSystem.Collections.IComparer%29?displayProperty=nameWithType> метод и <xref:System.Collections.SortedList.Add%2A> метод <xref:System.Collections.SortedList> объекта, экземпляр которого создается с помощью <xref:System.Collections.SortedList.%23ctor%28System.Collections.IComparer%29?displayProperty=nameWithType> конструктор.  
  
> [!CAUTION]
>  <xref:System.Tuple%608.System%23Collections%23IStructuralComparable%23CompareTo%2A> Метод предназначен для использования в операции сортировки. Он не должен использоваться, при основной целью сравнения для определения, равны ли два объекта. Чтобы определить, равны ли два объекта, вызовите <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%2A> метод.  
  
   
  
## Examples  
 В следующем примере создается массив <xref:System.Tuple%608> объектов, содержащий данные о населении для четырех городах США из 1940 до 2000. Octuple первый компонент — название города. Оставшиеся шесть компонентов представляют численность населения с интервалами в 10-летнему из 1940 до 2000.  
  
 `PopulationComparer` Класс предоставляет <xref:System.Collections.IComparer> реализация, позволяющая массив кортежей следует отсортировать с любого из его компонентов. Предоставляются два значения `PopulationComparer` конструктору класса: Положение компонента, который определяет порядок сортировки и <xref:System.Boolean> значение, указывающее ли кортежей должны быть отсортированы в порядке возрастания или убывания.  
  
 Затем отображает элементы в массиве без сортировки, сортирует их по третий компонент (заполнение 1950) и отображает их и затем сортирует их по восьмого компонента (заполнение в 2000) и отображает их.  
  
 [!code-csharp[System.Tuple\`8.CompareTo#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto2.cs#2)]
 [!code-vb[System.Tuple\`8.CompareTo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto2.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="other" /> не является объектом <see cref="T:System.Tuple`8" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.Equals">
      <MemberSignature Language="C#" Value="bool IStructuralEquatable.Equals (object other, System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IStructuralEquatable.Equals(object other, class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#Equals(System.Object,System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function Equals (other As Object, comparer As IEqualityComparer) As Boolean Implements IStructuralEquatable.Equals" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IStructuralEquatable.Equals(System::Object ^ other, System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::Equals;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.Equals(System.Object,System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="other">Объект, сравниваемый с данным экземпляром.</param>
        <param name="comparer">Объект, который определяет метод, используемый для вычисления равенства двух объектов.</param>
        <summary>Возвращает значение, показывающее, равен ли текущий атрибут <see cref="T:System.Tuple`8" /> указанному объекту при использовании заданного метода сравнения.</summary>
        <returns>Значение <see langword="true" />, если текущий экземпляр равен указанному объекту; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Данный элемент является явной реализацией элемента интерфейса. Он может использоваться только при условии, что экземпляр класса <xref:System.Tuple%608> приведен к типу интерфейса <xref:System.Collections.IStructuralEquatable>.  
  
 <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> Вызывается только в том случае, если реализация `other` не `null`, и если он может успешно приведите (в C#) или преобразован (в Visual Basic), чтобы <xref:System.Tuple%608> объект с тем же общее число компонентов (включая вложенные `Tuple` объекты) совпадает с типом текущего экземпляра. <xref:System.Tuple%608.System%23Collections%23IStructuralEquatable%23Equals%28System.Object%2CSystem.Collections.IEqualityComparer%29> Передает первый метод <xref:System.Tuple%608.Item1%2A> значения <xref:System.Tuple%608> объектов, который требуется сравнить с <xref:System.Collections.IEqualityComparer.Equals%2A?displayProperty=nameWithType> реализации. Если вызов этого метода возвращает `true`, повторный вызов и передается метод <xref:System.Tuple%608.Item2%2A> значения двух <xref:System.Tuple%608> объектов. Это продолжается до вызова метода `false` при сравнении пары значений или два <xref:System.Tuple%608.Rest%2A> значения передаются в метод.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IStructuralEquatable.GetHashCode">
      <MemberSignature Language="C#" Value="int IStructuralEquatable.GetHashCode (System.Collections.IEqualityComparer comparer);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IStructuralEquatable.GetHashCode(class System.Collections.IEqualityComparer comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#Collections#IStructuralEquatable#GetHashCode(System.Collections.IEqualityComparer)" />
      <MemberSignature Language="VB.NET" Value="Function GetHashCode (comparer As IEqualityComparer) As Integer Implements IStructuralEquatable.GetHashCode" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IStructuralEquatable.GetHashCode(System::Collections::IEqualityComparer ^ comparer) = System::Collections::IStructuralEquatable::GetHashCode;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IStructuralEquatable.GetHashCode(System.Collections.IEqualityComparer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="comparer" Type="System.Collections.IEqualityComparer" />
      </Parameters>
      <Docs>
        <param name="comparer">Объект, метод <see cref="M:System.Collections.IEqualityComparer.GetHashCode(System.Object)" /> которого вычисляет хэш-код текущего объекта <see cref="T:System.Tuple`8" />.</param>
        <summary>Вычисляет хэш-код для текущего объекта <see cref="T:System.Tuple`8" />, используя заданный метод вычисления.</summary>
        <returns>Хэш-код в виде 32-разрядного целого числа со знаком.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Данный элемент является явной реализацией элемента интерфейса. Он может использоваться только при условии, что экземпляр класса <xref:System.Tuple%608> приведен к типу интерфейса <xref:System.Collections.IStructuralEquatable>.  
  
 Этот метод просто создает оболочку вызова `comparer` объекта <xref:System.Collections.IEqualityComparer.GetHashCode%2A?displayProperty=nameWithType> реализации.  
  
 Алгоритм, используемый для вычисления хэш-код должен возвращать одинаковый хэш-код для двух <xref:System.Tuple%608> объекты, которые считаются равными.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IComparable.CompareTo">
      <MemberSignature Language="C#" Value="int IComparable.CompareTo (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.IComparable.CompareTo(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.System#IComparable#CompareTo(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function CompareTo (obj As Object) As Integer Implements IComparable.CompareTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.IComparable.CompareTo(System::Object ^ obj) = IComparable::CompareTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IComparable.CompareTo(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Объект для сравнения с текущим экземпляром.</param>
        <summary>Сравнивает текущий объект <see cref="T:System.Tuple`8" /> с заданным объектом и возвращает целое число, указывающее, находится ли текущий объект в той же позиции, что и указанный объект, после него или перед ним в порядке сортировки.</summary>
        <returns>Целое число со знаком, определяющее относительное положение экземпляра и параметра <paramref name="obj" /> в порядке сортировки, как показано в следующей таблице.  
  
 <list type="table"><listheader><term> Значение 
 </term><description> Описание 
 </description></listheader><item><term> Отрицательное целое число 
 </term><description> Данный экземпляр предшествует параметру <paramref name="obj" />.  
  
 </description></item><item><term> Нуль 
 </term><description> У этого экземпляра та же позиция в порядке сортировки, что и у <paramref name="obj" />.  
  
 </description></item><item><term> Положительное целое число 
 </term><description> Данный экземпляр стоит после параметра <paramref name="obj" />.  
  
 </description></item></list></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Данный элемент является явной реализацией элемента интерфейса. Он может использоваться только при условии, что экземпляр класса <xref:System.Tuple%608> приведен к типу интерфейса <xref:System.IComparable>.  
  
 Этот метод обеспечивает <xref:System.IComparable.CompareTo%2A?displayProperty=nameWithType> внедрению <xref:System.Tuple%608> класса. Несмотря на то, что метод может вызываться напрямую, он наиболее часто вызывается перегрузок по умолчанию для сортировки коллекции методов, таких как <xref:System.Array.Sort%28System.Array%29?displayProperty=nameWithType> и <xref:System.Collections.SortedList.Add%2A?displayProperty=nameWithType>, для сортировки элементов в коллекцию.  
  
> [!CAUTION]
>  <xref:System.Tuple%608.System%23IComparable%23CompareTo%2A> Метод предназначен для использования в операции сортировки. Он не должен использоваться, при основной целью сравнения для определения, равны ли два объекта. Чтобы определить, равны ли два объекта, вызовите <xref:System.Tuple%608.Equals%28System.Object%29?displayProperty=nameWithType> метод.  
  
 Этот метод использует компаратора по умолчанию объект для сравнения каждого компонента.  
  
   
  
## Examples  
 В следующем примере создается массив кортежей, компоненты которого являются целыми числами, которые содержат ряд простых чисел. В примере отображает элементы массива без сортировки, сортирует массив и затем отображает массив в отсортированном порядке. Выходные данные показывают, что массив был отсортирован по <xref:System.Tuple%608.Item1%2A>, или первого компонента кортежа. Обратите внимание, что пример не вызывает напрямую <xref:System.Tuple%608.System%23IComparable%23CompareTo%28System.Object%29> метод. Этот метод вызывается неявно <xref:System.Array.Sort%28System.Array%29> метод для каждого элемента в массиве.  
  
 [!code-csharp[System.Tuple\`8.CompareTo#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.compareto/cs/compareto1.cs#1)]
 [!code-vb[System.Tuple\`8.CompareTo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.compareto/vb/compareto1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="obj" /> не является объектом <see cref="T:System.Tuple`8" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Item">
      <MemberSignature Language="C#" Value="object System.Runtime.CompilerServices.ITuple.Item[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Runtime.CompilerServices.ITuple.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Item(index As Integer) As Object Implements ITuple.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Runtime::CompilerServices::ITuple::Item[int] { System::Object ^ get(int index); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="index">Индекс указанного элемента <see langword="Tuple" />. <paramref name="index" /> может находиться в диапазоне от 0 для <see langword="Item1" /> до значения, на единицу меньше, чем число элементов в <see langword="Tuple" />.</param>
        <summary>Получает значение указанного элемента <see langword="Tuple" />.</summary>
        <value>Значение элемента <see langword="Tuple" /> в заданной позиции.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Item%2A?displayProperty=nameWithType> Свойство является явной реализацией интерфейса. Назовем ее, необходимо привести или преобразовать <xref:System.Tuple%608> объект <xref:System.Runtime.CompilerServices.ITuple> объект интерфейса.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">Значение параметра <paramref name="index" /> меньше 0.  
  
-или- 
 Значение <paramref name="index" /> больше или равно <see cref="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Runtime.CompilerServices.ITuple.Length">
      <MemberSignature Language="C#" Value="int System.Runtime.CompilerServices.ITuple.Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Runtime.CompilerServices.ITuple.Length" />
      <MemberSignature Language="DocId" Value="P:System.Tuple`8.System#Runtime#CompilerServices#ITuple#Length" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Length As Integer Implements ITuple.Length" />
      <MemberSignature Language="C++ CLI" Value="property int System::Runtime::CompilerServices::ITuple::Length { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Runtime.CompilerServices.ITuple.Length" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Runtime.CompilerServices.ITuple.Length</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает количество элементов в <see langword="Tuple" />.</summary>
        <value>Число элементов в массиве <see langword="Tuple" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Tuple%608.System%23Runtime%23CompilerServices%23ITuple%23Length%2A> Свойство является явной реализацией интерфейса. Назовем ее, необходимо привести или преобразовать <xref:System.Tuple%608> тип <xref:System.Runtime.CompilerServices.ITuple> объект интерфейса.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Tuple`8.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="tuple.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает строковое представление значения этого экземпляра <see cref="T:System.Tuple`8" />.</summary>
        <returns>Строковое представление конкретного объекта <see cref="T:System.Tuple`8" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Строка, возвращаемая этим методом принимает форму (*Item1*, *Item2*, *Item3*, *Item4*, `Item5, Item6, Item7`,  *Item8*...), где *Item1*, *Item2*, *Item3*, *Item4*, *«ТОВАР5»*, *Item6*, и *Item7* представляют значения <xref:System.Tuple%608.Item1%2A>, <xref:System.Tuple%608.Item2%2A>, <xref:System.Tuple%608.Item3%2A>, <xref:System.Tuple%608.Item4%2A>, <xref:System.Tuple%608.Item5%2A>, <xref:System.Tuple%608.Item6%2A>, и <xref:System.Tuple%608.Item7%2A> свойства. *Item8* представляет значение <xref:System.Tuple%608> объекта `Next.Item1` свойство. Значение всех дополнительных вложенных компонентов выполните *Item8*. Если выполняется одно из значений свойств `null`, она представляется как <xref:System.String.Empty?displayProperty=nameWithType>.  
  
   
  
## Examples  
 В следующем примере создается 17-кортеж, содержащий данные о населении для города из Детройт, Мичиган, из 1860 строк к числу 1900. Затем он использует <xref:System.Tuple%608.ToString%2A> метод для отображения данных кортежа.  
  
 [!code-csharp[System.Tuple\`8.ToString#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.tuple`8.tostring/cs/tostring1.cs#1)]
 [!code-vb[System.Tuple\`8.ToString#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.tuple`8.tostring/vb/tostring1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>