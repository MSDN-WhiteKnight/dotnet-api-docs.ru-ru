<Type Name="FlagsAttribute" FullName="System.FlagsAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a6eda6723e0638b63748075272f8d52d69775038" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56390399" /></Metadata><TypeSignature Language="C#" Value="public class FlagsAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit FlagsAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.FlagsAttribute" />
  <TypeSignature Language="VB.NET" Value="Public Class FlagsAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FlagsAttribute : Attribute" />
  <TypeSignature Language="F#" Value="type FlagsAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Enum, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Указывает, что перечисление может обрабатываться как битовое поле (т. е. набор флагов).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Битовые поля обычно используются для списков элементов, которые могут возникнуть в сочетании, тогда как константы перечисления обычно используются для списков взаимно исключают друг друга элементов. Таким образом битовые поля предназначены объединяться с помощью побитовой операции OR для создания неименованных значений, тогда как констант перечисления. Их использование битовых полей, по сравнению с констант перечисления в разных языках.  
  
## <a name="attributes-of-the-flagsattribute"></a>Атрибуты FlagsAttribute  
 <xref:System.AttributeUsageAttribute> применяется к этому классу и его <xref:System.AttributeUsageAttribute.Inherited%2A> указывает свойство `false`. Этот атрибут может применяться только к перечислениям.  
  
## <a name="guidelines-for-flagsattribute-and-enum"></a>Рекомендации по FlagsAttribute и перечисления  
  
-   Используйте <xref:System.FlagsAttribute> настраиваемого атрибута для перечисления только в том случае, если операцию побитового (AND, OR, ИСКЛЮЧАЮЩИЙ или) будет осуществляться на основе числового значения.  
  
-   Объявление констант перечисления в степени двойки, то есть 1, 2, 4, 8 и т. д. Это означает, что отдельные флаги в сочетании констант перечисления не перекрываются.  
  
-   Рассмотрите возможность создания константы для часто используемых сочетаний флагов перечисления. Например, если у вас есть перечисление, используемое для операций файлового ввода-вывода, содержащий перечислимых констант `Read = 1` и `Write = 2`, рассмотрите возможность создания константы перечислимого типа `ReadWrite = Read OR Write`, сочетающий `Read` и `Write` флаги. Кроме того побитовой операции или использовать для объединения флагов могут считаться перспективным, не требуется для простых задач в некоторых ситуациях.  
  
-   Будьте осторожны при определении отрицательное число как константа перечисления флага, так как многие позиций флаг может устанавливаться 1, что может сделать код путаницу и рекомендует ошибок кода.  
  
-   Удобный способ проверить ли флаг имеет значение в числовом значении — провести побитовую операцию и между числовым значением и флагом константы перечислимого типа, который устанавливает все биты в числовое значение к нулю, флаг не соответствуют , затем проверить, является ли равным константы перечислимого типа флаг результата этой операции.  
  
-   Используйте `None` перечислялся имя флага константа, значение которого равно нулю. Нельзя использовать `None` константы перечислимого типа в операцию побитового и для тестирования для флага, поскольку результат всегда равен нулю. Тем не менее, можно выполнить логическую, не побитовых сравнение числовое значение и `None` константы перечислимого типа, чтобы определить, установлены ли все биты в числовом значении.  
  
     Если вы создаете перечисление значений, а не перечисление флагов, стоит по-прежнему создать `None` константы перечислимого типа. Причина в том, что по умолчанию объем памяти, используемый для перечисления инициализируется нулевым значением, среда CLR. Следовательно Если не определена константа, значение которого равно нулю, перечисление будет содержать недопустимое значение при его создании.  
  
     При наличии очевидного случая по умолчанию, необходимые для представления приложения, рассмотрите возможность использования Перечислимая константа, значение которого равно нулю для представления по умолчанию. Если ни один из вариантов по умолчанию, можно с помощью Перечислимая константа, значение которого равно нулю, означает, что обращение, не представленных каким-либо других перечислимых констант.  
  
-   Не определяйте значение перечисления исключительно для отражения состояния самого перечисления. Например не следует определять Перечислимая константа, которая просто отмечает конец перечисления. Если вам нужно определить последнее значение перечисления, явным образом выполнять проверку для этого значения. Кроме того можно выполнить проверку диапазона для первого и последнего Перечислимая константа, если все значения в диапазоне допустимы.  
  
-   Не указывайте констант-перечислителей, которые зарезервированы для использования в будущем.  
  
-   При определении метода или свойства, которое принимает как значение константы перечисления, рекомендуется проверить значение. Причина в том, что можно привести числовое значение в тип перечисления, даже если это числовое значение не определены в перечислении.  
  
   
  
## Examples  
 Следующий пример иллюстрирует использование `FlagsAttribute` атрибут и показано влияние на <xref:System.Enum.ToString%2A> метод использования `FlagsAttribute` на <xref:System.Enum> объявления.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 В следующем примере определяются две нумерации цветовые `SingleHue` и `MultiHue`. Последний имеет `FlagsAttribute` атрибут; первое из них — нет. В примере показано различие в поведении при диапазон целых чисел, включая целые числа, которые представляют базовых значений типа перечисления, преобразуются в тип перечисления и их строковые представления отображается.   Например, обратите внимание, что 3 нельзя представить в виде `SingleHue` значение, так как 3 не базовое значение любого `SingleHue` член, тогда как `FlagsAttribute` атрибут делает возможным для представления 3 как `MultiHue` значение `Black, Red`.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FlagsAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.FlagsAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FlagsAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.FlagsAttribute" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере определяется `PhoneService` перечисления, представляющий виды связи, предоставляемые телефонную компанию. Он инициализирует три переменные, представляющие службы, предоставленной для трех различных семей и указывает, какие семей у семей, которые имеют только служба сотового телефона, а какие семей мобильный телефон, land служба строке нет службы. Наконец, он неявно вызывает <xref:System.Enum.ToString%28System.String%29?displayProperty=nameWithType> метод для отображения типов службы, предоставленной для любой владелец.  
  
 [!code-cpp[System.FlagsAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags1.cpp#2)]
 [!code-csharp[System.FlagsAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags1.cs#2)]
 [!code-vb[System.FlagsAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags1.vb#2)]  
  
 Следующий пример иллюстрирует использование `FlagsAttribute` атрибут и показано влияние на <xref:System.Enum.ToString%2A> метод использования `FlagsAttribute` на <xref:System.Enum> объявления.  
  
 [!code-cpp[System.FlagsAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.FlagsAttribute/CPP/flags.cpp#1)]
 [!code-csharp[System.FlagsAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.FlagsAttribute/CS/flags.cs#1)]
 [!code-vb[System.FlagsAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.FlagsAttribute/VB/flags.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>