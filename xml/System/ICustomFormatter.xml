<Type Name="ICustomFormatter" FullName="System.ICustomFormatter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7e0e89e011838e20213bc48e7d0a2f9e5f56f30c" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58681410" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomFormatter" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomFormatter" />
  <TypeSignature Language="DocId" Value="T:System.ICustomFormatter" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomFormatter" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomFormatter" />
  <TypeSignature Language="F#" Value="type ICustomFormatter = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Определяет метод, поддерживающий нестандартное форматирование значения объекта.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ICustomFormatter> Интерфейс включает один метод <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType>. Если этот интерфейс реализуется типом ссылки или значения, <xref:System.ICustomFormatter.Format%2A> метод возвращает форматированное строковое представление значения объекта.  
  
 Как правило <xref:System.ICustomFormatter> интерфейс реализуется с помощью <xref:System.IFormatProvider> интерфейс для настройки поведения из двух методов .NET Framework составную строку форматирования, которые включают <xref:System.IFormatProvider> параметра. В частности <xref:System.ICustomFormatter> интерфейс можно реализовать настраиваемое форматирование значения объекта, передаваемого <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> и <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> методы.  
  
 Предоставляя пользовательское представление значения объекта требуется выполнить следующее:  
  
1.  Определите класс, реализующий <xref:System.ICustomFormatter> интерфейс и ее единый члена <xref:System.ICustomFormatter.Format%2A> метод.  
  
2.  Определите класс, реализующий <xref:System.IFormatProvider> интерфейс и ее единый члена <xref:System.IFormatProvider.GetFormat%2A> метод. <xref:System.IFormatProvider.GetFormat%2A> Метод возвращает экземпляр вашего <xref:System.ICustomFormatter> реализации. Часто один класс реализует интерфейс <xref:System.ICustomFormatter> и <xref:System.IFormatProvider>. В этом случае класс элемента `GetFormat` реализация просто возвращает экземпляр самой себя.  
  
3.  Передайте <xref:System.IFormatProvider> реализации в качестве `provider` аргумент <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> метода или метода сравнима.  
  
 Затем используем настраиваемое форматирование вместо собственного метода .NET Framework.  
  
   
  
## Examples  
 В следующем примере реализуется <xref:System.ICustomFormatter> чтобы разрешить двоичное, восьмеричные и шестнадцатеричные форматирование целых значений. В этом примере один класс, `IBinaryFormatter`, реализует интерфейс <xref:System.ICustomFormatter> и <xref:System.IFormatProvider>. Его <xref:System.IFormatProvider.GetFormat%2A?displayProperty=nameWithType> метод определяет, является ли `formatType` параметр представляет <xref:System.ICustomFormatter> типа. В этом случае `BinaryFormatter` возвращает экземпляр; в противном случае возвращается `null`. Его <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> реализации определяет, является ли параметр format один из трех поддерживаемые строки формата («B» для двоичного файла, «O» для восьмеричный и «H» для шестнадцатеричного) и форматирует `arg` параметр соответствующим образом. В противном случае, если `arg` не `null`, он вызывает `arg` параметра <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> реализации, если он существует, или его без параметров `ToString` метод, если нет. Если значением параметра `arg` является `null`, метод возвращает <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` Затем можно использовать для пользовательского форматирования, передав `BinaryFormatter` объекта в виде `provider` параметр <xref:System.String.Format%2A> метода, как показано в следующем примере.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Среда CLR пытается использовать ваш <see cref="T:System.ICustomFormatter" /> реализации для каждого элемента форматирования в строке составного формата. Таким образом, следует ожидать, ваш <see cref="T:System.ICustomFormatter" /> реализации будет вызываться для предоставления служб форматирования для объектов или значений, которые вы не предназначены для обработки. В этих случаях ваши <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> метод необходимо вызвать соответствующий метод форматирования для этого объекта или значение.  
  
Существует два типа из <see cref="T:System.ICustomFormatter" /> реализаций: встроенные и расширение.  
  
Встроенные реализации являются реализациями, которые предоставляют пользовательское форматирование для объекта определяется приложением. В этом случае реализация должна содержать следующее: 
-Определение строк формата, позволяющих определить форматирование объекта. Строки формата являются необязательными. Как правило строка формата «G» или «g» определяет формат Общие (или наиболее часто используемые). Тем не менее вы можете свободно для определения всех выбранных строк формата. Вы также можете решить, являются ли они зависеть от регистра символов.  
  
-Тест, чтобы убедиться, что тип объекта, переданного в <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> метод — тип вашего приложения. Если это не так, необходимо вызвать объекта <see cref="T:System.IFormattable" /> реализации, если таковой существует, или его <see cref="M:System.Object.ToString" /> метод, если это не так. Вы должны быть готовы обрабатывать все исключения, вызовы этих методов может вызывать.  
  
-Код для обработки строки формата null, если ваша реализация поддерживает строки формата. Наиболее распространенный подход состоит в том, чтобы заменить строку формата null с помощью спецификатора общего формата.  
  
-Код для обработки всех строк формата, которые поддерживает реализация.  
  
-Код для обработки строк формата, которые не поддерживают. Наиболее распространенный подход — создать <see cref="T:System.FormatException" />, несмотря на то, что вы можете предоставить форматирование по умолчанию.  
  
Реализации расширения являются реализациями, которые предоставляют пользовательское форматирование для типа, который уже имеет поддержку форматирования. Например, можно определить <c>CustomerNumberFormatter</c> , форматирующий целочисленный тип с дефисами между определенными цифрами. В этом случае реализация должна содержать следующее: 
-Определение строк формата, которые расширяют форматирование объекта. Эти строки формата являются обязательными, но они не должны конфликтовать с существующими строками формата этого типа. Например, если вы расширяете форматирования для <see cref="T:System.Int32" /> типа, не следует реализовывать «C», «D», «E», «F» и «G» спецификаторы формата, среди прочего.  
  
-Тест, тип объекта, переданного в <see cref="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" /> метод — это тип, форматирование которого расширение поддерживает. Если это не так, вызвать для объекта <see cref="T:System.IFormattable" /> реализации, если он существует, или объекта без параметров <see cref="M:System.Object.ToString" /> метод, если это не так. Вы должны быть готовы обрабатывать все исключения, вызовы этих методов может вызывать.  
  
-Код для обработки всех строк формата, поддерживаемых вашим расширением.  
  
-Код для обработки всех строк формата, которые не поддерживает расширение. Они должны быть переданы типа <see cref="T:System.IFormattable" /> реализации. Вы должны быть готовы обрабатывать все исключения, вызовы этих методов может вызывать.</para></block>
    <altmember cref="T:System.IFormatProvider" />
  </Docs>
  <Members>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public string Format (string format, object arg, IFormatProvider formatProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Format(string format, object arg, class System.IFormatProvider formatProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ICustomFormatter.Format(System.String,System.Object,System.IFormatProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Function Format (format As String, arg As Object, formatProvider As IFormatProvider) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Format(System::String ^ format, System::Object ^ arg, IFormatProvider ^ formatProvider);" />
      <MemberSignature Language="F#" Value="abstract member Format : string * obj * IFormatProvider -&gt; string" Usage="iCustomFormatter.Format (format, arg, formatProvider)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="arg" Type="System.Object" />
        <Parameter Name="formatProvider" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="format">Строка формата, содержащая спецификации форматирования.</param>
        <param name="arg">Объект для форматирования.</param>
        <param name="formatProvider">Объект, который предоставляет связанную с форматированием информацию о текущем экземпляре.</param>
        <summary>Преобразует значение указанного объекта в эквивалентное ему строковое представление, используя указанный формат и сведений об особенностях форматирования, связанных с языком и региональными параметрами.</summary>
        <returns>Строковое представление значения <paramref name="arg" />, отформатированное с использованием параметров <paramref name="format" /> и <paramref name="formatProvider" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод<xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> является методом обратного вызова. Вызывается метод, поддерживающий настраиваемое форматирование, такие как <xref:System.String.Format%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType> или <xref:System.Text.StringBuilder.AppendFormat%28System.IFormatProvider%2CSystem.String%2CSystem.Object%5B%5D%29?displayProperty=nameWithType>. Реализация вызывается один раз для каждого элемента форматирования в [Строка составного формата](~/docs/standard/base-types/composite-formatting.md). Например, в следующей инструкции <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> метод вызывается трижды.  
  
 [!code-csharp[System.ICustomFormatter.Class#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#4)]
 [!code-vb[System.ICustomFormatter.Class#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#4)]  
  
 `arg` Представляет собой объект в списке объектов, отсчитываемый от нуля позиция которого соответствует индексу элемента определенного формата.  
  
 `format` Параметр содержит строку формата, который является `formatString` компонент элемента формата. Если в элементе форматирования нет `formatString` компонента, значение `format` является `null`. Если `format` — `null`, в зависимости от типа `arg`, можно использовать со спецификацией формата по умолчанию по своему усмотрению.  
  
 `formatProvider` Параметр <xref:System.IFormatProvider> реализация, которая предоставляет формат для `arg`. Как правило, он является экземпляром вашего <xref:System.ICustomFormatter> реализации. Если `formatProvider` является `null`, игнорировать данный параметр.  
  
 Реализация <xref:System.ICustomFormatter.Format%2A> метод должен включать следующие функциональные возможности .NET Framework могут обеспечить форматирования, не поддерживают. Если метод форматирования не поддерживает формат, определить, является ли объект форматирован <xref:System.IFormattable> интерфейс. Если он вызывать <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> метода этого интерфейса. В противном случае вызов по умолчанию <xref:System.Object.ToString%2A?displayProperty=nameWithType> метода базового объекта. Следующий код иллюстрирует этот шаблон.  
  
 [!code-csharp[System.ICustomFormatter.Class#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#3)]
 [!code-vb[System.ICustomFormatter.Class#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#3)]  
  
   
  
## Examples  
 В следующем примере реализуется <xref:System.ICustomFormatter> чтобы разрешить двоичное, восьмеричные и шестнадцатеричные форматирование целых значений. Его <xref:System.ICustomFormatter.Format%2A?displayProperty=nameWithType> реализации определяет, является ли параметр format один из трех поддерживаемые строки формата («B» для двоичного файла, «O» для восьмеричный и «H» для шестнадцатеричного) и форматирует `arg` параметр соответствующим образом. В противном случае, если `arg` не `null`, он вызывает `arg` параметра <xref:System.IFormattable.ToString%2A?displayProperty=nameWithType> реализации, если он существует, или его без параметров `ToString` метод, если нет. Если значением параметра `arg` является `null`, метод возвращает <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.ICustomFormatter.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#1)]
 [!code-vb[System.ICustomFormatter.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#1)]  
  
 `BinaryFormatter` Затем можно использовать для пользовательского форматирования, передав `BinaryFormatter` объекта в виде `provider` параметр <xref:System.String.Format%2A> метода, как показано в следующем примере.  
  
 [!code-csharp[System.ICustomFormatter.Class#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.icustomformatter.class/cs/binaryformatter.cs#2)]
 [!code-vb[System.ICustomFormatter.Class#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.icustomformatter.class/vb/binaryformatter.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormattable" />
        <related type="Article" href="~/docs/standard/base-types/formatting-types.md">Типы форматирования в .NET</related>
        <related type="Article" href="~/docs/standard/base-types/composite-formatting.md">Составное форматирование</related>
      </Docs>
    </Member>
  </Members>
</Type>