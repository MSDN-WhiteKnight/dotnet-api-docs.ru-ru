<Type Name="IDisposable" FullName="System.IDisposable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="20ef4ce10ae7d883f64127d17e5c321125ea4a32" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51896551" /></Metadata><TypeSignature Language="C#" Value="public interface IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.IDisposable" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDisposable" />
  <TypeSignature Language="F#" Value="type IDisposable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет механизм для освобождения неуправляемых ресурсов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Главным образом используется этот интерфейс является освобождение неуправляемых ресурсов. Сборщик мусора автоматически освобождает память, выделенную для управляемого объекта, если этот объект больше не используется. Тем не менее не может предсказать, когда будет выполнена сборка мусора. Кроме того сборщик мусора не имеет сведений о неуправляемых ресурсов, например дескрипторов окон, или открытые файлы и потоки.  
  
 Использование <xref:System.IDisposable.Dispose%2A> метода этого интерфейса позволяет явно освобождать неуправляемые ресурсы вместе со сборщиком мусора. Пользователь объекта может вызвать этот метод, когда объект больше не нужен.  
  
> [!WARNING]
>  Это критическое изменение для добавления <xref:System.IDisposable> интерфейс к существующему классу. Поскольку существующие объекты-получатели типа не может вызвать <xref:System.IDisposable.Dispose%2A>, нельзя быть уверенным, что неуправляемые ресурсы, удерживаемые вашего типа будет распространяться.  
  
 Так как <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализации вызывается объектом-получателем типа, когда ресурсы, принадлежащие экземпляр больше не требуются, либо необходимо заключить в управляемый объект <xref:System.Runtime.InteropServices.SafeHandle> (рекомендуется), или необходимо переопределить <xref:System.Object.Finalize%2A?displayProperty=nameWithType>для освобождения неуправляемых ресурсов, в случае, если пользователь забывает вызвать <xref:System.IDisposable.Dispose%2A>.  
  
> [!IMPORTANT]
>  В .NET Framework, компилятор C++ поддерживает детерминированную утилизацию ресурсов и позволяет непосредственно реализовать <xref:System.IDisposable.Dispose%2A> метод.  
  
 Дополнительные сведения о том, как этот интерфейс и <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод используются, см. в разделе [мусора](~/docs/standard/garbage-collection/index.md) и [реализация метода Dispose](~/docs/standard/garbage-collection/implementing-dispose.md) разделы.  
  
## <a name="using-an-object-that-implements-idisposable"></a>С помощью объекта, реализующего IDisposable  
 Если ваше приложение просто использует объект, реализующий <xref:System.IDisposable> интерфейса, необходимо вызвать объекта <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализации, когда вы закончите, с его помощью. Языках программирования это можно сделать одним из двух способов:  
  
-   С помощью языка создания таких как `using` оператор в C# и Visual Basic.  
  
-   Заключение вызова метода для <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализации в `try` / `finally` блока.  
  
> [!NOTE]
>  Документация по типы, реализующие <xref:System.IDisposable> запишите этот факт и включите напоминание о необходимости вызывать его <xref:System.IDisposable.Dispose%2A> реализации.  
  
<a name="Using"></a>   
### <a name="the-c-and-visual-basic-using-statement"></a>Оператор C# и Visual Basic с помощью  
 Если ваш язык поддерживает конструкции, такие как [с помощью](~/docs/csharp/language-reference/keywords/using.md) инструкции на языке C# и [Using](~/docs/visual-basic/language-reference/statements/using-statement.md) инструкции в Visual Basic можно использовать его вместо явного вызова <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> самостоятельно. В следующем примере используется этот подход, при определении `WordCount` класс, который сохраняет сведения о файле и количество слов в нем.  
  
 [!code-csharp[System.IDisposable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling1.cs#1)]
 [!code-vb[System.IDisposable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling1.vb#1)]  
  
 `using` Инструкция является фактически синтаксического удобства. Во время компиляции, языковой компилятор реализует промежуточный язык (IL) для `try` / `finally` блока.  
  
 Дополнительные сведения о `using` инструкции, см. в разделе [Оператор Using](~/docs/visual-basic/language-reference/statements/using-statement.md) или [инструкцией](~/docs/csharp/language-reference/keywords/using-statement.md) разделы.  
  
### <a name="the-tryfinally-block"></a>Блок Try/Finally  
 Если язык программирования не поддерживает конструкцию как `using` оператор в C# или Visual Basic, или если вы не хотите использовать его, можно вызвать <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализации от `finally` блока `try` / `finally` инструкции. В следующем примере заменяется `using` блока в предыдущем примере с `try` / `finally` блока.  
  
 [!code-csharp[System.IDisposable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/calling2.cs#2)]
 [!code-vb[System.IDisposable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/calling2.vb#2)]  
  
 Дополнительные сведения о `try` / `finally` шаблонов, см. в разделе [попробуйте... CATCH... Оператор Finally](~/docs/visual-basic/language-reference/statements/try-catch-finally-statement.md), [try-finally](~/docs/csharp/language-reference/keywords/try-finally.md), или [оператор try-finally](https://msdn.microsoft.com/library/514400c1-c322-4bf3-9e48-3047240b8a82).  
  
## <a name="implementing-idisposable"></a>Использование IDisposable  
 Следует реализовать <xref:System.IDisposable> только в том случае, если ваш тип использует неуправляемые ресурсы, напрямую. Потребители типа могут вызвать ваш <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> реализации для освобождения ресурсов, в том случае, если экземпляр больше не нужен. Для обработки случаев, в которых они не удастся вызвать <xref:System.IDisposable.Dispose%2A>, следует использовать либо класс, производный от <xref:System.Runtime.InteropServices.SafeHandle> программы-оболочки неуправляемые ресурсы, или вы должны переопределять <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод для ссылочного типа. В любом случае используйте <xref:System.IDisposable.Dispose%2A> метод для выполнения любой очистки необходим после использования неуправляемых ресурсов, например удалением, высвобождением или сбросом неуправляемых ресурсов.  
  
> [!IMPORTANT]
>  При определении базового класса, использующий неуправляемые ресурсы и, либо, или может оказать подклассов, которые должны быть освобождены, следует реализовать <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType> метод и предоставить вторая перегрузка `Dispose`, как описано в следующем раздел.  
  
<a name="BaseClasses"></a>   
## <a name="idisposable-and-the-inheritance-hierarchy"></a>IDisposable и иерархию наследования  
 Базовый класс с подклассами, которые должны быть освобождаемыми должен реализовывать <xref:System.IDisposable> следующим образом. При реализации этого шаблона следует использовать <xref:System.IDisposable> на любой тип, который не `sealed` (`NotInheritable` в Visual Basic).  
  
-   Он должен предоставлять один открытый невиртуальный <xref:System.IDisposable.Dispose> метод и защищенный виртуальный `Dispose(Boolean disposing)` метод.  
  
-   <xref:System.IDisposable.Dispose> Необходимо вызвать метод `Dispose(true)` и следует подавления финализации для производительности.  
  
-   базовый тип не должен включать никакие методы завершения.  
  
 В следующем фрагменте кода отражает удаляемости для базовых классов. Предполагается, что тип не переопределяет <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод.  
  
 [!code-csharp[System.IDisposable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base1.cs#3)]
 [!code-vb[System.IDisposable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base1.vb#3)]  
  
 При переопределении <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод, класс следует реализовать следующий шаблон.  
  
 [!code-csharp[System.IDisposable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/base2.cs#5)]
 [!code-vb[System.IDisposable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/base2.vb#5)]  
  
 Подклассы должны реализовывать удаляемость следующим образом:  
  
-   они должны переопределять `Dispose(Boolean)` и вызвать реализацию `Dispose(Boolean)` базового класса;  
  
-   при необходимости они могут предоставлять метод завершения. Метод завершения должен вызвать `Dispose(false)`.  
  
 Обратите внимание, что производные классы не сами реализуют <xref:System.IDisposable> интерфейс и не используйте конструктор без параметров <xref:System.IDisposable.Dispose%2A> метод. Они только переопределить базовый класс `Dispose(Boolean)` метод.  
  
 В следующем фрагменте кода отражает шаблона удаления для производных классов. Предполагается, что тип не переопределяет <xref:System.Object.Finalize%2A?displayProperty=nameWithType> метод.  
  
 [!code-csharp[System.IDisposable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.idisposable/cs/derived1.cs#4)]
 [!code-vb[System.IDisposable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.idisposable/vb/derived1.vb#4)]  
  
   
  
## Examples  
 Следующий пример демонстрирует создание класса ресурсов, который реализует <xref:System.IDisposable> интерфейс.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:Microsoft.Win32.SafeHandles.SafeFileHandle" />
    <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Реализация метода Dispose</related>
  </Docs>
  <Members>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IDisposable.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit" Usage="iDisposable.Dispose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Выполняет определяемые приложением задачи, связанные с удалением, высвобождением или сбросом неуправляемых ресурсов.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод для закрытия или высвобождения неуправляемых ресурсов, например файлы, потоки и обработчики, занятые экземплярами класса, который реализует этот интерфейс. По соглашению, этот метод используется для всех задач, связанных с высвобождением ресурсов объектом, или подготовкой объекта к для повторного использования.  
  
> [!WARNING]
>  Если вы используете класс, реализующий <xref:System.IDisposable> интерфейса, необходимо вызвать его <xref:System.IDisposable.Dispose%2A> реализации, когда вы закончите, с помощью класса. Дополнительные сведения см. в разделе «Использование объекта, реализующего IDisposable» <xref:System.IDisposable> раздела.  
  
 При реализации этого метода убедитесь, что все занятые ресурсы освобождаются путем передачи вызова по иерархии вложений. Например, если объект А размещает объект B, а объект B размещает объекта C, А затем <xref:System.IDisposable.Dispose%2A> реализация должна вызывать <xref:System.IDisposable.Dispose%2A> на B, который в свою очередь вызывают <xref:System.IDisposable.Dispose%2A> в C.  
  
> [!IMPORTANT]
>  Компилятор C++ поддерживает детерминированную утилизацию ресурсов и позволяет непосредственно реализовать <xref:System.IDisposable.Dispose%2A> метод.  
  
 Необходимо также вызвать объект <xref:System.IDisposable.Dispose%2A> метод его базового класса, если базовый класс реализует <xref:System.IDisposable>. Дополнительные сведения о реализации <xref:System.IDisposable> на базовый класс и его подклассов, см. в разделе «IDisposable и иерархию наследования» <xref:System.IDisposable> раздела.  
  
 Если объекта <xref:System.IDisposable.Dispose%2A> был вызван несколько раз, то объект должен игнорировать все вызовы после первого. Объект не должен создания исключения, если его <xref:System.IDisposable.Dispose%2A> был вызван несколько раз. Методы экземпляра отличное от <xref:System.IDisposable.Dispose%2A> может вызвать исключение <xref:System.ObjectDisposedException> при ресурсы уже удален.  
  
 Тип ресурса для использования конкретного соглашения для обозначения состоянии выделенных и освобожденных состояния могут рассчитывать пользователи. Примером этого являются классы потоков, которые обычно считаются открытыми или закрытыми. Средство реализации класса, который имеет такое соглашение об можно реализовать открытый метод с заданным именем, например `Close`, которое вызывает <xref:System.IDisposable.Dispose%2A> метод.  
  
 Так как <xref:System.IDisposable.Dispose%2A> метод должен вызываться явным образом, всегда есть опасность, что неуправляемые ресурсы не будет освобожден, так как пользователь объекта не может вызывать его <xref:System.IDisposable.Dispose%2A> метод. Чтобы избежать этого двумя способами:  
  
-   Перенос управляемых ресурсов в объект, производный от <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType>. Ваш <xref:System.IDisposable.Dispose%2A> реализации затем вызывается <xref:System.IDisposable.Dispose%2A> метод <xref:System.Runtime.InteropServices.SafeHandle?displayProperty=nameWithType> экземпляров. Дополнительные сведения см. раздел «В качестве альтернативы SafeHandle» в <xref:System.Object.Finalize%2A?displayProperty=nameWithType> разделе.  
  
-   Реализуйте метод завершения, чтобы освободить ресурсы при <xref:System.IDisposable.Dispose%2A> не вызывается. По умолчанию сборщик мусора автоматически вызывает финализатор объекта до освобождения его памяти. Тем не менее если <xref:System.IDisposable.Dispose%2A> метод был является обычно требуется сборщику мусора вызывать метод завершения удаленного объекта. Для предотвращения автоматического завершения <xref:System.IDisposable.Dispose%2A> реализации можно вызывать <xref:System.GC.SuppressFinalize%2A?displayProperty=nameWithType> метод.  
  
 При использовании объекта, который обращается к неуправляемым ресурсам, например <xref:System.IO.StreamWriter>, хорошей практикой является создание экземпляра с `using` инструкции. `using` Инструкция автоматически закрывает поток и вызовы <xref:System.IDisposable.Dispose%2A> объекта после завершения кода, который ее использует. Например, см. в разделе <xref:System.IO.StreamWriter> класса.  
  
   
  
## Examples  
 В следующем примере показано, как можно реализовать <xref:System.IDisposable.Dispose%2A> метод.  
  
 [!code-cpp[System.IDisposable.Dispose Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CPP/idisposabledispose.cpp#1)]
 [!code-csharp[System.IDisposable.Dispose Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/CS/idisposabledispose.cs#1)]
 [!code-vb[System.IDisposable.Dispose Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.IDisposable.Dispose Example/VB/idisposabledispose.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/garbage-collection/implementing-dispose.md">Реализация метода Dispose</related>
      </Docs>
    </Member>
  </Members>
</Type>