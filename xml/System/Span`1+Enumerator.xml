<Type Name="Span&lt;T&gt;+Enumerator" FullName="System.Span&lt;T&gt;+Enumerator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8db3ea28a1d9a0978e920cadf33fbf54a25ae036" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56377614" /></Metadata><TypeSignature Language="C#" Value="public struct Span&lt;T&gt;.Enumerator" />
  <TypeSignature Language="ILAsm" Value=".class nested public sequential ansi sealed beforefieldinit Span`1/Enumerator&lt;T&gt; extends System.ValueType" />
  <TypeSignature Language="DocId" Value="T:System.Span`1.Enumerator" />
  <TypeSignature Language="VB.NET" Value="Public Structure Span(Of T).Enumerator" />
  <TypeSignature Language="C++ CLI" Value="public: value class Span&lt;T&gt;::Enumerator" />
  <TypeSignature Language="F#" Value="type Span&lt;'T&gt;.Enumerator = struct" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T" />
  </TypeParameters>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.2;netcore-2.1;netcore-3.0">
      <AttributeName>System.Runtime.CompilerServices.IsByRefLike</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет перечислитель для элементов <see cref="T:System.Span`1" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  

C# [foreach](~/docs/csharp/language-reference/keywords/foreach-in.md) языка C# и [для каждого... Далее](~/docs/visual-basic/language-reference/statements/for-each-next-statement.md) конструкция в Visual Basic скрывает сложность перечислителей. Вместо непосредственного использования перечислителя, с помощью `foreach` или `For Each...Next` рекомендуется. 

Изначально перечислитель располагается перед первым элементом в <xref:System.Span%601>. В этой позиции значение свойства <xref:System.Span%601.Enumerator.Current> не определено. Необходимо вызвать <xref:System.Span%601.Enumerator.MoveNext%2A> Чтобы переместить перечислитель к первому элементу в <xref:System.Span%601> до считывания значения свойства <xref:System.Span%601.Enumerator.Current>.

<xref:System.Span%601.Enumerator.Current> Возвращает значение до <xref:System.Span%601.Enumerator.MoveNext%2A> вызывается. <xref:System.Span%601.Enumerator.MoveNext%2A> Задает <xref:System.Span%601.Enumerator.Current> к следующему элементу в <xref:System.Span%601>.

Если <xref:System.Span%601.Enumerator.MoveNext%2A> выходит за границы <xref:System.Span%601>, <xref:System.Span%601.Enumerator.MoveNext%2A> возвращает `false`. Когда перечислитель находится в этом состоянии, последующие вызовы <xref:System.Span%601.Enumerator.MoveNext%2A> также возвращать `false` и <xref:System.Span%601.Enumerator.Current> не определено. Невозможно задать <xref:System.Span%601.Enumerator.Current> к первому элементу в <xref:System.Span%601> снова; вместо этого следует создать новый экземпляр перечислителя. 

Перечислитель не имеет монопольного доступа к <xref:System.Span%601>. Кроме того могут быть изменены базовых данных, на котором основывается диапазон. Таким образом, перечисление диапазон само по себе не является потокобезопасной процедурой. Для обеспечения потокобезопасности при перечислении, необходимо реализовать собственную синхронизацию. Например следующий код имеет условие конкуренции. Не гарантирует, что диапазон будут перечислены перед `ClearContents` выполнения метода. Таким образом базовый массив очищается при перечислении диапазона:

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/nosync/program.cs)]

Если синхронизировать доступ к массиву перед перечислением диапазона, как измененная версия `EnumerateSpan` делает метод в следующем примере `ClearContents` метод не изменяет базовые span данные во время перечисления. Обратите внимание, что пример блокирует базовый массив, на котором основывается диапазон.  

[!code-csharp[System.Span<T>.Enumerator-no-synchronization](~/samples/snippets/csharp/api/system/span.enumerator/sync/program.cs#1)]

В отличие от некоторых других структур перечислитель в .NET <xref:System.Span%601.Enumerator>:

- Не реализует <xref:System.Collections.IEnumerator> или <xref:System.Collections.Generic.IEnumerator%601> интерфейс. Это обусловлено <xref:System.Span%601.Enumerator> — [структура ссылки](~/docs/csharp/reference-semantics-with-value-types.md#ref-struct-type).

- Не включает `Reset` метод, который можно задать перечислитель в исходное положение перед первым элементом в элементе управления span. ( <xref:System.Collections.IEnumerator.Reset?displayProperty=nameWithType> Метод должен быть реализован как часть интерфейса, но большинство средства реализации исключение или нет реализации.) 
 
      ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public T Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance !T Current" />
      <MemberSignature Language="DocId" Value="P:System.Span`1.Enumerator.Current" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Current As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property T % Current { T % get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : " Usage="System.Span&lt;'T&gt;.Enumerator.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает ссылку на элемент в текущей позиции перечислителя.</summary>
        <value>Элемент коллекции <see cref="T:System.Span`1" />, находящийся в текущей позиции перечислителя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  

`Current` не определено в рамках одного из следующих условий: 

- Сразу после создания перечислителя, перечислитель располагается перед первым элементом в элементе управления span. <xref:System.Span%601.Enumerator.MoveNext%2A> необходимо вызвать, чтобы переместить перечислитель к первому элементу диапазона до считывания значения свойства `Current`.

- Последнего вызова <xref:System.Span%601.Enumerator.MoveNext%2A> возвращается `false`, который указывает конец диапазона. 

`Current` Возвращает значение до <xref:System.Span%601.Enumerator.MoveNext%2A> вызывается. <xref:System.Span%601.Enumerator.MoveNext%2A> Задает `Current` к следующему элементу в диапазоне. 

      ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveNext">
      <MemberSignature Language="C#" Value="public bool MoveNext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool MoveNext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Span`1.Enumerator.MoveNext" />
      <MemberSignature Language="VB.NET" Value="Public Function MoveNext () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool MoveNext();" />
      <MemberSignature Language="F#" Value="member this.MoveNext : unit -&gt; bool" Usage="enumerator.MoveNext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Перемещает перечислитель к следующему элементу <see cref="System.Span`1" />.</summary>
        <returns>`true`, если перечислитель успешно перемещен к следующему элементу; `false`, если пройден конец диапазона.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Вновь созданный перечислитель располагается перед первым элементом в диапазон и первый вызов `MoveNext` перемещает перечислитель к первому элементу в диапазоне. 

Если `MoveNext` выходит за границы диапазона, `MoveNext` возвращает `false`. Когда перечислитель находится в этом состоянии, последующие вызовы `MoveNext` также возвращать `false`.

         ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>