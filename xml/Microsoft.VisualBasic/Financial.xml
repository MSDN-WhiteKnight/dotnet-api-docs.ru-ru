<Type Name="Financial" FullName="Microsoft.VisualBasic.Financial">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8511747393acaa47d3cd5482ba9cb12ae3010583" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55390820" /></Metadata><TypeSignature Language="C#" Value="public sealed class Financial" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed Financial extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.VisualBasic.Financial" />
  <TypeSignature Language="VB.NET" Value="Public Module Financial" />
  <TypeSignature Language="C++ CLI" Value="public ref class Financial sealed" />
  <TypeSignature Language="F#" Value="type Financial = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.VisualBasic</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
    <AssemblyVersion>10.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Microsoft.VisualBasic.CompilerServices.StandardModule</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>В модуле <see langword="Financial" /> содержатся процедуры, используемые для выполнения финансовых операций.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот модуль поддерживает члены библиотеки времени выполнения Visual Basic, которые выполняют финансовые расчеты, например амортизации, текущие и будущие значения, процентные ставки, скорость возврата и платежей.  
  
   
  
## Examples  
 В этом примере используется `Rate` функцию для расчета процентной ставки ссуды, учитывая общее количество платежей (`TotPmts`), сумма платежа ссуды (`Payment`), текущее значение или основная ссуды (`PVal`), будущее значение ссуды (`FVal`), число, определяющее платеж — в начале или в конце периода оплаты (`PayType`) и приблизительное ожидаемый процентную ставку (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/keywords/index.md">Ключевые слова (Visual Basic)</related>
    <related type="Article" href="~/docs/visual-basic/language-reference/runtime-library-members.md">Члены библиотеки времени выполнения Visual Basic</related>
  </Docs>
  <Members>
    <Member MemberName="DDB">
      <MemberSignature Language="C#" Value="public static double DDB (double Cost, double Salvage, double Life, double Period, double Factor = 2);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 DDB(float64 Cost, float64 Salvage, float64 Life, float64 Period, float64 Factor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function DDB (Cost As Double, Salvage As Double, Life As Double, Period As Double, Optional Factor As Double = 2) As Double" />
      <MemberSignature Language="F#" Value="static member DDB : double * double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.DDB (Cost, Salvage, Life, Period, Factor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
        <Parameter Name="Factor" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Обязательный. Начальная стоимость актива.</param>
        <param name="Salvage">Обязательный. Стоимость актива на момент окончания срока его эксплуатации.</param>
        <param name="Life">Обязательный. Срок эксплуатации актива.</param>
        <param name="Period">Обязательный. Период расчета амортизации актива.</param>
        <param name="Factor">Необязательный параметр. Коэффициент уменьшения остатка. Если значение не указано, то предполагается 2 (метод двойного уменьшения остатка).</param>
        <summary>Возвращает значение, определяющее амортизацию актива за указанный период времени с помощью метода двойного уменьшения остатка или другого указанного метода.</summary>
        <returns>Значение, определяющее амортизацию актива за указанный период времени с помощью метода двойного уменьшения остатка или другого указанного метода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод двойного уменьшения остатка вычисляет амортизацию ускоренному. Амортизация максимальна в первый период и уменьшается в последующие периоды.  
  
 `Life` И `Period` аргументы должны быть выражены в одинаковых единицах. Например если `Life` задается в месяцах, `Period` также должен быть задан в месяцах. Все аргументы должны быть положительными числами.  
  
 `DDB` Функция использует следующую формулу для расчета амортизации в течение заданного периода:  
  
 Амортизации / Period = ((Cost-Salvage) * коэффициент) / жизнь  
  
   
  
## Examples  
 В этом примере используется `DDB` функция, возвращающая амортизацию актива за указанный период начальная стоимость (`InitCost`), стоимость по окончании срока службы актива (`SalvageVal`), всего жизненного цикла актива в годах (`LifeTime`) и период в годах, для которых вычисляется амортизации (`Depr`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Factor" /> &lt;= 0, <paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &lt;= 0 или <paramref name="Period" /> &gt; <paramref name="Life." /></exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="FV">
      <MemberSignature Language="C#" Value="public static double FV (double Rate, double NPer, double Pmt, double PV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 FV(float64 Rate, float64 NPer, float64 Pmt, float64 PV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.FV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function FV (Rate As Double, NPer As Double, Pmt As Double, Optional PV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member FV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.FV (Rate, NPer, Pmt, PV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Процентная ставка за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="NPer">Обязательный. Общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов выплат будет равно 4 x 12 (или 48).</param>
        <param name="Pmt">Обязательный. Платеж за каждый период. Обычно платежи содержат основную сумму и проценты, которые не изменяются на протяжении периода действия аннуитета.</param>
        <param name="PV">Необязательный параметр. Приведенная (нынешняя) стоимость, или общая сумма, равноценная на данный момент серии будущих выплат. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <see langword="DueDate.EndOfPeriod" />, если выплаты должны производиться в конце периода, либо <see langword="DueDate.BegOfPeriod" /> в случае оплаты в начале периода. Если этот аргумент опущен, используется <see langword="DueDate.EndOfPeriod" />.</param>
        <summary>Возвращает значение, указывающее будущее значение аннуитета, рассчитываемого на основе периодических фиксированных выплат и постоянной процентной ставки.</summary>
        <returns>Будущее значение аннуитета, рассчитываемое на основе периодических фиксированных выплат и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитета представляет собой ряд фиксированных денежных выплат со временем. Это может быть ссуды (например, ипотеки) или инвестиции (например, План энергосбережения, ежемесячно).  
  
 `Rate` И `NPer` нужно вычислять с помощью периодов выплат, выраженный в единицах. Например если `Rate` вычисляется с использованием месяцев, `NPer` должен также быть выражен в месяцах.  
  
 Все аргументы выплаченные (например, вклады на сберегательный счет) представляются отрицательными числами; полученных (например, дивиденды) наличных денег, представленного положительных чисел.  
  
   
  
## Examples  
 В этом примере используется `FV` функция, возвращающая будущее значение инвестиции процент скорости, начисляемые за период (`APR / 12`), общее число платежей (`TotPmts`), платеж (`Payment`), текущее значение инвестиции (`PVal`) и число, указывающее, производится ли Оплата в начале или в конце периода оплаты (`PayType`). Обратите внимание, что поскольку `Payment` представляет размер, он является отрицательным числом.  
  
 [!code-vb[VbVbalrMath#22](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#22)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="IPmt">
      <MemberSignature Language="C#" Value="public static double IPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function IPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member IPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.IPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Процентная ставка за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="Per">Обязательный. Расчетный период в интервале от 1 до <paramref name="NPer" />.</param>
        <param name="NPer">Обязательный. Общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов выплат будет равно 4 x 12 (или 48).</param>
        <param name="PV">Обязательный. Значение, задающее текущую сумму (или значение на сегодняшний день) серии будущих платежей или поступлений. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный параметр. Значение, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение, определяющее процентный платеж аннуитета, рассчитываемый на основе периодических фиксированных выплат и постоянной процентной ставки.</summary>
        <returns>Процентный платеж аннуитета, рассчитываемый на основе периодических фиксированных выплат и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитета представляет собой ряд фиксированных денежных выплат со временем. Это может быть ссуды (например, ипотеки) или инвестиции (например, План энергосбережения, ежемесячно).  
  
 `Rate` И `NPer` нужно вычислять с помощью периодов выплат, выраженный в единицах. Например если `Rate` вычисляется с использованием месяцев, `NPer` должен также быть выражен в месяцах.  
  
 Все аргументы выплаченные (например, вклады на сберегательный счет) представляются отрицательными числами; полученных (например, дивиденды) наличных денег, представленного положительных чисел.  
  
   
  
## Examples  
 В этом примере используется `IPmt` функцию для подсчета, сколько платежа процент при всех платежей имеют одинаковые значения. Приведены процентная ставка за период (`APR / 12`), расчетный период, для которого запрашиваются по процентам (`Period`), общее число платежей (`TotPmts`), текущее значение или основная ссуды (`PVal`), будущее значение ссуды (`FVal`) и число, определяющее платеж — в начале или в конце периода оплаты (`PayType`).  
  
 [!code-vb[VbVbalrMath#26](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#26)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;= 0 или <paramref name="Per" /> &gt; <paramref name="NPer" /></exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="IRR">
      <MemberSignature Language="C#" Value="public static double IRR (ref double[] ValueArray, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 IRR(float64[]&amp; ValueArray, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function IRR (ByRef ValueArray As Double(), Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member IRR :  * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.IRR (ValueArray, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Обязательный. Массив значений типа <see langword="Double" />, определяющий значения денежных операций. Этот массив должен содержать по крайней мере одно отрицательное значение (платеж) и одно положительное значение (поступление).</param>
        <param name="Guess">Необязательный параметр. Объект, задающий значение, которое будет возвращено функцией <see langword="IRR" />. Если этот параметр опущен, используется значение <paramref name="Guess" />, равное 0,1 (10 процентам).</param>
        <summary>Возвращает значение, определяющее внутреннюю ставку доходности для ряда периодических денежных потоков (платежей и поступлений).</summary>
        <returns>Внутренняя ставка доходности для ряда периодических денежных потоков (платежей и поступлений).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Внутреннюю ставку доходности — это процентная ставка, полученную от вложений, состоящий из выплат и поступлений, которые встречаются с регулярными интервалами.  
  
 `IRR` Функция использует порядок значений в массиве для интерпретации порядок выплат и поступлений. Убедитесь в том, что ваши значения платежей и поступлений в правильной последовательности. Денежному потоку для каждого периода не должны быть исправлены, как для ежегодного платежа.  
  
 `IRR` вычисляется путем итерации. Начиная со значением `Guess`, `IRR` циклов вычисления, пока не получит результат с точностью 0,00001 процента. Если `IRR` не удается найти результат после 20 попыток, он завершается.  
  
   
  
## Examples  
 В этом примере `IRR` функция возвращает внутреннюю ставку доходности для ряда пять денежных потоков, содержащихся в массиве `Values()`. Первый элемент массива является отрицательным движения денежных средств, представляющей собой затраты на бизнес. Остальные четыре денежных потоков представляют положительные денежные потоки для последующих четырех лет. `Guess` — Это предполагаемое внутреннюю ставку доходности.  
  
 [!code-vb[VbVbalrMath#20](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#20)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимые значения аргументов массива, или <paramref name="Guess" /> &lt;= –1.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="MIRR">
      <MemberSignature Language="C#" Value="public static double MIRR (ref double[] ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 MIRR(float64[]&amp; ValueArray, float64 FinanceRate, float64 ReinvestRate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function MIRR (ByRef ValueArray As Double(), FinanceRate As Double, ReinvestRate As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double MIRR(cli::array &lt;double&gt; ^ % ValueArray, double FinanceRate, double ReinvestRate);" />
      <MemberSignature Language="F#" Value="static member MIRR :  * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.MIRR (ValueArray, FinanceRate, ReinvestRate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
        <Parameter Name="FinanceRate" Type="System.Double" />
        <Parameter Name="ReinvestRate" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="ValueArray">Обязательный. Массив значений типа <see langword="Double" />, определяющий значения денежных операций. Этот массив должен содержать по крайней мере одно отрицательное значение (платеж) и одно положительное значение (поступление).</param>
        <param name="FinanceRate">Обязательный. Значение, определяющее процентную ставку оплаты как стоимость финансирования.</param>
        <param name="ReinvestRate">Обязательный. Значение, определяющее процентную ставку доходов от реинвестирования денежных средств.</param>
        <summary>Возвращает значение, определяющее внутреннюю ставку доходности для ряда периодических денежных потоков (платежей и поступлений).</summary>
        <returns>Измененная внутренняя ставка доходности для ряда периодических денежных потоков (платежей и поступлений).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Внутреннюю ставку доходности при внутреннюю ставку доходности платежей и поступлений подсчитываются с разной скоростью. `MIRR` Функции учитывается как стоимость инвестиций (`FinanceRate`) и процентную ставку реинвестирования денежных средств (`ReinvestRate`).  
  
 `FinanceRate` И `ReinvestRatearguments` являются процентными значениями, выраженное как десятичные значения. Например 12 процентов задаются как 0,12.  
  
 `MIRR` Функция использует порядок значений в массиве для интерпретации порядок выплат и поступлений. Убедитесь в том, что ваши значения платежей и поступлений в правильной последовательности.  
  
   
  
## Examples  
 В этом примере используется `MIRR` функция возвращает измененную внутреннюю норму прибыли для денежных потоков, содержащихся в массиве `Values()`. `LoanAPR` представляет интерес финансирования, и `InvAPR` представляет процентную ставку реинвестирования процентов.  
  
 [!code-vb[VbVbalrMath#29](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ранг <paramref name="ValueArray" /> не равен 1, <paramref name="FinanceRate" /> =-1, или <paramref name="ReinvestRate" /> =-1</exception>
        <exception cref="T:System.DivideByZeroException">Произошло деление на ноль.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
        <altmember cref="T:System.ArgumentException" />
        <altmember cref="T:System.DivideByZeroException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="NPer">
      <MemberSignature Language="C#" Value="public static double NPer (double Rate, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPer(float64 Rate, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPer(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPer (Rate As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member NPer : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPer (Rate, Pmt, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Процентная ставка за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="Pmt">Обязательный. Платеж за каждый период. Обычно платежи содержат основную сумму и проценты, которые не изменяются на протяжении периода действия аннуитета.</param>
        <param name="PV">Обязательный. Значение, задающее текущую сумму (или значение на сегодняшний день) серии будущих платежей или поступлений. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный параметр. Значение, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение, определяющее число периодов выплат аннуитета, рассчитываемое на основе периодических фиксированных платежей и постоянной процентной ставки.</summary>
        <returns>Число периодов выплат аннуитета, рассчитываемое на основе периодических фиксированных платежей и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитета представляет собой ряд основных наличные платежи за период времени. Это может быть ссуды (например, ипотеки) или инвестиции (например, План энергосбережения, ежемесячно).  
  
 Все аргументы выплаченные (например, вклады на сберегательный счет) представляются отрицательными числами; полученных (например, дивиденды) наличных денег, представленного положительных чисел.  
  
   
  
## Examples  
 В этом примере используется `NPer` функция, возвращающая число периодов, в течение которых должны быть сделаны платежи для погашения ссуды, значение которого содержится в `PVal`. Задаются процентная ставка за период (`APR / 12`), платеж (`Payment`), будущее значение ссуды (`FVal`) и число, определяющее платеж — в начале или в конце периода оплаты (`PayType`).  
  
 [!code-vb[VbVbalrMath#19](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Rate" /> = 0 и <paramref name="Pmt" /> = 0</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="NPV">
      <MemberSignature Language="C#" Value="public static double NPV (double Rate, ref double[] ValueArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 NPV(float64 Rate, float64[]&amp; ValueArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.NPV(System.Double,System.Double[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NPV (Rate As Double, ByRef ValueArray As Double()) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double NPV(double Rate, cli::array &lt;double&gt; ^ % ValueArray);" />
      <MemberSignature Language="F#" Value="static member NPV : double *  -&gt; double" Usage="Microsoft.VisualBasic.Financial.NPV (Rate, ValueArray)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="ValueArray" Type="System.Double[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Представленное в виде десятичного числа значение, задающее размер учетной ставки за период времени.</param>
        <param name="ValueArray">Обязательный. Массив значений типа <see langword="Double" />, определяющий значения денежных операций. Этот массив должен содержать по крайней мере одно отрицательное значение (платеж) и одно положительное значение (поступление).</param>
        <summary>Возвращает значение, определяющее величину чистой приведенной стоимости инвестирования на основе ряда периодических денежных потоков (платежей и поступлений) и учетной ставки.</summary>
        <returns>Значение, определяющее величину чистой приведенной стоимости инвестирования на основе ряда периодических денежных потоков (платежей и поступлений) и учетной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чистую приведенную стоимость вложений — это текущее значение ряд будущих выплат и поступлений.  
  
 `NPV` Функция использует порядок значений в массиве для интерпретации порядок выплат и поступлений. Убедитесь в том, что ваши значения платежей и поступлений в правильной последовательности.  
  
 `NPV` Вложений начинается за один период до даты первого значения денежных и заканчивается последней значение денежного потока в массиве.  
  
 Расчет чистой приведенной стоимости основан на будущих денежных потоков. В случае первого денежные потоки в начале первого периода необходимо добавить первое значение для значения, возвращенного `NPV` и не должны быть включены в значениях денежных `ValueArray`.  
  
 `NPV` Функция аналогична `PV` функции (текущее значение), за исключением случаев, `PV` функция позволяет денежных потоков начать, либо в конце и начале периода. В отличие от переменной `NPV` значений денежных `PV` денежных потоков должны быть исправлены на протяжении капиталовложения.  
  
   
  
## Examples  
 В этом примере используется `NPV` функция возвращает чистую приведенную стоимость для ряда денежных потоков, содержащихся в массиве `values()`. Возвращаемое значение, сохраненное в `FixedRetRate`, представляющий предопределенной внутреннюю ставку доходности.  
  
 [!code-vb[VbVbalrMath#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Значение <paramref name="ValueArray" /> равно <see langword="Nothing" />, ранг <paramref name="ValueArray" /> &lt;&gt; 1, или <paramref name="Rate" /> = –1</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.IRR(System.Double[]@,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.MIRR(System.Double[]@,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="Pmt">
      <MemberSignature Language="C#" Value="public static double Pmt (double Rate, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Pmt(float64 Rate, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Pmt(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function Pmt (Rate As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member Pmt : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.Pmt (Rate, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Процентная ставка за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="NPer">Обязательный. Общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов выплат будет равно 4 * 12 (или 48).</param>
        <param name="PV">Обязательный. Значение, определяющее текущую стоимость (или общую сумму) платежей, которые должны быть уплачены в будущем. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный параметр. Значение, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение, определяющее платеж по аннуитету на основе периодических фиксированных платежей и постоянной процентной ставки.</summary>
        <returns>Платеж по аннуитету на основе периодических фиксированных платежей и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитета представляет собой ряд фиксированных денежных выплат за период времени. Это может быть ссуды (например, ипотеки) или инвестиции (например, План энергосбережения, ежемесячно).  
  
 `Rate` И `NPer` нужно вычислять с помощью периодов выплат, выраженный в единицах. Например если `Rate` вычисляется с использованием месяцев, `NPer` должен также быть выражен в месяцах.  
  
 Все аргументы выплаченные (например, вклады на сберегательный счет) представляются отрицательными числами; полученных (например, дивиденды) наличных денег, представленного положительных чисел.  
  
   
  
## Examples  
 В этом примере используется `Pmt` функция, возвращающая ежемесячного платежа по кредиту за фиксированный период. Приведены процентная ставка за период (`APR / 12`), общее число платежей (`TotPmts`), текущее значение или основная ссуды (`PVal`), будущее значение ссуды (`FVal`) и число, указывающее ли Платежи осуществляются в начале или в конце периода оплаты `(PayType).`  
  
 [!code-vb[VbVbalrMath#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> = 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="PPmt">
      <MemberSignature Language="C#" Value="public static double PPmt (double Rate, double Per, double NPer, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PPmt(float64 Rate, float64 Per, float64 NPer, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PPmt(System.Double,System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PPmt (Rate As Double, Per As Double, NPer As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PPmt : double * double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PPmt (Rate, Per, NPer, PV, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="Per" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Процентная ставка за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="Per">Обязательный. Расчетный период в интервале от 1 до <paramref name="NPer" />.</param>
        <param name="NPer">Обязательный. Общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов выплат будет равно 4 x 12 (или 48).</param>
        <param name="PV">Обязательный. Текущее значение из серии будущих платежей или поступлений. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный параметр. Значение, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение, определяющее главный платеж аннуитета, рассчитываемый на основе периодических фиксированных выплат и постоянной процентной ставки.</summary>
        <returns>Главный платеж аннуитета, рассчитываемый на основе периодических фиксированных выплат и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитета представляет собой ряд основных наличные платежи за период времени. Это может быть ссуды (например, ипотеки) или инвестиции (например, План энергосбережения, ежемесячно).  
  
 `Rate` И `NPer` нужно вычислять с помощью периодов выплат, выраженный в единицах. Например если `Rate` вычисляется с использованием месяцев, `NPer` должен также быть выражен в месяцах.  
  
 Все аргументы выплаченные (например, вклады на сберегательный счет) представляются отрицательными числами; полученных (например, дивиденды) наличных денег, представленного положительных чисел.  
  
   
  
## Examples  
 В этом примере используется `PPmt` функцию для подсчета, какая часть оплаты за определенный период является основным сервером при всех платежей одинаковы. Приведены процентная ставка за период (`APR / 12`), расчетный период, для которого требуется основной части (`Period`), общее число платежей (`TotPmts`), текущее значение или основная ссуды (`PVal`), будущее значение ссуды (`FVal`) и число, определяющее платеж — в начале или в конце периода оплаты (`PayType`).  
  
 [!code-vb[VbVbalrMath#24](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#24)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Per" /> &lt;=0 или <paramref name="Per" /> &gt; <paramref name="NPer" />.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="PV">
      <MemberSignature Language="C#" Value="public static double PV (double Rate, double NPer, double Pmt, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 PV(float64 Rate, float64 NPer, float64 Pmt, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.PV(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate)" />
      <MemberSignature Language="VB.NET" Value="Public Function PV (Rate As Double, NPer As Double, Pmt As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod) As Double" />
      <MemberSignature Language="F#" Value="static member PV : double * double * double * double * Microsoft.VisualBasic.DueDate -&gt; double" Usage="Microsoft.VisualBasic.Financial.PV (Rate, NPer, Pmt, FV, Due)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Rate" Type="System.Double" />
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
      </Parameters>
      <Docs>
        <param name="Rate">Обязательный. Процентная ставка за период. Например, при взятии ссуды на автомобиль под годовую процентную ставку (APR) размером 10% с ежемесячными выплатами ставка за период равна отношению 0,1/12 или 0,0083.</param>
        <param name="NPer">Обязательный. Общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет количество периодов выплат будет равно 4 * 12 (или 48).</param>
        <param name="Pmt">Обязательный. Платеж за каждый период. Обычно платежи содержат основную сумму и проценты, которые не изменяются на протяжении периода действия аннуитета.</param>
        <param name="FV">Необязательный параметр. Значение, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <summary>Возвращает значение, определяющее текущее значение аннуитета на основе фиксированных периодических платежей и постоянной процентной ставки.</summary>
        <returns>Текущее значение аннуитета на основе фиксированных периодических платежей и постоянной процентной ставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитета представляет собой ряд основных наличные платежи за период времени. Это может быть ссуды (например, ипотеки) или инвестиции (например, План энергосбережения, ежемесячно).  
  
 `Rate` И `NPer` нужно вычислять с помощью периодов выплат, выраженный в единицах. Например если `Rate` вычисляется с использованием месяцев, `NPer` должен также быть выражен в месяцах.  
  
 Все аргументы выплаченные (например, вклады на сберегательный счет) представляются отрицательными числами; полученных (например, дивиденды) наличных денег, представленного положительных чисел.  
  
   
  
## Examples  
 В этом примере `PV` функция возвращает текущее значение аннуитета 1 000 000 долларов, который будет равна $ 50 000 в год на следующие 20 лет. Предоставляется ожидаемое годовую процентную ставку (`APR`), общее число платежей (`TotPmts`), объем каждого платежа (`YrIncome`), общее будущее значение инвестиции (`FVal`) и число, указывающее ли каждый Оплата производится в начале или в конце периода оплаты (`PayType`). Обратите внимание, что `YrIncome` является отрицательным числом, поскольку он представляет выплаченные из аннуитета каждый год.  
  
 [!code-vb[VbVbalrMath#25](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#25)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public static double Rate (double NPer, double Pmt, double PV, double FV = 0, Microsoft.VisualBasic.DueDate Due = Microsoft.VisualBasic.DueDate.EndOfPeriod, double Guess = 0.1);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 Rate(float64 NPer, float64 Pmt, float64 PV, float64 FV, valuetype Microsoft.VisualBasic.DueDate Due, float64 Guess) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.Rate(System.Double,System.Double,System.Double,System.Double,Microsoft.VisualBasic.DueDate,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function Rate (NPer As Double, Pmt As Double, PV As Double, Optional FV As Double = 0, Optional Due As DueDate = Microsoft.VisualBasic.DueDate.EndOfPeriod, Optional Guess As Double = 0.1) As Double" />
      <MemberSignature Language="F#" Value="static member Rate : double * double * double * double * Microsoft.VisualBasic.DueDate * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.Rate (NPer, Pmt, PV, FV, Due, Guess)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="NPer" Type="System.Double" />
        <Parameter Name="Pmt" Type="System.Double" />
        <Parameter Name="PV" Type="System.Double" />
        <Parameter Name="FV" Type="System.Double" />
        <Parameter Name="Due" Type="Microsoft.VisualBasic.DueDate" />
        <Parameter Name="Guess" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="NPer">Обязательный. Общее количество периодов платежей аннуитета. Например, при ежемесячных выплатах ссуды за автомобиль на протяжении 4 лет общее количество периодов оплаты будет равно 4 x 12 (или 48).</param>
        <param name="Pmt">Обязательный. Платеж за каждый период. Обычно платежи содержат основную сумму и проценты, которые не изменяются на протяжении периода действия аннуитета.</param>
        <param name="PV">Обязательный. Значение, задающее текущую сумму (или значение на сегодняшний день) серии будущих платежей или поступлений. Например, если для покупки автомобиля взят заем, то эта сумма представляет собой текущее значение предстоящих ежемесячных платежей за автомобиль.</param>
        <param name="FV">Необязательный параметр. Значение, задающее требуемую будущую сумму или баланс наличности после уплаты последнего платежа. Например, будущее значение ссуды равно $0, поcкольку такова будет ее величина после последней выплаты. Но если требуется собрать за 18 лет сумму в $50 000 на образование детей, то будущая сумма будет равна $50 000. Если этот аргумент опущен, используется значение 0.</param>
        <param name="Due">Необязательный параметр. Объект типа <see cref="T:Microsoft.VisualBasic.DueDate" />, указывающий время выплат. Этот аргумент должен равняться либо <c>DueDate.EndOfPeriod</c>, если выплаты должны производиться в конце периода, либо <c>DueDate.BegOfPeriod</c> в случае оплаты в начале периода. Если аргумент не задан, используется значение <c>DueDate.EndOfPeriod</c>.</param>
        <param name="Guess">Необязательный параметр. Оцениваемое значение, возвращаемое функцией <see langword="Rate" />. Если этот параметр опущен, используется значение <paramref name="Guess" />, равное 0,1 (10 процентам).</param>
        <summary>Возвращает значение, определяющее процентную ставку за период для аннуитета.</summary>
        <returns>Процентная ставка за период для аннуитета.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Аннуитета представляет собой ряд основных наличные платежи за период времени. Это может быть ссуды (например, ипотеки) или инвестиции (например, План энергосбережения, ежемесячно).  
  
 Все аргументы выплаченные (например, вклады на сберегательный счет) представляются отрицательными числами; полученных (например, дивиденды) наличных денег, представленного положительных чисел.  
  
 `Rate` вычисляется путем итерации. Начиная со значением `Guess`, `Rate` циклов вычисления, пока не получит результат с точностью 0,00001 процента. Если `Rate` не удается найти результат после 20 попыток, он завершается. Если guess составляет 10 процентов и `Rate` завершается ошибкой, попробуйте другое значение для `Guess`.  
  
   
  
## Examples  
 В этом примере используется `Rate` функцию для расчета процентной ставки ссуды, учитывая общее количество платежей (`TotPmts`), сумма платежа ссуды (`Payment`), текущее значение или основная ссуды (`PVal`), будущее значение ссуды (`FVal`), число, определяющее платеж — в начале или в конце периода оплаты (`PayType`) и приблизительное ожидаемый процентную ставку (`Guess`).  
  
 [!code-vb[VbVbalrMath#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="NPer" /> &lt;= 0.</exception>
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="SLN">
      <MemberSignature Language="C#" Value="public static double SLN (double Cost, double Salvage, double Life);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SLN(float64 Cost, float64 Salvage, float64 Life) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SLN (Cost As Double, Salvage As Double, Life As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SLN(double Cost, double Salvage, double Life);" />
      <MemberSignature Language="F#" Value="static member SLN : double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SLN (Cost, Salvage, Life)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Обязательный. Начальная стоимость актива.</param>
        <param name="Salvage">Обязательный. Стоимость актива на момент окончания срока его эксплуатации.</param>
        <param name="Life">Обязательный. Срок эксплуатации актива.</param>
        <summary>Возвращает значение, определяющее равномерную амортизацию актива за один период времени.</summary>
        <returns>Равномерная амортизация актива за один период времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Период амортизации должно быть выражено в одном блоке как `Life` аргумент. Все аргументы должны быть положительными числами.  
  
   
  
## Examples  
 В этом примере используется `SLN` функция, возвращающая линейную амортизацию актива за один период времени; (`InitCost`), стоимость по окончании срока службы актива (`SalvageVal`) и всего жизненного цикла актива в годах (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Life" /> = 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
    <Member MemberName="SYD">
      <MemberSignature Language="C#" Value="public static double SYD (double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="ILAsm" Value=".method public static float64 SYD(float64 Cost, float64 Salvage, float64 Life, float64 Period) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.VisualBasic.Financial.SYD(System.Double,System.Double,System.Double,System.Double)" />
      <MemberSignature Language="VB.NET" Value="Public Function SYD (Cost As Double, Salvage As Double, Life As Double, Period As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static double SYD(double Cost, double Salvage, double Life, double Period);" />
      <MemberSignature Language="F#" Value="static member SYD : double * double * double * double -&gt; double" Usage="Microsoft.VisualBasic.Financial.SYD (Cost, Salvage, Life, Period)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.VisualBasic</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
        <AssemblyVersion>10.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="Cost" Type="System.Double" />
        <Parameter Name="Salvage" Type="System.Double" />
        <Parameter Name="Life" Type="System.Double" />
        <Parameter Name="Period" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="Cost">Обязательный. Начальная стоимость актива.</param>
        <param name="Salvage">Обязательный. Стоимость актива на момент окончания срока его эксплуатации.</param>
        <param name="Life">Обязательный. Срок эксплуатации актива.</param>
        <param name="Period">Обязательный. Период расчета амортизации актива.</param>
        <summary>Возвращает значение, определяющее величину ускоренной амортизации актива за указанный период времени.</summary>
        <returns>Величина ускоренной амортизации актива за указанный период времени.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Life` И `Period` аргументы должны быть выражены в одинаковых единицах. Например если `Life` задается в месяцах, `Period` также должен быть задан в месяцах. Все аргументы должны быть положительными числами.  
  
   
  
## Examples  
 В этом примере используется `SYD` функция, возвращающая амортизацию актива за указанный период времени; (`InitCost`), стоимость по окончании срока службы актива (`SalvageVal`) и всего жизненного цикла ресурса в лет (`LifeTime`).  
  
 [!code-vb[VbVbalrMath#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/VbVbalrMath/VB/Class1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Salvage" /> &lt; 0, <paramref name="Period" /> &gt; <paramref name="Life" />, или <paramref name="Period" /> &lt;= 0.</exception>
        <altmember cref="M:Microsoft.VisualBasic.Financial.DDB(System.Double,System.Double,System.Double,System.Double,System.Double)" />
        <altmember cref="M:Microsoft.VisualBasic.Financial.SLN(System.Double,System.Double,System.Double)" />
        <altmember cref="T:System.ArgumentException" />
        <related type="Article" href="~/docs/visual-basic/language-reference/keywords/financial-summary.md">Сводка по финансовым функциям</related>
      </Docs>
    </Member>
  </Members>
</Type>