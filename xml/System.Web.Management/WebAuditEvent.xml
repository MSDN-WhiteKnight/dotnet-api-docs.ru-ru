<Type Name="WebAuditEvent" FullName="System.Web.Management.WebAuditEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fcdf80f4e187ad84451c97be5ced072c4dd6601f" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51891195" /></Metadata><TypeSignature Language="C#" Value="public class WebAuditEvent : System.Web.Management.WebManagementEvent" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit WebAuditEvent extends System.Web.Management.WebManagementEvent" />
  <TypeSignature Language="DocId" Value="T:System.Web.Management.WebAuditEvent" />
  <TypeSignature Language="VB.NET" Value="Public Class WebAuditEvent&#xA;Inherits WebManagementEvent" />
  <TypeSignature Language="C++ CLI" Value="public ref class WebAuditEvent : System::Web::Management::WebManagementEvent" />
  <TypeSignature Language="F#" Value="type WebAuditEvent = class&#xA;    inherit WebManagementEvent" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.Management.WebManagementEvent</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Служит базовым классом для всех событий аудита контроля рабочего состояния ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Наблюдение за работоспособностью ASP.NET позволяет рабочей среде и рабочего персонала для управления развернутых веб-приложений. <xref:System.Web.Management> Пространство имен содержит типы событий работоспособности, отвечающей за упаковку данных состояния работоспособности приложения и типы поставщиков, отвечающий за обработку этих данных. Он также содержит вспомогательные типы, которые помогут при управлении событиями состояния.  
  
 <xref:System.Web.Management.WebAuditEvent> Класс является базовым классом, от которого наследуют классы событий аудита мониторинга состояния ASP.NET. События аудита создать информацию об операциях, связанных с безопасностью в веб-приложения и предоставляют успешных и неудачных событий для каждой отслеживаемой операции.  
  
 Система мониторинга работоспособности можно успешные и неуспешные события аудита, это означает, что приложение может отслеживаться для обычных и неисправных условий. По умолчанию записываются только события аудита сбоев.  
  
 Следующие операции, подвергаются аудиту ASP.NET и может создавать события аудита мониторинга состояния об успешном завершении или сбое:  
  
-   Попытки входа в систему пользователями приложения ASP.NET. Дополнительные сведения об аудите см. в разделе <xref:System.Web.Management.WebAuthenticationSuccessAuditEvent> и <xref:System.Web.Management.WebSuccessAuditEvent>.  
  
-   События безопасности, такие как сбои проверки подлинности, не удалось, попытки доступа к ресурсам и других событий, связанных с безопасностью. Журнал этих событий можно использовать при оценке вторжений или атаки на приложение. По умолчанию поддержка аудита не предоставляется для сбоев проверки подлинности анонимных пользователей. Дополнительные сведения об аудите событий см. в разделе <xref:System.Web.Management.WebAuthenticationFailureAuditEvent> и <xref:System.Web.Management.WebFailureAuditEvent>.  
  
-   Пользовательские события, создаваемые приложением ASP.NET. Можно проводить аудит пользовательские события, расширяя функциональность, предоставляемую <xref:System.Web.Management.WebAuditEvent> класса и производных классов  
  
> [!NOTE]
>  В большинстве случаев можно использовать типы мониторинга состояния ASP.NET как реализованные и управлять системой мониторинга состояния, указав значения в `healthMonitoring` раздел конфигурации. Также можно извлекать данные из типов мониторинга состояния, чтобы создавать собственные пользовательские события и поставщиков. Пример использования производного от <xref:System.Web.Management.WebAuditEvent> , представлена в разделе примера, приведенного в этом разделе.  
  
   
  
## Examples  
 В следующем примере кода показано, как выполнять наследование <xref:System.Web.Management.WebAuditEvent> класса для создания пользовательского события аудита.  
  
 [!code-csharp[System.Web.Management.WebAuditEvent#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/CS/webauditevent.cs#1)]
 [!code-vb[System.Web.Management.WebAuditEvent#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/VB/webauditevent.vb#1)]  
  
 Ниже приведен отрывок файла конфигурации, позволяющий ASP.NET использовать событие.  
  
```  
<healthMonitoring   
  enabled="true"  
  heartBeatInterval="0">   
  
  <providers>  
    <add name="EventLogProvider"   
      type="System.Web.Management.EventLogWebEventProvider,  
      System.Web,Version=2.0.3600.0,Culture=neutral,  
      PublicKeyToken=b03f5f7f11d50a3a"/>  
  </providers>  
  
  <eventMappings>  
    <add  name="SampleWebAuditEvent"   
      type="SamplesAspNet.SampleWebAuditEvent,  
      webauditevent,Version=1.0.1663.31140,   
      Culture=neutral,   
      PublicKeyToken=0d1fa0f69d94de96,   
      processorArchitecture=MSIL"/>  
  </eventMappings>  
  
  <rules>  
    <add name="Custom Audit Default"  
      eventName="SampleWebAuditEvent"  
      provider="EventLogProvider"  
      profile="Default"/>    
  </rules>  
  
</healthMonitoring>  
```  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>При форматировании данные пользовательских событий для отображения, переопределить <see cref="M:System.Web.Management.WebBaseEvent.FormatCustomEventDetails(System.Web.Management.WebEventFormatter)" /> метод вместо <see cref="Overload:System.Web.Management.WebBaseEvent.ToString" /> метод. Это позволит избежать перезаписи или изменения важной системной информации.</para></block>
    <altmember cref="T:System.Web.Management.WebManagementEvent" />
    <altmember cref="T:System.Web.Management.WebFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebAuthenticationFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebSuccessAuditEvent" />
    <altmember cref="T:System.Web.Management.WebAuthenticationSuccessAuditEvent" />
    <altmember cref="T:System.Web.Management.WebViewStateFailureAuditEvent" />
    <altmember cref="T:System.Web.Management.WebEventCodes" />
    <related type="Article" href="https://msdn.microsoft.com/library/e003f224-70fe-4cd8-a71a-2dc81e2d7e4c">Обзор наблюдения за состоянием системы ASP.NET</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebAuditEvent (string message, object eventSource, int eventCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebAuditEvent.#ctor(System.String,System.Object,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode);" />
      <MemberSignature Language="F#" Value="new System.Web.Management.WebAuditEvent : string * obj * int -&gt; System.Web.Management.WebAuditEvent" Usage="new System.Web.Management.WebAuditEvent (message, eventSource, eventCode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Описание события.</param>
        <param name="eventSource">Объект, являющийся источником события.</param>
        <param name="eventCode">Код, связанный с событием. При реализации пользовательского события код события должен превышать <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.Management.WebAuditEvent" /> с использованием предоставленных параметров.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор используется внутренним образом системой мониторинга состояния ASP.NET. Вы никогда не будет использоваться для создания экземпляра <xref:System.Web.Management.WebAuditEvent> объект, но можно вызвать этот конструктор, при реализации собственного типа события, который наследует от этого класса.  
  
   
  
## Examples  
 В следующем примере кода показано, как вызвать этот конструктор. Данный пример кода является частью большего примера для <xref:System.Web.Management.WebAuditEvent> класса.  
  
 [!code-csharp[System.Web.Management.WebAuditEvent#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/CS/webauditevent.cs#2)]
 [!code-vb[System.Web.Management.WebAuditEvent#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/VB/webauditevent.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal WebAuditEvent (string message, object eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(string message, object eventSource, int32 eventCode, int32 eventDetailCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Management.WebAuditEvent.#ctor(System.String,System.Object,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub New (message As String, eventSource As Object, eventCode As Integer, eventDetailCode As Integer)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; WebAuditEvent(System::String ^ message, System::Object ^ eventSource, int eventCode, int eventDetailCode);" />
      <MemberSignature Language="F#" Value="new System.Web.Management.WebAuditEvent : string * obj * int * int -&gt; System.Web.Management.WebAuditEvent" Usage="new System.Web.Management.WebAuditEvent (message, eventSource, eventCode, eventDetailCode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="eventSource" Type="System.Object" />
        <Parameter Name="eventCode" Type="System.Int32" />
        <Parameter Name="eventDetailCode" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="message">Описание события.</param>
        <param name="eventSource">Объект, являющийся источником события.</param>
        <param name="eventCode">Код, связанный с событием. При реализации пользовательского события код события должен превышать <see cref="F:System.Web.Management.WebEventCodes.WebExtendedBase" />.</param>
        <param name="eventDetailCode">Значение <see cref="T:System.Web.Management.WebEventCodes" />, указывающее подробный идентификатор для события.</param>
        <summary>Инициализация нового экземпляра класса <see cref="T:System.Web.Management.WebAuditEvent" /> с указанными параметрами события.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор используется внутренним образом системой мониторинга состояния ASP.NET. Вы никогда не будет использоваться для создания экземпляра <xref:System.Web.Management.WebAuditEvent> объект, но можно вызвать этот конструктор, при реализации собственного типа события, который наследует от этого класса.  
  
   
  
## Examples  
 В следующем примере кода показано, как вызвать этот конструктор. Данный пример кода является частью большего примера для <xref:System.Web.Management.WebAuditEvent> класса.  
  
 [!code-csharp[System.Web.Management.WebAuditEvent#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/CS/webauditevent.cs#3)]
 [!code-vb[System.Web.Management.WebAuditEvent#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/VB/webauditevent.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestInformation">
      <MemberSignature Language="C#" Value="public System.Web.Management.WebRequestInformation RequestInformation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.Management.WebRequestInformation RequestInformation" />
      <MemberSignature Language="DocId" Value="P:System.Web.Management.WebAuditEvent.RequestInformation" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RequestInformation As WebRequestInformation" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::Management::WebRequestInformation ^ RequestInformation { System::Web::Management::WebRequestInformation ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.RequestInformation : System.Web.Management.WebRequestInformation" Usage="System.Web.Management.WebAuditEvent.RequestInformation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Management.WebRequestInformation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает сведения, связанные с веб-запросом.</summary>
        <value><see cref="T:System.Web.Management.WebRequestInformation" />, содержащий сведения, связанные с веб-запросом.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте сведения, предоставляемые <xref:System.Web.Management.WebAuditEvent.RequestInformation%2A> свойства, облегчающие обнаружение причины сбоя.  
  
   
  
## Examples  
 В следующем примере кода показано, как получить сведения о запросе через <xref:System.Web.Management.WebRequestInformation> свойство.  
  
 [!code-csharp[System.Web.Management.WebAuditEvent#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/CS/webauditevent.cs#5)]
 [!code-vb[System.Web.Management.WebAuditEvent#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Management.WebAuditEvent/VB/webauditevent.vb#5)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Web.Management.WebRequestInformation" />
      </Docs>
    </Member>
  </Members>
</Type>