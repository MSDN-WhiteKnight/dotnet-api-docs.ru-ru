<Type Name="RegistryAccessRule" FullName="System.Security.AccessControl.RegistryAccessRule">
  <Metadata><Meta Name="ms.openlocfilehash" Value="05092fb102436072a910f45f35b944062528182b" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56760835" /></Metadata><TypeSignature Language="C#" Value="public sealed class RegistryAccessRule : System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegistryAccessRule extends System.Security.AccessControl.AccessRule" />
  <TypeSignature Language="DocId" Value="T:System.Security.AccessControl.RegistryAccessRule" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class RegistryAccessRule&#xA;Inherits AccessRule" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegistryAccessRule sealed : System::Security::AccessControl::AccessRule" />
  <TypeSignature Language="F#" Value="type RegistryAccessRule = class&#xA;    inherit AccessRule" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.2.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Security.AccessControl.AccessRule</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1">
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет набор прав доступа, разрешенных или запрещенных пользователю или группе. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> Класс является одним из набора классов, предоставляемых .NET Framework для управления безопасность управления доступом Windows для разделов реестра. Обзор этих классов и их связь с базовых структур управления доступом Windows, см. в разделе <xref:System.Security.AccessControl.RegistrySecurity>.  
  
> [!NOTE]
>  Безопасность управления доступом Windows может применяться только к разделам реестра. Он не может использоваться для пар отдельных ключей и значений, хранящихся в ключе.  
  
 Чтобы получить список правил, примененных в настоящий момент в раздел реестра, используйте <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> метод для получения <xref:System.Security.AccessControl.RegistrySecurity> , а затем использовать его <xref:System.Security.AccessControl.CommonObjectSecurity.GetAccessRules%2A> метод, чтобы получить коллекцию <xref:System.Security.AccessControl.RegistryAccessRule> объектов.  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> объекты не соответствуют одному с записями управления доступом в базовом списке разграничительного управления доступа (DACL). При получить набор всех правил доступа для раздела реестра, этот набор содержит минимальное число правил, необходимых для выражения все записи управления доступом.  
  
> [!NOTE]
>  По мере применения и удалить правила, изменить базовые элементы управления доступом. Сведения в правилах объединяется по возможности для поддержания наименьшее количество записей управления доступом. Таким образом когда вы читаете текущий список правил, он может выглядеть так же, как список всех правил, которые были добавлены.  
  
 Используйте <xref:System.Security.AccessControl.RegistryAccessRule> объектов, чтобы указать права доступа, чтобы разрешить или запретить пользователю или группе. Объект <xref:System.Security.AccessControl.RegistryAccessRule> объекта всегда представляет доступ разрешен или запрещен доступ, никогда не оба.  
  
 Чтобы применить правило к разделу реестра, используйте <xref:Microsoft.Win32.RegistryKey.GetAccessControl%2A?displayProperty=nameWithType> метод для получения <xref:System.Security.AccessControl.RegistrySecurity> объекта. Изменить <xref:System.Security.AccessControl.RegistrySecurity> объекта с помощью его методы, чтобы добавить правило, а затем используйте <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> метод повторно присоединить объект безопасности.  
  
> [!IMPORTANT]
>  Изменения, вносимые в <xref:System.Security.AccessControl.RegistrySecurity> объекта не влияют на уровни доступа в разделе реестра до вызова метода <xref:Microsoft.Win32.RegistryKey.SetAccessControl%2A?displayProperty=nameWithType> метод назначения объекта измененных безопасности реестра.  
  
 <xref:System.Security.AccessControl.RegistryAccessRule> объекты являются неизменяемыми. Безопасность для раздела реестра изменяется с помощью методов <xref:System.Security.AccessControl.RegistrySecurity> класса для добавления или удаления правила; после этого изменяются базовые элементы управления доступом.  
  
   
  
## Examples  
 В следующем примере кода демонстрируются правила доступа с помощью наследования и распространения. В примере создается <xref:System.Security.AccessControl.RegistrySecurity> объекта, затем создает и добавляет два правила, которые имеют <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> флаг. Первое правило имеет не Флаги распространения, а второй — <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> и <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.  
  
 Программа отображает правила в <xref:System.Security.AccessControl.RegistrySecurity> объекта, а затем использует объект для создания подраздела. Программа создает дочерний раздел и раздел grandchild, а затем отображает параметры безопасности для каждого подраздела. Наконец программа удаляет ключи теста.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.AccessControl.RegistryAccessRule" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Пользователь или группа, к которым относится данное правило. Должен обладать типом <see cref="T:System.Security.Principal.SecurityIdentifier" /> или таким типом, как <see cref="T:System.Security.Principal.NTAccount" />, чтобы его можно было преобразовать в тип <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="registryRights">Побитовое сочетание значений <see cref="T:System.Security.AccessControl.RegistryRights" />, определяющее права, которые разрешаются или запрещаются.</param>
        <param name="type">Одно из значений <see cref="T:System.Security.AccessControl.AccessControlType" />, определяющее тип правила ("разрешить" или "запретить").</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.AccessControl.RegistryAccessRule" />, определяющий пользователя или группу, к которым применяются правило, права доступа, а также тип правила ("разрешить" или "запретить").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор задает распространения по умолчанию и наследование. То есть <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> и <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="registryRights" /> содержит недопустимое значение.  
  
-или- 
 Параметр <paramref name="type" /> содержит недопустимое значение.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" /> — <see langword="null" />.  
  
-или- 
 <paramref name="eventRights" /> равен нулю.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="identity" /> не относится к типу <see cref="T:System.Security.Principal.SecurityIdentifier" /> и к такому типу, как <see cref="T:System.Security.Principal.NTAccount" />, который можно преобразовать в тип <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Имя пользователя или группы, к которым относится данное правило.</param>
        <param name="registryRights">Побитовое сочетание значений <see cref="T:System.Security.AccessControl.RegistryRights" />, определяющее права, которые разрешаются или запрещаются.</param>
        <param name="type">Одно из значений <see cref="T:System.Security.AccessControl.AccessControlType" />, определяющее тип правила ("разрешить" или "запретить").</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.AccessControl.RegistryAccessRule" />, определяющий имя пользователя или группы, к которым применяются правило, права доступа, а также тип правила ("разрешить" или "запретить").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор задает распространения по умолчанию и наследование. То есть <xref:System.Security.AccessControl.InheritanceFlags.None?displayProperty=nameWithType> и <xref:System.Security.AccessControl.PropagationFlags.None?displayProperty=nameWithType>.  
  
 Этот конструктор эквивалентно созданию <xref:System.Security.Principal.NTAccount> объекта, передавая `identity` для <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> конструктор и передав только что созданный <xref:System.Security.Principal.NTAccount> объект <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.AccessControlType%29> конструктор.  
  
   
  
## Examples  
 В следующем примере кода создает правила доступа в реестре и добавляет их в <xref:System.Security.AccessControl.RegistrySecurity> объекта, отображаются как правила, разрешающие и запрещающие права остаются отдельными, а совместимого правила на одной и той же вида объединяются.  
  
 [!code-csharp[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistrySecurity.AddAccessRule#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistrySecurity.AddAccessRule/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="registryRights" /> содержит недопустимое значение.  
  
-или- 
 Параметр <paramref name="type" /> содержит недопустимое значение.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="registryRights" /> равен нулю.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> — <see langword="null" />.  
  
-или- 
 <paramref name="identity" /> представляет собой строку нулевой длины.  
  
-или- 
 Длина значения параметра <paramref name="identity" /> превышает 512 символов.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (System.Security.Principal.IdentityReference identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Security.Principal.IdentityReference identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.Security.Principal.IdentityReference,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::Security::Principal::IdentityReference ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : System.Security.Principal.IdentityReference * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.Security.Principal.IdentityReference" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Пользователь или группа, к которым относится данное правило. Должен обладать типом <see cref="T:System.Security.Principal.SecurityIdentifier" /> или таким типом, как <see cref="T:System.Security.Principal.NTAccount" />, чтобы его можно было преобразовать в тип <see cref="T:System.Security.Principal.SecurityIdentifier" />.</param>
        <param name="registryRights">Побитовое сочетание значений <see cref="T:System.Security.AccessControl.RegistryRights" />, определяющее права, которые разрешаются или запрещаются.</param>
        <param name="inheritanceFlags">Побитовое сочетание флагов <see cref="T:System.Security.AccessControl.InheritanceFlags" />, которое определяет порядок наследования прав доступа у других объектов.</param>
        <param name="propagationFlags">Побитовое сочетание флагов <see cref="T:System.Security.AccessControl.PropagationFlags" />, которое определяет порядок распространения прав доступа на другие объекты.</param>
        <param name="type">Одно из значений <see cref="T:System.Security.AccessControl.AccessControlType" />, определяющее тип правила ("разрешить" или "запретить").</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.AccessControl.RegistryAccessRule" />, определяющий имя пользователя или группы, на которые распространяется действие правила, права доступа, флаги наследования, флаги распространения, а также тип правила ("разрешить" или "запретить").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Все разделы реестра являются контейнерами, поэтому только флаг наследования, допустимое для разделов реестра <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> флаг. Если этот флаг не указан, флаги распространения учитываются, а только явным образом указанные. Если флаг представлен, правило распространяется, как показано в следующей таблице. Таблице предполагается, что имеется подраздел S с помощью дочерних подраздел CS и внутри этого подраздела GS. Путь для подраздела внучатый является S\CS\GS.  
  
|Флаги распространения|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 Шаблон для внутри этого подраздела всем подразделам внутри этого подраздела.  
  
 Например если <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> установлен флаг для `inheritanceFlags` и <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> распространения установлен флаг для `propagationFlags`, это правило не применяется к непосредственном подразделе, но применяется для всех его непосредственные дочерние подразделы и все подразделы они содержат.  
  
> [!NOTE]
>  Несмотря на то, что можно указать <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> флаг для `inheritanceFlags`, нет смысла таким образом. В целях контроля доступа пары имя/значение в соответствующий раздел реестра не являются отдельными объектами. Права доступа в пары "имя значение" контролируются права подраздела. Кроме того так как все подразделы представляют собой контейнеры (то есть они могут содержать другие подразделы), они не подвержены <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> флаг. Наконец, указав <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> флаг без необходимости усложняет обслуживание правила, так как он мешает сочетание правил, в противном случае совместимы.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="registryRights" /> содержит недопустимое значение.  
  
-или- 
 Параметр <paramref name="type" /> содержит недопустимое значение.  
  
-или- 
 Параметр <paramref name="inheritanceFlags" /> содержит недопустимое значение.  
  
-или- 
 Параметр <paramref name="propagationFlags" /> содержит недопустимое значение.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="identity" /> — <see langword="null" />.  
  
-или- 
 <paramref name="registryRights" /> равен нулю.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="identity" /> не относится к типу <see cref="T:System.Security.Principal.SecurityIdentifier" /> и к такому типу, как <see cref="T:System.Security.Principal.NTAccount" />, который можно преобразовать в тип <see cref="T:System.Security.Principal.SecurityIdentifier" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegistryAccessRule (string identity, System.Security.AccessControl.RegistryRights registryRights, System.Security.AccessControl.InheritanceFlags inheritanceFlags, System.Security.AccessControl.PropagationFlags propagationFlags, System.Security.AccessControl.AccessControlType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string identity, valuetype System.Security.AccessControl.RegistryRights registryRights, valuetype System.Security.AccessControl.InheritanceFlags inheritanceFlags, valuetype System.Security.AccessControl.PropagationFlags propagationFlags, valuetype System.Security.AccessControl.AccessControlType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.AccessControl.RegistryAccessRule.#ctor(System.String,System.Security.AccessControl.RegistryRights,System.Security.AccessControl.InheritanceFlags,System.Security.AccessControl.PropagationFlags,System.Security.AccessControl.AccessControlType)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegistryAccessRule(System::String ^ identity, System::Security::AccessControl::RegistryRights registryRights, System::Security::AccessControl::InheritanceFlags inheritanceFlags, System::Security::AccessControl::PropagationFlags propagationFlags, System::Security::AccessControl::AccessControlType type);" />
      <MemberSignature Language="F#" Value="new System.Security.AccessControl.RegistryAccessRule : string * System.Security.AccessControl.RegistryRights * System.Security.AccessControl.InheritanceFlags * System.Security.AccessControl.PropagationFlags * System.Security.AccessControl.AccessControlType -&gt; System.Security.AccessControl.RegistryAccessRule" Usage="new System.Security.AccessControl.RegistryAccessRule (identity, registryRights, inheritanceFlags, propagationFlags, type)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="identity" Type="System.String" />
        <Parameter Name="registryRights" Type="System.Security.AccessControl.RegistryRights" />
        <Parameter Name="inheritanceFlags" Type="System.Security.AccessControl.InheritanceFlags" />
        <Parameter Name="propagationFlags" Type="System.Security.AccessControl.PropagationFlags" />
        <Parameter Name="type" Type="System.Security.AccessControl.AccessControlType" />
      </Parameters>
      <Docs>
        <param name="identity">Имя пользователя или группы, к которым относится данное правило.</param>
        <param name="registryRights">Побитовое сочетание значений <see cref="T:System.Security.AccessControl.RegistryRights" />, определяющее права, которые разрешаются или запрещаются.</param>
        <param name="inheritanceFlags">Побитовое сочетание флагов <see cref="T:System.Security.AccessControl.InheritanceFlags" />, которое определяет порядок наследования прав доступа у других объектов.</param>
        <param name="propagationFlags">Побитовое сочетание флагов <see cref="T:System.Security.AccessControl.PropagationFlags" />, которое определяет порядок распространения прав доступа на другие объекты.</param>
        <param name="type">Одно из значений <see cref="T:System.Security.AccessControl.AccessControlType" />, определяющее тип правила ("разрешить" или "запретить").</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.AccessControl.RegistryAccessRule" />, определяющий имя пользователя или группы, на которые распространяется действие правила, права доступа, флаги наследования, флаги распространения, а также тип правила ("разрешить" или "запретить").</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Все разделы реестра являются контейнерами, поэтому только флаг наследования, допустимое для разделов реестра <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit?displayProperty=nameWithType> флаг. Если этот флаг не указан, флаги распространения учитываются, а только явным образом указанные. Если флаг представлен, правило распространяется, как показано в следующей таблице. Таблице предполагается, что имеется подраздел S с помощью дочерних подраздел CS и внутри этого подраздела GS. Путь для подраздела внучатый является S\CS\GS.  
  
|Флаги распространения|S|CS|GS|  
|-----------------------|-------|--------|--------|  
|<xref:System.Security.AccessControl.PropagationFlags.None>|X|X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>|X|X||  
|<xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X|X|  
|<xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit>, <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>||X||  
  
 Шаблон для внутри этого подраздела всем подразделам внутри этого подраздела.  
  
 Например если <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> установлен флаг для `inheritanceFlags` и <xref:System.Security.AccessControl.PropagationFlags.InheritOnly> распространения установлен флаг для `propagationFlags`, это правило не применяется к непосредственном подразделе, но применяется для всех его непосредственные дочерние подразделы и все подразделы они содержат.  
  
> [!NOTE]
>  Несмотря на то, что можно указать <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit?displayProperty=nameWithType> флаг для `inheritanceFlags`, нет смысла таким образом. В целях контроля доступа пары имя/значение в соответствующий раздел реестра не являются отдельными объектами. Права доступа в пары "имя значение" контролируются права подраздела. Кроме того так как все подразделы представляют собой контейнеры (то есть они могут содержать другие подразделы), они не подвержены <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> флаг. Наконец, указав <xref:System.Security.AccessControl.InheritanceFlags.ObjectInherit> флаг без необходимости усложняет обслуживание правила, так как он мешает сочетание правил, в противном случае совместимы.  
  
 Этот конструктор эквивалентно созданию <xref:System.Security.Principal.NTAccount> объекта, передавая `identity` для <xref:System.Security.Principal.NTAccount.%23ctor%28System.String%29?displayProperty=nameWithType> конструктор и передав только что созданный <xref:System.Security.Principal.NTAccount> объект <xref:System.Security.AccessControl.RegistryAccessRule.%23ctor%28System.Security.Principal.IdentityReference%2CSystem.Security.AccessControl.RegistryRights%2CSystem.Security.AccessControl.InheritanceFlags%2CSystem.Security.AccessControl.PropagationFlags%2CSystem.Security.AccessControl.AccessControlType%29> конструктор.  
  
   
  
## Examples  
 В следующем примере кода демонстрируются правила доступа с помощью наследования и распространения. В примере создается <xref:System.Security.AccessControl.RegistrySecurity> объекта, а затем создает и добавляет два правила, которые имеют <xref:System.Security.AccessControl.InheritanceFlags.ContainerInherit> флаг. Первое правило имеет не Флаги распространения, а второй — <xref:System.Security.AccessControl.PropagationFlags.NoPropagateInherit> и <xref:System.Security.AccessControl.PropagationFlags.InheritOnly>.  
  
 Программа отображает правила в <xref:System.Security.AccessControl.RegistrySecurity> объекта, а затем используется <xref:System.Security.AccessControl.RegistrySecurity> объекта, чтобы создать подраздел. Программа создает дочерний раздел и раздел grandchild, а затем отображает правила для каждого подраздела. Наконец программа удаляет ключи теста.  
  
 [!code-csharp[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/CS/source.cs#1)]
 [!code-vb[System.Security.AccessControl.RegistryAccessRule.ctor2#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.AccessControl.RegistryAccessRule.ctor2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="registryRights" /> содержит недопустимое значение.  
  
-или- 
 Параметр <paramref name="type" /> содержит недопустимое значение.  
  
-или- 
 Параметр <paramref name="inheritanceFlags" /> содержит недопустимое значение.  
  
-или- 
 Параметр <paramref name="propagationFlags" /> содержит недопустимое значение.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="eventRights" /> равен нулю.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="identity" /> — <see langword="null" />.  
  
-или- 
 <paramref name="identity" /> представляет собой строку нулевой длины.  
  
-или- 
 Длина значения параметра <paramref name="identity" /> превышает 512 символов.</exception>
      </Docs>
    </Member>
    <Member MemberName="RegistryRights">
      <MemberSignature Language="C#" Value="public System.Security.AccessControl.RegistryRights RegistryRights { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Security.AccessControl.RegistryRights RegistryRights" />
      <MemberSignature Language="DocId" Value="P:System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RegistryRights As RegistryRights" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::AccessControl::RegistryRights RegistryRights { System::Security::AccessControl::RegistryRights get(); };" />
      <MemberSignature Language="F#" Value="member this.RegistryRights : System.Security.AccessControl.RegistryRights" Usage="System.Security.AccessControl.RegistryAccessRule.RegistryRights" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry.AccessControl</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Win32.Registry</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.2.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.AccessControl.RegistryRights</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает права, разрешаемые или запрещаемые правилом доступа.</summary>
        <value>Побитовое сочетание значений <see cref="T:System.Security.AccessControl.RegistryRights" />, определяющее права, которые разрешаются или запрещаются правилом доступа.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.AccessControl.RegistryAccessRule> объекты являются неизменяемыми. Можно создать новое правило доступа, представляющий другого пользователя, других прав или другой <xref:System.Security.AccessControl.AccessControlType>, но не может изменить существующее правило доступа.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>