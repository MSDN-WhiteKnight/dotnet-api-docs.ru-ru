<Type Name="XamlReader" FullName="System.Xaml.XamlReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="849d2e0c9bee513161cca5e65badec4967daf83c" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51864285" /></Metadata><TypeSignature Language="C#" Value="public abstract class XamlReader : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XamlReader extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Xaml.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XamlReader&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type XamlReader = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Xaml</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Предоставляет базовые определения для классов, получающих входные данные XAML и создающих потоки узлов XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xaml.XamlReader> является абстрактным классом и не предоставляет реализаций или определений, имеющих работающий результат для всех членов. Элементы, имеющие реализацию в <xref:System.Xaml.XamlReader> , указаны в разделе «Примечания» для этого элемента. В частности <xref:System.Xaml.XamlReader> имеет несколько абстрактных членов, которые должны быть реализованы и несколько виртуальных членов.  
  
 Виртуальных членов <xref:System.Xaml.XamlReader.ReadSubtree%2A> и <xref:System.Xaml.XamlReader.Skip%2A> Каждая реализация по умолчанию, подходящий для большинства случаев. Тем не менее <xref:System.Xaml.XamlReader.ReadSubtree%2A> и <xref:System.Xaml.XamlReader.Skip%2A> реализации по умолчанию зависят от других ожидаемое поведение реализации средства чтения XAML; в частности, они используют <xref:System.Xaml.XamlReader.Read%2A> переопределить. <xref:System.Xaml.XamlReader.Dispose%2A> также является виртуальный член, имеющий работоспособную реализацию по умолчанию.  
  
 Следующие два класса являются наиболее важные и практические производные классы в службах XAML .NET Framework и в сборке System.Xaml:  
  
-   <xref:System.Xaml.XamlObjectReader>, который читает граф объектов, например graph активного объекта приложения во время выполнения.  
  
-   <xref:System.Xaml.XamlXmlReader>, который считывает XAML в виде текстового файла XML с помощью общего <xref:System.Xml.XmlReader> , загружает файл как промежуточное вспомогательный класс.  
  
 Включить другие средства чтения XAML из других платформ <xref:System.Windows.Baml2006.Baml2006Reader> и <xref:System.Activities.Debugger.XamlDebuggerXmlReader>.  
  
 <xref:System.Xaml.XamlReader> отличается от [!INCLUDE[TLA#tla_xmldom](~/includes/tlasharptla-xmldom-md.md)] и <xref:System.Xml.XmlReader> принципы проектирования, так как <xref:System.Xaml.XamlReader> имеет `Create` метод для возврата по умолчанию базовой реализации средства чтения XAML. Вместо этого следует создать конкретных производных классов средства чтения XAML с помощью вызова конструкторов или другие интерфейсы API модуля поддержки данного класса.  
  
## <a name="subtree-readers"></a>Средства чтения поддерева  
 В большинстве случаев, вы вызываете <xref:System.Xaml.XamlReader> API в контексте определенных классов средства чтения XAML, который является производным от <xref:System.Xaml.XamlReader>. Тем не менее, в одном конкретном случае доступ к <xref:System.Xaml.XamlReader> API на практические экземпляра средства чтения XAML, который не является общедоступной и не является производным от <xref:System.Xaml.XamlObjectReader> или <xref:System.Xaml.XamlXmlReader>. Этот случай — при вызове <xref:System.Xaml.XamlReader.ReadSubtree%2A>, который возвращает <xref:System.Xaml.XamlReader> экземпляра. В реализации по умолчанию <xref:System.Xaml.XamlReader> то есть возвращаемая этим API является внутренним классом.  
  
 <xref:System.Xaml.XamlReader> Получен для чтения поддерево имеет допустимых действий для API-интерфейсы, такие как <xref:System.Xaml.XamlReader.Read%2A> и <xref:System.Xaml.XamlReader.NodeType%2A>, и эти действия основываются на родительский класс средства чтения. Такой подход позволяет внутренний класс для отслеживания уровня кадра, где было введено поддерево. Действующее поддерево <xref:System.Xaml.XamlReader> гарантирует, что текущего положения узла при перемещении за пределы поддерево, конкретном поддереве модуль чтения создает отчеты окончания файла или `null` в текущем узле.  
  
 Примечания об использовании средства чтения поддерева включены в определенных <xref:System.Xaml.XamlReader> API-интерфейсы.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Xaml.XamlObjectReader" />
    <altmember cref="T:System.Xaml.XamlXmlReader" />
    <altmember cref="T:System.Xaml.XamlReaderSettings" />
    <related type="Article" href="https://msdn.microsoft.com/library/7c11abec-1075-474c-9d9b-778e5dab21c3">Общее представление о понятиях и структурах потока узлов XAML</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует класс <see cref="T:System.Xaml.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="xamlReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Закрывает поток узлов XAML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В базовой реализации вызвав <xref:System.Xaml.XamlReader.Close%2A> вызовы <xref:System.Xaml.XamlReader.Dispose%2A> с `isDisposing` параметра в виде `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="xamlReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Значение <see langword="true" />, если необходимо освободить управляемые ресурсы; в противном случае — значение <see langword="false" />.</param>
        <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Xaml.XamlReader" />, а при необходимости освобождает также управляемые ресурсы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Необходимо вызвать метод базового класса, чтобы получить <xref:System.Xaml.XamlReader.IsDisposed%2A>  =  `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="protected bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Xaml.XamlReader.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает сведения о том, вызывался ли метод <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" />.</summary>
        <value>Значение <see langword="true" />, если метод <see cref="M:System.Xaml.XamlReader.Dispose(System.Boolean)" /> вызван; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEof">
      <MemberSignature Language="C#" Value="public abstract bool IsEof { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEof" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.IsEof" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsEof As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsEof { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEof : bool" Usage="System.Xaml.XamlReader.IsEof" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>При реализации в производном классе получает значение, показывающее, расположено ли средство чтения в конце файла.</summary>
        <value>Значение <see langword="true" />, если средство расположено в концептуальном конце файла потока узлов XAML; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Читатели поддерево можно вызвать <xref:System.Xaml.XamlReader.IsEof%2A>, с поведением, которое правильно отражает границы поддерева. Дополнительные сведения см. в разделе «Средства чтения поддерева» <xref:System.Xaml.XamlReader>, или см. в разделе <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.IsEof" />
        <altmember cref="P:System.Xaml.XamlXmlReader.IsEof" />
      </Docs>
    </Member>
    <Member MemberName="Member">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlMember Member { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlMember Member" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Member" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Member As XamlMember" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlMember ^ Member { System::Xaml::XamlMember ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Member : System.Xaml.XamlMember" Usage="System.Xaml.XamlReader.Member" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlMember</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>При реализации в производном классе получает текущий член в положении средства чтения, если эта положении находится в объекте <see cref="F:System.Xaml.XamlNodeType.StartMember" />.</summary>
        <value>Текущий член или <see langword="null" />, если положение средства чтения не находится на члене.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Читатели поддерево можно вызвать <xref:System.Xaml.XamlReader.Member%2A>, поведение ограничений. Дополнительные сведения см. в разделе «Средства чтения поддерева» <xref:System.Xaml.XamlReader>, или см. в разделе <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Member" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Member" />
        <altmember cref="T:System.Xaml.XamlMember" />
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.NamespaceDeclaration Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.NamespaceDeclaration Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Namespace As NamespaceDeclaration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::NamespaceDeclaration ^ Namespace { System::Xaml::NamespaceDeclaration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : System.Xaml.NamespaceDeclaration" Usage="System.Xaml.XamlReader.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.NamespaceDeclaration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>При реализации в производном классе получает сведения о пространстве имен XAML из текущего узла.</summary>
        <value>Сведения о пространстве имен XAML, если они доступны; в противном случае — значение <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Предполагаемой структуре этого API — вернуть ненулевой результат только в том случае, если <xref:System.Xaml.XamlReader.NodeType%2A> текущий узел является <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>. Свойство не объявляет пространство имен XAML, которое применяется к объектам или элементы в общем смысле масштаба данных согласно интерпретации в контексте схемы XAML. Приложение должно предоставить возможность кэшировать данные для действующего пространства имен XAML, так как он проходит через узлы XAML, если требуется, чтобы эти данные в виде, отличном от как контекст схемы XAML сообщает об этом в модуль записи. См. в разделе <xref:System.Xaml.XamlXmlReader.Namespace%2A> для заметок на эталонной реализацией.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Namespace" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Namespace" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xaml.XamlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property NodeType As XamlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlNodeType NodeType { System::Xaml::XamlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xaml.XamlNodeType" Usage="System.Xaml.XamlReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>При реализации в производном классе получает тип текущего узла.</summary>
        <value>Значение перечисления <see cref="T:System.Xaml.XamlNodeType" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Читатели поддерево можно вызвать <xref:System.Xaml.XamlReader.NodeType%2A>, поведение ограничений. Дополнительные сведения см. в разделе «Средства чтения поддерева» <xref:System.Xaml.XamlReader>, или см. в разделе <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.NodeType" />
        <altmember cref="P:System.Xaml.XamlXmlReader.NodeType" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public abstract bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool Read();" />
      <MemberSignature Language="F#" Value="abstract member Read : unit -&gt; bool" Usage="xamlReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>При реализации в производном классе предоставляет следующий узел XAML из источника, если он имеется.</summary>
        <returns>Значение <see langword="true" />, если узел доступен; в противном случае — значение <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Читатели поддерево можно вызвать <xref:System.Xaml.XamlReader.Read%2A>, поведение ограничений. Дополнительные сведения см. в разделе «Средства чтения поддерева» <xref:System.Xaml.XamlReader>, или см. в разделе <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xaml.XamlXmlReader.Read" />
        <altmember cref="M:System.Xaml.XamlObjectReader.Read" />
      </Docs>
    </Member>
    <Member MemberName="ReadSubtree">
      <MemberSignature Language="C#" Value="public virtual System.Xaml.XamlReader ReadSubtree ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Xaml.XamlReader ReadSubtree() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.ReadSubtree" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ReadSubtree () As XamlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Xaml::XamlReader ^ ReadSubtree();" />
      <MemberSignature Language="F#" Value="abstract member ReadSubtree : unit -&gt; System.Xaml.XamlReader&#xA;override this.ReadSubtree : unit -&gt; System.Xaml.XamlReader" Usage="xamlReader.ReadSubtree " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlReader</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Xaml.XamlReader" />, основанный на текущем объекте <see cref="T:System.Xaml.XamlReader" />, где возвращенный объект <see cref="T:System.Xaml.XamlReader" /> используется для перебора поддерева структуры узлов XAML.</summary>
        <returns>Новый экземпляр средства чтения XAML для данного поддерева.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод имеет реализацию по умолчанию и возвращает допустимый <xref:System.Xaml.XamlReader>. Возвращенный <xref:System.Xaml.XamlReader> является внутренним классом, который ограничивает определенные <xref:System.Xaml.XamlReader> действия. Ограничения согласованы с целью чтения только определенного поддерева большего источника для набора узлов XAML и возврата окончания файла или `null` в текущем узле при выходе из поддерева.  
  
 Как правило, следует проверить текущий узел из первоначального <xref:System.Xaml.XamlReader.Read%2A> для определения необходимости чтения поддерева. Как вы установите этот флажок, возможно, зависящие от реализации; Однако следует Избегайте создания нескольких читателей поддерево для каждого поддерева. Кроме того, избегайте вызова чтения поддерева для определенных вариантов узла (например, <xref:System.Xaml.XamlNodeType.NamespaceDeclaration>), не может содержать поддерево узлов.  
  
 После получения чтения поддерева, необходимо вызвать <xref:System.Xaml.XamlReader.Read%2A> ее, чтобы получить текущий узел (или вызвать <xref:System.Xaml.XamlReader.Skip%2A> получить следующий узел). Не получен автоматически положение начального узла из средства чтения поддерева при ее создании.  
  
 Средство чтения, можно получить, вызвав <xref:System.Xaml.XamlReader.ReadSubtree%2A> из это значение по умолчанию реализация является внутренним классом. Внутренний класс выполняет его поведение на основании <xref:System.Xaml.XamlReader> , для которого создается реализация используется, когда <xref:System.Xaml.XamlReader.ReadSubtree%2A> вызывается. Внутренний класс предназначена для упаковки <xref:System.Xaml.XamlReader.Read%2A> и поведением общие обхода. Обход остается в пределах предполагаемого поддерева, отслеживая <xref:System.Xaml.XamlNodeType.StartMember> / <xref:System.Xaml.XamlNodeType.EndMember> пары или <xref:System.Xaml.XamlNodeType.StartObject> / <xref:System.Xaml.XamlNodeType.EndObject> пары. Он также правильно возвращает `false` для <xref:System.Xaml.XamlReader.Read%2A> и `true` для <xref:System.Xaml.XamlReader.IsEof%2A> когда средство чтения находится в конце поддерево, согласно его точки входа. Как правило, предполагается, что любой <xref:System.Xaml.XamlReader> вызов из средства чтения поддерева API имеет ту же реализацию, как общий <xref:System.Xaml.XamlReader> за исключением обхода, ограничивающий поведение.  
  
 Тем не менее <xref:System.Xaml.XamlReader.ReadSubtree%2A> является виртуальным. Таким образом, определенный <xref:System.Xaml.XamlReader> реализации может предоставить поведение, которое отличается от <xref:System.Xaml.XamlReader> поведения внутренней программы-оболочки; и <xref:System.Xaml.XamlReader> реализации даже возможность отключения функции чтения поддерева, возвращая <xref:System.NotImplementedException> или другие исключения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SchemaContext">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlSchemaContext SchemaContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlSchemaContext SchemaContext" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.SchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property SchemaContext As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlSchemaContext ^ SchemaContext { System::Xaml::XamlSchemaContext ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaContext : System.Xaml.XamlSchemaContext" Usage="System.Xaml.XamlReader.SchemaContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>При реализации в производном классе получает объект, предоставляющий сведения о контексте схемы XAML для данного набора сведений.</summary>
        <value>Объект, предоставляющий сведения о контексте схемы XAML для данного набора сведений.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.SchemaContext" />
        <altmember cref="P:System.Xaml.XamlXmlReader.SchemaContext" />
      </Docs>
    </Member>
    <Member MemberName="Skip">
      <MemberSignature Language="C#" Value="public virtual void Skip ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Skip() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.Skip" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Skip ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Skip();" />
      <MemberSignature Language="F#" Value="abstract member Skip : unit -&gt; unit&#xA;override this.Skip : unit -&gt; unit" Usage="xamlReader.Skip " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Пропускает текущий узел и перемещает позицию средства чтения на следующий узел.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Один раз в таком случае <xref:System.Xaml.XamlReader.Read%2A> вызывается по умолчанию <xref:System.Xaml.XamlReader.Skip%2A> реализации. Обычно не вызывается <xref:System.Xaml.XamlReader.Skip%2A> и <xref:System.Xaml.XamlReader.Read%2A> в последовательности.  
  
 В используемом по умолчанию <xref:System.Xaml.XamlReader.Skip%2A> реализации различных действий в зависимости от которой <xref:System.Xaml.XamlReader.NodeType%2A> позиция средства чтения находится на. Если средство чтения расположено на <xref:System.Xaml.XamlNodeType.StartMember> или <xref:System.Xaml.XamlNodeType.StartObject>, члена или объект пропускается. Для других <xref:System.Xaml.XamlReader.NodeType%2A> значения, будет выполнено никаких действий кроме вызова <xref:System.Xaml.XamlReader.Read%2A> из текущей позиции.  
  
 Читатели поддерево можно вызвать <xref:System.Xaml.XamlReader.Skip%2A>, поведение ограничений. Дополнительные сведения см. в разделе «Средства чтения поддерева» <xref:System.Xaml.XamlReader>, или см. в разделе <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 Поведение узла дерева <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> основан на XML-эквивалент <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType>. На основе <xref:System.Xml.XmlReader.Skip%2A?displayProperty=nameWithType> эквивалентности поведение <xref:System.Xaml.XamlReader.Skip%2A?displayProperty=nameWithType> пропускает узла и его поддерева, а не только одна запись узла.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.IDisposable.Dispose">
      <MemberSignature Language="C#" Value="void IDisposable.Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.IDisposable.Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xaml.XamlReader.System#IDisposable#Dispose" />
      <MemberSignature Language="VB.NET" Value="Sub Dispose () Implements IDisposable.Dispose" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.IDisposable.Dispose() = IDisposable::Dispose;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, используемые текущим экземпляром класса <see cref="T:System.Xaml.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public abstract System.Xaml.XamlType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xaml.XamlType Type" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Type" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Type As XamlType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Xaml::XamlType ^ Type { System::Xaml::XamlType ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Type : System.Xaml.XamlType" Usage="System.Xaml.XamlReader.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>При реализации в производном классе получает объект <see cref="T:System.Xaml.XamlType" /> текущего узла.</summary>
        <value>Объект <see cref="T:System.Xaml.XamlType" /> текущего узла или значение <see langword="null" />, если текущая позиция средства чтения находится не в объекте.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Читатели поддерево можно вызвать <xref:System.Xaml.XamlReader.Type%2A>, поведение ограничений. Дополнительные сведения см. в разделе «Средства чтения поддерева» <xref:System.Xaml.XamlReader>, или см. в разделе <xref:System.Xaml.XamlReader.ReadSubtree%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Type" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Type" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public abstract object Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Value" />
      <MemberSignature Language="DocId" Value="P:System.Xaml.XamlReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property Value As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::Object ^ Value { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : obj" Usage="System.Xaml.XamlReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xaml</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>При реализации в производном классе получает значение текущего узла.</summary>
        <value>Значение текущего узла или значение <see langword="null" />, если текущая позиция средства чтения находится не в типе узла <see cref="F:System.Xaml.XamlNodeType.Value" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Xaml.XamlObjectReader.Value" />
        <altmember cref="P:System.Xaml.XamlXmlReader.Value" />
      </Docs>
    </Member>
  </Members>
</Type>