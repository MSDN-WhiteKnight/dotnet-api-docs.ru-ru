<Type Name="ISerializable" FullName="System.Runtime.Serialization.ISerializable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ab2f630d925cd8460c6398bc881fc6f802d0fe1" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58695300" /></Metadata><TypeSignature Language="C#" Value="public interface ISerializable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISerializable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Serialization.ISerializable" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISerializable" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISerializable" />
  <TypeSignature Language="F#" Value="type ISerializable = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Позволяет объекту управлять его собственной сериализацией и десериализацией.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Любой класс, который может быть сериализован должны быть отмечены <xref:System.SerializableAttribute>. Если класс должен управлять своим процессом сериализации, он может реализовывать <xref:System.Runtime.Serialization.ISerializable> интерфейс. <xref:System.Runtime.Serialization.Formatter> Вызовы <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> во время сериализации и заполняет предоставленный <xref:System.Runtime.Serialization.SerializationInfo> все данные, необходимые для представления объекта. <xref:System.Runtime.Serialization.Formatter> Создает <xref:System.Runtime.Serialization.SerializationInfo> с типом объекта в графе. Объекты, которые необходимо отправить прокси для сами могут использовать <xref:System.Runtime.Serialization.SerializationInfo.FullTypeName%2A> и <xref:System.Runtime.Serialization.SerializationInfo.AssemblyName%2A> методы <xref:System.Runtime.Serialization.SerializationInfo> для изменения передаваемых данных.  
  
 В случае наследования класса можно сериализовать класс, производный от базового класса, который реализует <xref:System.Runtime.Serialization.ISerializable>. В этом случае производного класса должны вызывать реализацию базового класса <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> внутри своей реализации <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A>. В противном случае данные из базового класса не будут сериализованы.  
  
 <xref:System.Runtime.Serialization.ISerializable> Один интерфейс подразумевает наличие конструктора с конструктором подписи (<xref:System.Runtime.Serialization.SerializationInfo> сведения <xref:System.Runtime.Serialization.StreamingContext> контекста). Во время десериализации текущий конструктор вызывается только после данных в <xref:System.Runtime.Serialization.SerializationInfo> быть десериализовано модулем форматирования. Как правило этот конструктор должен быть защищен, если класс не запечатан.  
  
 Невозможно гарантировать порядок, в котором десериализации объектов. Например если один тип ссылается на тип, который не был десериализован, возникает исключение. При создании типов, имеющих такие зависимости при обойти проблему путем реализации `IDeserializationCallback` интерфейс и `OnDeserialization` метод.  
  
 Архитектура сериализации обрабатывает типы объектов, которые расширяют <xref:System.MarshalByRefObject> так же, как типы, расширяющие <xref:System.Object>. Эти типы могут быть помечены <xref:System.SerializableAttribute> и реализовать <xref:System.Runtime.Serialization.ISerializable> интерфейсом, как и любой другой тип объекта. Их состояние объекта записывается и сохранены в потоке.  
  
 Если эти типы используются в методе <xref:System.Runtime.Remoting>, инфраструктура удаленного взаимодействия предоставляет суррогат, который выгружает типичный сериализации и вместо этого сериализует прокси <xref:System.MarshalByRefObject>. Суррогат представляет вспомогательный объект, который знает, как сериализовывать и десериализовывать объекты определенного типа. Прокси-сервер, невидимой для пользователя в большинстве случаев будет иметь тип <xref:System.Runtime.Remoting.ObjRef>.  
  
 В рамках общего конструктивного шаблона было бы необычные класс может быть атрибутом serializable и расширять <xref:System.MarshalByRefObject>. Разработчикам следует внимательно подумать о возможные сценарии сериализации и удаленное взаимодействие, при объединении этих двух характеристик. Один из примеров, где это могло быть применимо — <xref:System.IO.MemoryStream>. Хотя базовый класс <xref:System.IO.MemoryStream> (<xref:System.IO.Stream>) начиная с позиции <xref:System.MarshalByRefObject>, можно записать состояние <xref:System.IO.MemoryStream> и восстановите ее по своему желанию. Таким образом, может быть значимыми для сериализации состояния этого потока в базу данных и восстановление его на более позднем этапе во времени. Тем не менее при использовании с помощью удаленного взаимодействия, этот тип объекта будет отправлен.  
  
 Дополнительные сведения о сериализации классов, расширяющих <xref:System.MarshalByRefObject>, см. в разделе <xref:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector>. Дополнительные сведения о реализации <xref:System.Runtime.Serialization.ISerializable>, см. в разделе [пользовательская сериализация](~/docs/standard/serialization/custom-serialization.md).  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Runtime.Serialization.ISerializable> интерфейса позволяет определить поведение пользовательской сериализации для класса.  
  
 [!code-cpp[ISerializable Interface Example#1](~/samples/snippets/cpp/VS_Snippets_Remoting/ISerializable Interface Example/CPP/iobjectreference.cpp#1)]
 [!code-csharp[ISerializable Interface Example#1](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable Interface Example/CS/iobjectreference.cs#1)]
 [!code-vb[ISerializable Interface Example#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable Interface Example/VB/iobjectreference.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Реализуйте этот интерфейс позволяет объекту участвовать в сериализации и десериализации.</para></block>
    <altmember cref="T:System.Runtime.Remoting.Messaging.RemotingSurrogateSelector" />
    <related type="Article" href="~/docs/standard/serialization/xml-and-soap-serialization.md">Сериализация XML и SOAP</related>
    <related type="Article" href="~/docs/standard/serialization/custom-serialization.md">Пользовательская сериализация</related>
  </Docs>
  <Members>
    <Member MemberName="GetObjectData">
      <MemberSignature Language="C#" Value="public void GetObjectData (System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetObjectData(class System.Runtime.Serialization.SerializationInfo info, valuetype System.Runtime.Serialization.StreamingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Serialization.ISerializable.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetObjectData (info As SerializationInfo, context As StreamingContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetObjectData(System::Runtime::Serialization::SerializationInfo ^ info, System::Runtime::Serialization::StreamingContext context);" />
      <MemberSignature Language="F#" Value="abstract member GetObjectData : System.Runtime.Serialization.SerializationInfo * System.Runtime.Serialization.StreamingContext -&gt; unit" Usage="iSerializable.GetObjectData (info, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Serialization.Formatters</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="info" Type="System.Runtime.Serialization.SerializationInfo" />
        <Parameter Name="context" Type="System.Runtime.Serialization.StreamingContext" />
      </Parameters>
      <Docs>
        <param name="info">Объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> для заполнения данными.</param>
        <param name="context">Конечный объект (см. <see cref="T:System.Runtime.Serialization.StreamingContext" />) для этой сериализации.</param>
        <summary>Заполняет объект <see cref="T:System.Runtime.Serialization.SerializationInfo" /> данными, необходимыми для сериализации целевого объекта.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Любые объекты, включенные в <xref:System.Runtime.Serialization.SerializationInfo> автоматически отслеживаются и сериализовано модулем форматирования.  
  
 Код, который вызывает <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> требует <xref:System.Security.Permissions.SecurityPermission> для предоставления служб сериализации. Связанное перечисление: <xref:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Не гарантируется, что этот метод будет вызываться только один раз для экземпляра объекта во время сериализации. Таким образом метод должен быть реализован таким образом, что его поведение будет таким же, независимо от того, сколько раз он вызывается.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Runtime.Serialization.ISerializable.GetObjectData%2A> метод, чтобы задать значения для сериализованный объект. Код использует <xref:System.Runtime.Serialization.SerializationInfo.AddValue%2A> метод <xref:System.Runtime.Serialization.SerializationInfo> класса для хранения альтернативных значений при сериализации объекта. И наоборот, если конструктор `Person` класса вызывается во время десериализации, alternatve значения можно получить с помощью <xref:System.Runtime.Serialization.SerializationInfo.GetValue%2A> метод, а присвоено полей объекта.  
  
 [!code-csharp[ISerializable_GetObjectData#0](~/samples/snippets/csharp/VS_Snippets_Remoting/ISerializable_GetObjectData/cs/ISerializable_GetObjectData.cs#0)]
 [!code-vb[ISerializable_GetObjectData#0](~/samples/snippets/visualbasic/VS_Snippets_Remoting/ISerializable_GetObjectData/vb/ISerializable_GetObjectData.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">У вызывающего объекта отсутствует необходимое разрешение.</exception>
        <altmember cref="T:System.Runtime.Serialization.StreamingContext" />
        <altmember cref="T:System.Runtime.Serialization.SerializationInfo" />
        <related type="Article" href="~/docs/standard/serialization/custom-serialization.md">Пользовательская сериализация</related>
      </Docs>
    </Member>
  </Members>
</Type>