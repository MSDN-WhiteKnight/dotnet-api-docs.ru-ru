<Type Name="MethodBody" FullName="System.Reflection.MethodBody">
  <Metadata><Meta Name="ms.openlocfilehash" Value="eafdd1e1de343cc976cc4fbe7592223d27d1cb00" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51881926" /></Metadata><TypeSignature Language="C#" Value="public class MethodBody" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi beforefieldinit MethodBody extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Reflection.MethodBody" />
  <TypeSignature Language="VB.NET" Value="Public Class MethodBody" />
  <TypeSignature Language="C++ CLI" Value="public ref class MethodBody" />
  <TypeSignature Language="F#" Value="type MethodBody = class" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет доступ к метаданным и MSIL для тела метода.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Reflection.MethodBody> Класс предоставляет доступ к информации о локальных переменных и предложений обработки исключений в теле метода, а также в промежуточный язык Майкрософт (MSIL), составляющих тело метода.  
  
 Можно использовать методы разрешения токен класса модуля, такие как <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, и <xref:System.Reflection.Module.ResolveType%2A>, для разрешения токенов в теле метода для <xref:System.Type> объектов, <xref:System.Reflection.MethodInfo> объектов, и <xref:System.Reflection.FieldInfo> объектов, которые предоставляют Подробные сведения о типах, методы и поля, доступ к MSIL в теле метода.  
  
> [!NOTE]
>  Для разбора тела методов необходимо иметь хорошее представление о метаданных и форматах инструкций MSIL. Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III: набор инструкций CIL». Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.  
  
 Для получения <xref:System.Reflection.MethodBody> объекта для данного метода, сначала получите <xref:System.Reflection.MethodInfo> объекта используется метод, затем вызвать <xref:System.Reflection.MethodInfo> объекта <xref:System.Reflection.MethodBase.GetMethodBody%2A> метод.  
  
   
  
## Examples  
 В следующем примере кода определяется метод теста с именем `MethodBodyExample` и отображает ее локальных переменных и предложений обработки исключений. <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста.  
  
 В примере используется <xref:System.Reflection.MethodBody.LocalVariables%2A> свойство для получения списка <xref:System.Reflection.LocalVariableInfo> объектов, а затем отображает их типы и порядок индексов. <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> Свойство используется для получения списка предложений обработки исключений.  
  
> [!NOTE]
>  Можно создать не все языки программирования <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> предложения. В примере Visual Basic показано предложение фильтра, с помощью Visual Basic `When` выражения, отсутствующего в примерах для других языков.  
  
 [!code-cpp[MethodBody#1](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#1)]
 [!code-csharp[MethodBody#1](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#1)]
 [!code-vb[MethodBody#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MethodBody ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MethodBody();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Reflection.MethodBody" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор вызывается производными классами во время создания <xref:System.Reflection.MethodBody> объектов.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExceptionHandlingClauses">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.ExceptionHandlingClause&gt; ExceptionHandlingClauses" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.ExceptionHandlingClauses" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property ExceptionHandlingClauses As IList(Of ExceptionHandlingClause)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ ExceptionHandlingClauses { System::Collections::Generic::IList&lt;System::Reflection::ExceptionHandlingClause ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ExceptionHandlingClauses : System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;" Usage="System.Reflection.MethodBody.ExceptionHandlingClauses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.ExceptionHandlingClause&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает список, содержащий все предложения обработки исключений в теле метода.</summary>
        <value>Список <see cref="T:System.Collections.Generic.IList`1" /> объектов <see cref="T:System.Reflection.ExceptionHandlingClause" />, представляющий предложения обработки исключений в теле метода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Список содержит все предложения всех блоков в теле метода. Каждый <xref:System.Reflection.ExceptionHandlingClause> объект содержит информацию, определяющую блока try, с которым он связан.  
  
> [!NOTE]
>  Работа с предложения обработки исключений требует глубокого понимания метаданных и форматах инструкций MSIL. Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III: набор инструкций CIL». Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.  
  
   
  
## Examples  
 В следующем примере кода определяется метод теста с именем `MethodBodyExample` и отображает информацию о его предложения обработки исключений. <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста. <xref:System.Reflection.MethodBody.ExceptionHandlingClauses%2A> Свойство используется для получения списка <xref:System.Reflection.ExceptionHandlingClause> объектов.  
  
> [!NOTE]
>  Можно создать не все языки программирования <xref:System.Reflection.ExceptionHandlingClauseOptions.Filter?displayProperty=nameWithType> предложения. В примере Visual Basic показано предложение фильтра, с помощью Visual Basic `When` выражения, отсутствующего в примерах для других языков.  
  
 Данный пример кода является частью большего примера для <xref:System.Reflection.MethodBody> класса.  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#4](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#4)]
[!code-csharp[MethodBody#4](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#4)]
[!code-vb[MethodBody#4](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#4)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#7](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#7)]
[!code-csharp[MethodBody#7](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#7)]
[!code-vb[MethodBody#7](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#7)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.ExceptionHandlingClause" />
        <altmember cref="T:System.Reflection.ExceptionHandlingClauseOptions" />
      </Docs>
    </Member>
    <Member MemberName="GetILAsByteArray">
      <MemberSignature Language="C#" Value="public virtual byte[] GetILAsByteArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int8[] GetILAsByteArray() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Reflection.MethodBody.GetILAsByteArray" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetILAsByteArray () As Byte()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual cli::array &lt;System::Byte&gt; ^ GetILAsByteArray();" />
      <MemberSignature Language="F#" Value="abstract member GetILAsByteArray : unit -&gt; byte[]&#xA;override this.GetILAsByteArray : unit -&gt; byte[]" Usage="methodBody.GetILAsByteArray " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает код MSIL тела метода в виде массива байтов.</summary>
        <returns>Массив типа <see cref="T:System.Byte" />, который содержит MSIL для тела метода.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно использовать методы разрешения токен класса модуля, такие как <xref:System.Reflection.Module.ResolveType%2A>, <xref:System.Reflection.Module.ResolveMethod%2A>, и <xref:System.Reflection.Module.ResolveMember%2A>, для разрешения токенов в теле метода для <xref:System.Type> объектов, <xref:System.Reflection.MethodInfo> объектов, и <xref:System.Reflection.FieldInfo> объектов, которые предоставляют Подробные сведения о типах, методы и поля, доступ к MSIL в теле метода.  
  
> [!NOTE]
>  Для разбора тела методов необходимо иметь хорошее представление о метаданных и форматах инструкций MSIL. Сведения можно найти в документации по Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III: набор инструкций CIL». Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Reflection.Module.ResolveType(System.Int32,System.Type[],System.Type[])" />
        <altmember cref="M:System.Reflection.Module.ResolveMethod(System.Int32,System.Type[],System.Type[])" />
      </Docs>
    </Member>
    <Member MemberName="InitLocals">
      <MemberSignature Language="C#" Value="public virtual bool InitLocals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitLocals" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.InitLocals" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property InitLocals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool InitLocals { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.InitLocals : bool" Usage="System.Reflection.MethodBody.InitLocals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, которое определяет, будут ли локальные переменные в теле метода инициализированы значениями по умолчанию, предусмотренными для соответствующих типов.</summary>
        <value>Значение <see langword="true" />, если тело метода содержит код, инициализирующий локальные переменные значениями <see langword="null" /> для ссылочных типов, или нулевыми значениями для типов значений; в обратном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Reflection.MethodBody.InitLocals%2A> Свойство ссылается на переменные, которые не инициализируются явно, то есть, переменные, объявленные с помощью синтаксиса, такие как `int x;` в C# или `Dim x As Integer` в Visual Basic.  
  
 Ссылочные переменные инициализируются `null` по умолчанию. Числовые переменные инициализируются нулевым значением.  
  
   
  
## Examples  
 В следующем примере кода определяется метод теста с именем `MethodBodyExample` и отображает ее локальных переменных и предложений обработки исключений. <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста. <xref:System.Reflection.MethodBody.MaxStackSize%2A> И <xref:System.Reflection.MethodBody.InitLocals%2A> будут показаны свойства.  
  
 Данный пример кода является частью большего примера для <xref:System.Reflection.MethodBody> класса.  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalSignatureMetadataToken">
      <MemberSignature Language="C#" Value="public virtual int LocalSignatureMetadataToken { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LocalSignatureMetadataToken" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalSignatureMetadataToken" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalSignatureMetadataToken As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int LocalSignatureMetadataToken { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalSignatureMetadataToken : int" Usage="System.Reflection.MethodBody.LocalSignatureMetadataToken" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает токен метаданных для подписи, которая описывает локальные переменные для этого метода в метаданных.</summary>
        <value>Целочисленное значение, представляющее токен метаданных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.Reflection.MethodBody.LocalVariables%2A> свойство для получения сведений о локальных переменных метода.  
  
> [!NOTE]
>  Сведения о подписях локальных переменных можно найти в документации по Common Language Infrastructure (CLI), особенно «раздел II: определение метаданных и семантика». Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalVariables">
      <MemberSignature Language="C#" Value="public virtual System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt; LocalVariables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.Generic.IList`1&lt;class System.Reflection.LocalVariableInfo&gt; LocalVariables" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.LocalVariables" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property LocalVariables As IList(Of LocalVariableInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ LocalVariables { System::Collections::Generic::IList&lt;System::Reflection::LocalVariableInfo ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalVariables : System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;" Usage="System.Reflection.MethodBody.LocalVariables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IList&lt;System.Reflection.LocalVariableInfo&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает список локальных переменных, объявленных в теле метода.</summary>
        <value>Список <see cref="T:System.Collections.Generic.IList`1" /> объектов <see cref="T:System.Reflection.LocalVariableInfo" />, которые описывают локальные переменные, объявленные в теле метода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это следует маркер метаданных для подписи локальной переменной, предоставляемые <xref:System.Reflection.MethodBody.LocalSignatureMetadataToken%2A> свойство.  
  
   
  
## Examples  
 В следующем примере кода определяется метод теста с именем `MethodBodyExample` и отображает сведения о ее локальных переменных. <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста. <xref:System.Reflection.MethodBody.LocalVariables%2A> Свойство используется для получения списка <xref:System.Reflection.LocalVariableInfo> объектов.  
  
 Данный пример кода является частью большего примера для <xref:System.Reflection.MethodBody> класса.  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#3](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#3)]
[!code-csharp[MethodBody#3](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#3)]
[!code-vb[MethodBody#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#3)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
[!code-cpp[MethodBody#6](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#6)]
[!code-csharp[MethodBody#6](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#6)]
[!code-vb[MethodBody#6](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Reflection.LocalVariableInfo" />
      </Docs>
    </Member>
    <Member MemberName="MaxStackSize">
      <MemberSignature Language="C#" Value="public virtual int MaxStackSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxStackSize" />
      <MemberSignature Language="DocId" Value="P:System.Reflection.MethodBody.MaxStackSize" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property MaxStackSize As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxStackSize { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxStackSize : int" Usage="System.Reflection.MethodBody.MaxStackSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает максимальное количество элементов в стеке операторов при выполнении метода.</summary>
        <value>Максимальное количество элементов в стеке операторов при выполнении метода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в документации Common Language Infrastructure (CLI), особенно «Раздел II: определение метаданных и семантика» и «Раздел III: набор инструкций CIL». Документация доступна в Интернете; см. страницы [ECMAC# и стандарты Common Language Infrastructure](https://go.microsoft.com/fwlink/?LinkID=99212) на сайте MSDN и [Стандарт ECMA-335 — общеязыковая инфраструктура (CLI)](https://go.microsoft.com/fwlink/?LinkID=65552) на международном веб-сайте организации ECMA.  
  
   
  
## Examples  
 В следующем примере кода определяется метод теста с именем `MethodBodyExample` и отображает ее локальных переменных и предложений обработки исключений. <xref:System.Reflection.MethodBase.GetMethodBody%2A?displayProperty=nameWithType> Метод используется для получения <xref:System.Reflection.MethodBody> для метода теста. <xref:System.Reflection.MethodBody.MaxStackSize%2A> И <xref:System.Reflection.MethodBody.InitLocals%2A> будут показаны свойства.  
  
 Данный пример кода является частью большего примера для <xref:System.Reflection.MethodBody> класса.  
  
 [!code-cpp[MethodBody#2](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#2)]
 [!code-csharp[MethodBody#2](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#2)]
 [!code-vb[MethodBody#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#2)]  
[!code-cpp[MethodBody#5](~/samples/snippets/cpp/VS_Snippets_CLR/MethodBody/cpp/source.cpp#5)]
[!code-csharp[MethodBody#5](~/samples/snippets/csharp/VS_Snippets_CLR/MethodBody/CS/source.cs#5)]
[!code-vb[MethodBody#5](~/samples/snippets/visualbasic/VS_Snippets_CLR/MethodBody/VB/source.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>