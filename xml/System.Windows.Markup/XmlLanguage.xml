<Type Name="XmlLanguage" FullName="System.Windows.Markup.XmlLanguage">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0fc5c9d7ccc483a89348a2562b726a3f04e807b6" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55321253" /></Metadata><TypeSignature Language="C#" Value="public class XmlLanguage" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlLanguage extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XmlLanguage" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlLanguage" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlLanguage" />
  <TypeSignature Language="F#" Value="type XmlLanguage = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Markup.XmlLanguageConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет тег языка для использования в разметке XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Тег языка может иметь или не иметь зарегистрированный <xref:System.Globalization.CultureInfo> наличия в системе, где интерпретируется XAML.  
  
 Этот класс полезен для работы со значениями, представленные с помощью `xml:lang` в формате XML.  
  
 Языковые теги, которые можно указать в виде двух символов или в виде переносимых языкового стандарта. См. в разделе [RFC 3066](https://go.microsoft.com/fwlink/?LinkId=132454).  
  
 Обратите внимание, что спецификация XML позволяет пустую строку для `xml:lang`, несмотря на то, что они не разрешены в RFC 3066; таким образом, <xref:System.Windows.Markup.XmlLanguage> введите разрешает «» (пустая строка атрибута). Создан конструктором по умолчанию <xref:System.Windows.Markup.XmlLanguage> действует так, будто создан с параметром «» (пустая строка).  
  
<a name="xamlAttributeUsage_XmlLanguage"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<object property="prefix"/>  
- or -  
<object property="prefix-subcode"/>  
```  
  
<a name="xamlValues_XmlLanguage"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *префикс*  
 Префикс языка, с помощью указанных ISO 639-1 префикс значений. Например «en» или «zh». Значения в верхнем регистре принимаются и преобразуются в нижний регистр. Это также может быть пустой атрибут, «».  
  
 *дополнительный код*  
 Если указано, должен предшествовать один дефис. После этого дополнительный код, как определено в RFC 3066. Наиболее типичный сценарий использования, а также то, что скорее всего, будет правильно сопоставлен <xref:System.Globalization.CultureInfo>, является обозначение страны или региона, например «-us» или «-hk». Значения в верхнем регистре принимаются и преобразуются в нижний регистр.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Empty">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage Empty { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.Windows.Markup.XmlLanguage Empty" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.Empty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property Empty As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::Windows::Markup::XmlLanguage ^ Empty { System::Windows::Markup::XmlLanguage ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Empty : System.Windows.Markup.XmlLanguage" Usage="System.Windows.Markup.XmlLanguage.Empty" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает статический экземпляр <see cref="T:System.Windows.Markup.XmlLanguage" />, как он был бы создан методом <see cref="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" /> с тегом языка как пустой строкой атрибута.</summary>
        <value>Версия <see cref="T:System.Windows.Markup.XmlLanguage" /> с пустым тегом языка для использования в операциях сравнения.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это значение действует <xref:System.Windows.Markup.XmlLanguage> соответствующий <xref:System.String.Empty?displayProperty=nameWithType>, чей <xref:System.Windows.Markup.XmlLanguage.GetEquivalentCulture%2A> результатом является <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEquivalentCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetEquivalentCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetEquivalentCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetEquivalentCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEquivalentCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetEquivalentCulture();" />
      <MemberSignature Language="F#" Value="member this.GetEquivalentCulture : unit -&gt; System.Globalization.CultureInfo" Usage="xmlLanguage.GetEquivalentCulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает соответствующий эквивалент <see cref="T:System.Globalization.CultureInfo" /> для данного <see cref="T:System.Windows.Markup.XmlLanguage" />, если и только если такой <see cref="T:System.Globalization.CultureInfo" /> зарегистрирован для значения <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" /> данного <see cref="T:System.Windows.Markup.XmlLanguage" /></summary>
        <returns>Класс <see cref="T:System.Globalization.CultureInfo" />, который может использоваться для вызовов API локализации и глобализации, принимающих такой тип как аргумент.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если нет эквивалента <xref:System.Globalization.CultureInfo> может быть создано, этот метод вызывает исключение. Если вы не хотите обрабатывать исключения, вызовите <xref:System.Windows.Markup.XmlLanguage.GetSpecificCulture%2A> вместо этого.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Зарегистрированные <see cref="T:System.Globalization.CultureInfo" /> для предоставленного <see cref="T:System.Windows.Markup.XmlLanguage" /> отсутствуют, как выяснилось в результате вызова <see cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />.</exception>
        <altmember cref="M:System.Globalization.CultureInfo.GetCultureInfoByIetfLanguageTag(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="GetLanguage">
      <MemberSignature Language="C#" Value="public static System.Windows.Markup.XmlLanguage GetLanguage (string ietfLanguageTag);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Markup.XmlLanguage GetLanguage(string ietfLanguageTag) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetLanguage(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetLanguage (ietfLanguageTag As String) As XmlLanguage" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Markup::XmlLanguage ^ GetLanguage(System::String ^ ietfLanguageTag);" />
      <MemberSignature Language="F#" Value="static member GetLanguage : string -&gt; System.Windows.Markup.XmlLanguage" Usage="System.Windows.Markup.XmlLanguage.GetLanguage ietfLanguageTag" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Markup.XmlLanguage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ietfLanguageTag" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ietfLanguageTag">Строка языка RFC 3066 или пустая строка.</param>
        <summary>Возвращает экземпляр <see cref="T:System.Windows.Markup.XmlLanguage" />, основанный на строке, представляющей язык согласно RFC 3066.</summary>
        <returns>Новый объект <see cref="T:System.Windows.Markup.XmlLanguage" /> с предоставленной строкой в качестве значения <see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод фактически является конструктором.  
  
 Строка языка может быть пустым, иначе должны соответствовать [RFC 3066](https://go.microsoft.com/fwlink/?LinkId=132454) правила:  
  
-   Только первый подтег должен состоять из [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] буквы.  
  
-   Должен включать дополнительные вложенные теги [!INCLUDE[TLA#tla_ascii](~/includes/tlasharptla-ascii-md.md)] буквами или цифрами.  
  
-   Вложенные теги разделяются дефисом символ.  
  
-   Каждый вложенный тег должен быть 1 до 8 символов.  
  
-   Разрешены без дефисов в начале и конце строки.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Параметр <paramref name="ietfLanguageTag" /> не может иметь значение null.</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="ietfLanguageTag" /> не был пустым, но он не соответствовал синтаксису, определенному в RFC 3066.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSpecificCulture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo GetSpecificCulture ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Globalization.CultureInfo GetSpecificCulture() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.GetSpecificCulture" />
      <MemberSignature Language="VB.NET" Value="Public Function GetSpecificCulture () As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Globalization::CultureInfo ^ GetSpecificCulture();" />
      <MemberSignature Language="F#" Value="member this.GetSpecificCulture : unit -&gt; System.Globalization.CultureInfo" Usage="xmlLanguage.GetSpecificCulture " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает наиболее близко связанный не нейтральный объект <see cref="T:System.Globalization.CultureInfo" /> для <see cref="T:System.Windows.Markup.XmlLanguage" />.</summary>
        <returns><see cref="T:System.Globalization.CultureInfo" />, который может использоваться для вызовов [!INCLUDE[TLA2#tla_api](~/includes/tla2sharptla-api-md.md)] локализации и глобализации, принимающих тип в качестве аргумента.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если этот <xref:System.Windows.Markup.XmlLanguage> равен <xref:System.Windows.Markup.XmlLanguage.Empty%2A?displayProperty=nameWithType> этот метод возвратит <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>.  
  
 Этот метод находит зарегистрированный <xref:System.Globalization.CultureInfo> префиксы самая длинная — возможно это <xref:System.Windows.Markup.XmlLanguage>. Если зарегистрированные <xref:System.Globalization.CultureInfo> нейтральна (<xref:System.Globalization.CultureInfo.IsNeutralCulture%2A> — `true`), этот метод использует во время вызова <xref:System.Globalization.CultureInfo.CreateSpecificCulture%2A> для сопоставления нейтральную <xref:System.Globalization.CultureInfo> на одну из них.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Несвязанный не нейтральный класс <see cref="T:System.Globalization.CultureInfo" /> зарегистрирован для текущего <see cref="T:System.Windows.Markup.XmlLanguage" /><see cref="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IetfLanguageTag">
      <MemberSignature Language="C#" Value="public string IetfLanguageTag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string IetfLanguageTag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IetfLanguageTag As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ IetfLanguageTag { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.IetfLanguageTag : string" Usage="System.Windows.Markup.XmlLanguage.IetfLanguageTag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает строковое представление тега языка.</summary>
        <value>Строковое представление тега языка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство может возвращать нормализованную версию первоначально указанной строки, как предусмотрено <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>.  
  
 Это свойство также может возвращать <xref:System.String.Empty> Если пустая строка, предоставленная <xref:System.Windows.Markup.XmlLanguage.GetLanguage%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XmlLanguage.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="xmlLanguage.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает строку <see cref="T:System.String" />, которая представляет текущий объект <see cref="T:System.Windows.Markup.XmlLanguage" />.</summary>
        <returns>Объект <see cref="T:System.String" />, представляющий текущий объект <see cref="T:System.Windows.Markup.XmlLanguage" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта команда возвращает <xref:System.Windows.Markup.XmlLanguage.IetfLanguageTag%2A> значение текущего <xref:System.Windows.Markup.XmlLanguage>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>