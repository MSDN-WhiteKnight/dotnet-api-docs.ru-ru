<Type Name="XamlReader" FullName="System.Windows.Markup.XamlReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b22c826a543d05a1a2fac984e24ff64c3bfb8c40" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57939414" /></Metadata><TypeSignature Language="C#" Value="public class XamlReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XamlReader extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Markup.XamlReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XamlReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class XamlReader" />
  <TypeSignature Language="F#" Value="type XamlReader = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Считывает входные данные XAML и создает граф объекта с использованием средства чтения XAML по умолчанию в составе WPF и соответствующего средства записи объектов XAML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Синхронный <xref:System.Windows.Markup.XamlReader.Load%2A> методы являются статическими, но асинхронной <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> методы не являются статичными и требует запуска экземпляра <xref:System.Windows.Markup.XamlReader> класс для использования.  
  
 Выходные данные `Load` методов представляет собой один объект, который представляет корневой объект созданного дерева объектов или графа объектов. Объект диаграммы, созданные <xref:System.Windows.Markup.XamlReader> обычно добавляются к существующему дереву объекта приложения WPF во время выполнения. В противном случае новый граф объекта считается отключен в рамках модели приложения WPF. Это означает, что он не отображается, и доступ к которым осуществляется с помощью методов дерева объектов, как неприменима к дереву основной объект приложения WPF (например, API-интерфейсы <xref:System.Windows.FrameworkElement.FindName%2A>, <xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>). Дополнительные сведения о понятиях дерева объектов, см. в разделе [деревья в WPF](~/docs/framework/wpf/advanced/trees-in-wpf.md).  
  
 <xref:System.Windows.Markup.XamlReader> поддерживает следующие основные сценарии:  
  
-   **Клонирование/объект фабрики**: Без дополнительных механизмов ссылочного типа не может быть включен в более чем одной позиции в дерева объекта WPF. (Дополнительных механизмов, которые обеспечивают поддержку для совместного использования или повторно использовать в WPF примеры объектов, основанных на <xref:System.Windows.Freezable>, или поддержка часто совместного использования объектов, таких как <xref:System.Windows.Media.Brush> на которые имеются ссылки в качестве элементов из <xref:System.Windows.ResourceDictionary>.) Один из способов копируемый объект, который уже находится в дереве объектов — для сериализации объекта с помощью <xref:System.Windows.Markup.XamlWriter.Save%2A?displayProperty=nameWithType>. Затем можно сериализованной строки как входные данные для вызова <xref:System.Windows.Markup.XamlReader.Load%2A>, с потоком или <xref:System.Xml.XmlReader> как посредник.  
  
-   **Построение объектов на основе just-in-time информации**: Часто существуют другие способы изменения состояния существующих объектов позднего связывания или пользовательские входные данные. Например можно использовать то же значение, чтобы задать несколько свойств, или использовать привязку данных. Но если у вас есть сценарии, когда даже тип создаваемого объекта является только определимый во время выполнения или взаимодействия с пользователем, затем создать такой объект, создав строку, для <xref:System.Windows.Markup.XamlReader.Load%2A> входных данных часто является полезным приемом.  
  
-   **С помощью существующих методов ресурсов**: <xref:System.IO.Stream> Типа часто используются в других платформах и технологиях для передачи данных или объекты через границы приложения или подобных ситуаций в сети. Затем можно использовать <xref:System.IO.Stream> способы хранения и получения данных в формате XAML, который вы впоследствии будете использовать для создания объекта как часть приложения.  
  
-   **Документы фиксированного формата:** Приложение может загрузить локальный или загруженные документы XPS для включения в дерево объектов приложения WPF и пользовательский Интерфейс.  
  
> [!NOTE]
>  Иногда для настоящей документации описывается граф объектов, в отличие от дерева объектов. Отношение strict родители потомки не всегда существует в отношения между объектами время выполнения время выполнения приложения WPF, поэтому граф объекта более широкой областью применения терминология. Тем не менее так как платформа WPF также предоставляет два разных дерева концептуальное представление API-интерфейсы (<xref:System.Windows.LogicalTreeHelper>, <xref:System.Windows.Media.VisualTreeHelper>) метафора дерева по-прежнему адекватно применяется в большинстве случаев реального мира в WPF. С точки зрения языка XAML тем не менее, граф объекта часто является лучшим способом подумать о способов создания объектов из XAML, так как сам язык XAML не обязательно указывает методологии вспомогательного класса, которые приносят отношения больше в еще раз древовидной структуры.  
  
## <a name="code-access-security-loose-xaml-and-xamlreader"></a>Управление доступом для кода, Свободный XAML и XamlReader  
 XAML — это язык разметки, непосредственно представляющий создание и выполнение объекта. Таким образом, элементы, созданные в XAML, имеют такие же возможности взаимодействия с системными ресурсами (например, сетевой доступ и операции ввода-вывода файловой системы), как и эквивалентный созданный код.  
  
 [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] поддерживает [!INCLUDE[TLA2#tla_net](~/includes/tla2sharptla-net-md.md)] платформа безопасности [!INCLUDE[TLA#tla_cas](~/includes/tlasharptla-cas-md.md)]. Это означает, что содержимое [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)], работающее в зоне Интернет, сократило разрешения исполнения. "Свободный XAML" (страницы некомпилированного XAML, интерпретируемые во время загрузки средства просмотра XAML) и [!INCLUDE[TLA#tla_xbap](~/includes/tlasharptla-xbap-md.md)] обычно выполняются в этой Интернет-зоне и используют один набор разрешений.  Однако XAML, загруженный в полностью доверенное приложение, имеет такой же доступ к системным ресурсам, как ведущее приложение. Дополнительные сведения см. в разделе [Безопасность частичного доверия в WPF](~/docs/framework/wpf/wpf-partial-trust-security.md).  
  
 Последствия этих инструкций для <xref:System.Windows.Markup.XamlReader> является, что при разработке приложения необходимо принимать решения о доверии XAML вы решили загрузить. При загрузке XAML, который не является доверенным, рассмотрите возможность реализации собственных изолирования как загружать граф объектов.  
  
 <xref:System.Windows.Markup.XamlReader> может также вызываться частично доверяемого кода. В этом случае зона безопасности применяется для управления доступом для кода. Если что-либо в загруженных XAML является недопустимым в зоне безопасности Интернета, возникает исключения синтаксического анализа XAML. В разделе XBAP и в других случаях с частичным доверием на уровне платформы, где <xref:System.Windows.Markup.XamlReader> входит выполнения, вы получаете поведение исключения, как и в случае с вызовами явные частичного доверия.  
  
## <a name="wpf-xaml-xaml-readerswriters-and-xaml-language-versioning"></a>XAML WPF XAML модулей чтения/записи и управление версиями языка XAML  
 XAML2009 включает возможности языка, такие как [x: Reference](~/docs/framework/xaml-services/x-reference-markup-extension.md) и [x: FactoryMethod](~/docs/framework/xaml-services/x-factorymethod-directive.md). Можно использовать подписи `Load` или `Parse` для загрузки XAML, использующий эти функции. Тем не менее, эти средства языка не поддерживаются для XAML, которая должна быть компиляции разметки (например XAML для **страницы** действие в приложении WPF или любой XAML, который включает в себя задачи компиляции разметки в действия построения сборки).  
  
 Типы и технологии WPF в целом поддерживает основные понятия, которые зависят от доступа к внутренним компонентам WPF. К примеру способ реализации свойств зависимостей WPF полагается на внутренние методики для поиска эффективный члена типа. Доступ к эти внутренние компоненты обеспечивается XAML, чтение и запись интерфейсов API, входящих в <xref:System.Windows.Markup.XamlWriter> и <xref:System.Windows.Markup.XamlReader> из <xref:System.Windows.Markup> пространства имен и сборке PresentationFramework. Тем не менее средства чтения XAML более низкого уровня и записи XAML из сборки System.Xaml (классы, основанные на <xref:System.Xaml.XamlReader?displayProperty=nameWithType>, <xref:System.Xaml.XamlWriter?displayProperty=nameWithType>) не имеют доступа к внутренним компонентам WPF. Нет, нет зависимостей от System.Xaml в любую сборку относящихся к WPF. Без доступа к внутренним компонентам WPF чтения и записи System.Xaml не может правильно загрузить или сохранить все WPF типами или типами на основе типов WPF. В частности чтения и записи System.Xaml не понимают концепции, такие как резервное хранилище свойств, и все особенности того, как WPF использует стили, словари ресурсов и шаблонов свойство зависимостей WPF. Поэтому у вас сделать выбор:  
  
-   Если при загрузке типов WPF и/или использовании XAML в форме BAML любым способом, используйте средства чтения XAML PresentationFramework и записи XAML.  
  
-   Если вы не полагаться на все типы WPF или форма BAML кода XAML и не используются специализированные средства чтения XAML или реализацию модуля записи XAML по причинам, характерные для соответствующей платформы, используйте средства чтения XAML System.Xaml и записи XAML.  
  
## <a name="systemxaml-backing-implementation-in-net-4"></a>System.Xaml реализации в .NET 4  
 <xref:System.Windows.Markup.XamlReader> — Это вызываемый область API для синтаксического анализа XAML уровня среды WPF. Тот же базовый XAML синтаксический анализатор также выполняет XAML во время выполнения, загрузку и синтаксический анализ для приложений WPF, предназначенных [!INCLUDE[net_v30_short](~/includes/net-v30-short-md.md)] и [!INCLUDE[net_v35_short](~/includes/net-v35-short-md.md)].  
  
 Если вы ориентируетесь [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], внешний интерфейс API такой же, но части реализации построены на [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] общей реализации XAML в сборке System.Xaml, которая повышает многие отчетности и технические аспекты синтаксического анализа XAML. Нацеливание [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)] обязательно влечет за собой включение System.Xaml в качестве ссылки и сведения о реализации, такие как исключения, отправленные могут поступать из System.Xaml определенные типы.  
  
## Examples  
 В следующем примере выполняется преобразование <xref:System.Windows.Controls.Button> в строку с помощью <xref:System.Windows.Markup.XamlWriter> класса.  Строка затем загружаются обратно в <xref:System.Windows.Controls.Button> с помощью статического <xref:System.Windows.Markup.XamlReader.Load%2A> метод <xref:System.Windows.Markup.XamlReader> класса.  
  
 [!code-csharp[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[xamlreaderwritersnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Markup.XamlWriter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XamlReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XamlReader();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Markup.XamlReader" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAsync">
      <MemberSignature Language="C#" Value="public void CancelAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CancelAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.CancelAsync" />
      <MemberSignature Language="VB.NET" Value="Public Sub CancelAsync ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CancelAsync();" />
      <MemberSignature Language="F#" Value="member this.CancelAsync : unit -&gt; unit" Usage="xamlReader.CancelAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Прерывает текущую операцию асинхронной загрузки, если имеется отложенная асинхронная операция загрузки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.CancelAsync%2A> представляет собой асинхронную операцию; Таким образом некоторые загрузка может происходить до отмены операции.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWpfSchemaContext">
      <MemberSignature Language="C#" Value="public static System.Xaml.XamlSchemaContext GetWpfSchemaContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Xaml.XamlSchemaContext GetWpfSchemaContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.GetWpfSchemaContext" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetWpfSchemaContext () As XamlSchemaContext" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Xaml::XamlSchemaContext ^ GetWpfSchemaContext();" />
      <MemberSignature Language="F#" Value="static member GetWpfSchemaContext : unit -&gt; System.Xaml.XamlSchemaContext" Usage="System.Windows.Markup.XamlReader.GetWpfSchemaContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xaml.XamlSchemaContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает объект <see cref="T:System.Xaml.XamlSchemaContext" />, который представляет параметры схемы контекста WPF для класса <see cref="T:System.Windows.Markup.XamlReader" />.</summary>
        <returns>Объект <see cref="T:System.Xaml.XamlSchemaContext" />, который представляет параметры контекста схемы WPF для класса <see cref="T:System.Windows.Markup.XamlReader" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Load">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Считывает входные данные XAML и возвращает корень соответствующего дерева объектов.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">XAML для загрузки в форме потока.</param>
        <summary>Считывает входные данные XAML в указанном пространстве имен <see cref="T:System.IO.Stream" /> и возвращает корневой объект <see cref="T:System.Object" /> соответствующего дерева объектов.</summary>
        <returns>Объект в корне созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере сохраняется <xref:System.Windows.Controls.Button> в <xref:System.IO.MemoryStream> с помощью <xref:System.Windows.Markup.XamlWriter> класса. Поток затем загружаются обратно в <xref:System.Windows.Controls.Button> с помощью статического <xref:System.Windows.Markup.XamlReader.Load%2A> метод <xref:System.Windows.Markup.XamlReader> класса.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> — <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xaml.XamlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xaml.XamlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xaml.XamlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XamlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xaml::XamlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xaml.XamlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xaml.XamlReader" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="reader">Объект <see cref="T:System.Xaml.XamlReader" />. Ожидается, что он инициализируется входными данными XAML.</param>
        <summary>Считывает входные данные XAML через предоставленный класс <see cref="T:System.Xaml.XamlReader" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Входные данные <xref:System.Xaml.XamlReader> может быть <xref:System.Windows.Baml2006.Baml2006Reader>. Это, как вы можете загрузить BAML, во время выполнения или для целей средства локализации.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="static member Load : System.Xml.XmlReader -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Класс <see cref="T:System.Xml.XmlReader" />, который уже загрузил входные данные XAML, чтобы загрузить в XML-форму.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.Xml.XmlReader" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере выполняется преобразование <xref:System.Windows.Controls.Button> в строку с помощью <xref:System.Windows.Markup.XamlWriter> класса.  Строка затем загружаются обратно в <xref:System.Windows.Controls.Button> с помощью статического <xref:System.Windows.Markup.XamlReader.Load%2A> метод <xref:System.Windows.Markup.XamlReader> класса.  
  
 [!code-csharp[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/csharp/VS_Snippets_Wpf/XamlReaderWriterSnippets/CSharp/Window1.xaml.cs#xamlreaderloadxmlreader)]
 [!code-vb[XamlReaderWriterSnippets#XamlReaderLoadXmlReader](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XamlReaderWriterSnippets/visualbasic/window1.xaml.vb#xamlreaderloadxmlreader)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> — <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static object Load (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Load(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Load(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Load(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Load : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Load (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Поток, содержащий входные данные XAML для загрузки.</param>
        <param name="parserContext">Контекстная информация, используемая анализатором.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.IO.Stream" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> — <see langword="null" />.  
  
-или- 
 <paramref name="parserContext" /> — <see langword="null" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <MemberGroup MemberName="LoadAsync">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Считывает разметку XAML и возвращает объект, соответствующий корню указанной разметки.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream -&gt; obj" Usage="xamlReader.LoadAsync stream" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">Поток, содержащий загружаемые входные данные XAML.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.IO.Stream" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асинхронная операция загрузки XAML изначально вернет объект, который является чисто корневым объектом. Асинхронно затем анализ XAML по-прежнему и любые дочерние объекты заполняются корневом каталоге. Это отличается от обычной XAML WPF, обработки, поведение и его взаимодействию с концепциями WPF во время жизни объекта. Во взаимодействии типичный (синхронные) перед возвратом элемента и его загрузке reporting заполняются все свойства объекта, включая все дочерние коллекции. Это поведение соответствует методологии снизу вверх для создания дерева, где корневой объект представляет последний объект станет доступным.  
  
 Обычно возвращаемый объект будет назначен в нужное расположение в дереве объектов приложения WPF, с учетом того что содержимое может по-прежнему поступать и могут вызывать периодические обновления макета, если все содержимое предоставляется как часть пользовательского интерфейса. По этой причине он является типичным изолировать или виртуализировать любой асинхронно загруженных объектов из XAML и использовать логику приложения или состояние приложения для уведомления о том, когда <xref:System.Windows.Markup.XamlReader.LoadCompleted> обрабатывается.  
  
 Чтобы <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> для загрузки XAML, входные данные асинхронно, корневой элемент в XAML, который входных данных должен содержать атрибут и значение `x:SynchronousMode="Async"`. Значение является обрабатываются с учетом регистра. Если входной корень XAML не содержит `x:SynchronousMode="Async"`, исключение не создается, и вызов обрабатывается как синхронный (см. в разделе <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%29>).  
  
 Только одну асинхронную операцию загрузки для каждого экземпляра <xref:System.Windows.Markup.XamlReader> класса могут выполняться одновременно.  Если более одного асинхронную операцию по тем же экземпляром <xref:System.Windows.Markup.XamlReader> класс <xref:System.InvalidOperationException> возникает исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> — <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Несколько операций загрузки с одним <see cref="T:System.Windows.Markup.XamlReader" /> параллельно поставлены в режим ожидания.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Function LoadAsync (reader As XmlReader) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.Xml.XmlReader -&gt; obj" Usage="xamlReader.LoadAsync reader" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">Существующий класс <see cref="T:System.Xml.XmlReader" />, который уже загрузил/прочитал входные данные XAML.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.Xml.XmlReader" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асинхронная операция загрузки XAML изначально вернет объект, который является чисто корневым объектом. Асинхронно затем анализ XAML по-прежнему и любые дочерние объекты заполняются корневом каталоге. Это отличается от обычной XAML WPF, обработки, поведение и его взаимодействию с концепциями WPF во время жизни объекта. Во взаимодействии типичный (синхронные) перед возвратом элемента и его загрузке reporting заполняются все свойства объекта, включая все дочерние коллекции. Это поведение соответствует методологии снизу вверх для создания дерева, где корневой объект представляет последний объект станет доступным.  
  
 Обычно возвращаемый объект из будет назначен <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> некоторое расположение в дереве объектов вашего приложения, с учетом того, содержимое может по-прежнему поступать и могут вызывать периодические обновления макета, если все содержимое предоставляется как часть ПОЛЬЗОВАТЕЛЬСКИЙ ИНТЕРФЕЙС. По этой причине он является типичным изолировать или виртуализировать любой асинхронно загруженных объектов из XAML и использовать логику приложения или состояние приложения для уведомления о том, когда <xref:System.Windows.Markup.XamlReader.LoadCompleted> обрабатывается.  
  
 Чтобы <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> для загрузки XAML, входные данные асинхронно, должен содержать корневой элемент в разметке XAML, атрибут и значение `x:SynchronousMode="Async"`. Значение является обрабатываются с учетом регистра. Если корень разметки XAML не содержит `x:SynchronousMode="Async"`, исключение не создается, и вызов обрабатывается как синхронный (см. в разделе <xref:System.Windows.Markup.XamlReader.Load%28System.Xml.XmlReader%29>).  
  
 Только одну асинхронную операцию загрузки для каждого экземпляра <xref:System.Windows.Markup.XamlReader> класса могут выполняться одновременно.  Если более одного асинхронную операцию по тем же экземпляром <xref:System.Windows.Markup.XamlReader> класс <xref:System.InvalidOperationException> возникает исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> — <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Несколько операций загрузки параллельно выполняется с одним <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadAsync">
      <MemberSignature Language="C#" Value="public object LoadAsync (System.IO.Stream stream, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object LoadAsync(class System.IO.Stream stream, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.LoadAsync(System.IO.Stream,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ LoadAsync(System::IO::Stream ^ stream, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="member this.LoadAsync : System.IO.Stream * System.Windows.Markup.ParserContext -&gt; obj" Usage="xamlReader.LoadAsync (stream, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="stream">Поток, содержащий загружаемые входные данные XAML.</param>
        <param name="parserContext">Контекстная информация, используемая анализатором.</param>
        <summary>Считывает входные данные XAML в указанном классе <see cref="T:System.IO.Stream" /> и возвращает корневой объект соответствующего дерева объектов.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Асинхронная операция загрузки XAML изначально вернет объект, который является чисто корневым объектом. Асинхронно затем анализ XAML по-прежнему и любые дочерние объекты заполняются корневом каталоге. Это отличается от обычной XAML WPF, обработки, поведение и его взаимодействию с концепциями WPF во время жизни объекта. Во взаимодействии типичный (синхронные) перед возвратом элемента и его загрузке reporting заполняются все свойства объекта, включая все дочерние коллекции. Это поведение соответствует методологии снизу вверх для создания дерева, где корневой объект представляет последний объект станет доступным.  
  
 Обычно возвращаемый объект будет назначен в нужное расположение в дереве объектов вашего приложения, с учетом того что содержимое может по-прежнему поступать и могут вызывать периодические обновления макета, если все содержимое предоставляется как часть пользовательского интерфейса. По этой причине он является типичным изолировать или виртуализировать любой асинхронно загруженных объектов из XAML и использовать логику приложения или состояние приложения для уведомления о том, когда <xref:System.Windows.Markup.XamlReader.LoadCompleted> обрабатывается.  
  
 Чтобы <xref:System.Windows.Markup.XamlReader.LoadAsync%2A> для асинхронной загрузки разметки, должен содержать корневой элемент в разметке XAML, атрибут и значение `x:SynchronousMode="Async"`. Значение является обрабатываются с учетом регистра. Если корень разметки XAML не содержит `x:SynchronousMode="Async"`, исключение не создается, и вызов обрабатывается как синхронный (см. в разделе <xref:System.Windows.Markup.XamlReader.Load%28System.IO.Stream%2CSystem.Windows.Markup.ParserContext%29>).  
  
 Только одну асинхронную операцию загрузки для каждого экземпляра <xref:System.Windows.Markup.XamlReader> класса могут выполняться одновременно.  Если более одного асинхронную операцию по тем же экземпляром <xref:System.Windows.Markup.XamlReader> класс <xref:System.InvalidOperationException> возникает исключение.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="stream" /> — <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Несколько операций загрузки параллельно выполняется с одним <see cref="T:System.Windows.Markup.XamlReader" />.</exception>
        <altmember cref="T:System.Windows.Markup.XamlWriter" />
      </Docs>
    </Member>
    <Member MemberName="LoadCompleted">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.AsyncCompletedEventHandler LoadCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.AsyncCompletedEventHandler LoadCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Markup.XamlReader.LoadCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Event LoadCompleted As AsyncCompletedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::AsyncCompletedEventHandler ^ LoadCompleted;" />
      <MemberSignature Language="F#" Value="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " Usage="member this.LoadCompleted : System.ComponentModel.AsyncCompletedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.AsyncCompletedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит по завершении операции асинхронной загрузки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Markup.XamlReader.LoadCompleted> также возникает, когда прерывает асинхронную операцию загрузки.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.AsyncCompletedEventHandler" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Parse">
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Считывает разметку в указанной текстовой строке и возвращает объект, соответствующий корню указанной разметки.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Parse (xamlText As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText);" />
      <MemberSignature Language="F#" Value="static member Parse : string -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse xamlText" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="xamlText">Введенное значение XAML как единственная текстовая строка.</param>
        <summary>Считывает входные данные XAML в указанной текстовой строке и возвращает объект, соответствующий корню указанной разметки.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация вызывает <xref:System.Windows.Markup.XamlReader.Load%2A> внутренне после создания потока из строки. См. в разделе <xref:System.Windows.Markup.XamlReader.Load%2A> Дополнительные сведения, такие как возможные исключения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public static object Parse (string xamlText, System.Windows.Markup.ParserContext parserContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig object Parse(string xamlText, class System.Windows.Markup.ParserContext parserContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Markup.XamlReader.Parse(System.String,System.Windows.Markup.ParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Object ^ Parse(System::String ^ xamlText, System::Windows::Markup::ParserContext ^ parserContext);" />
      <MemberSignature Language="F#" Value="static member Parse : string * System.Windows.Markup.ParserContext -&gt; obj" Usage="System.Windows.Markup.XamlReader.Parse (xamlText, parserContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xamlText" Type="System.String" />
        <Parameter Name="parserContext" Type="System.Windows.Markup.ParserContext" />
      </Parameters>
      <Docs>
        <param name="xamlText">Введенное значение XAML как единственная текстовая строка.</param>
        <param name="parserContext">Контекстная информация, используемая анализатором.</param>
        <summary>Считывает разметку XAML в указанной текстовой строке (используя указанный класс <see cref="T:System.Windows.Markup.ParserContext" />) и возвращает объект, соответствующий корню указанной разметки.</summary>
        <returns>Корневой объект созданного дерева объектов.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Реализация вызывает <xref:System.Windows.Markup.XamlReader.Load%2A> внутренне после создания потока из строки. См. в разделе <xref:System.Windows.Markup.XamlReader.Load%2A> Дополнительные сведения, такие как возможные исключения.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>