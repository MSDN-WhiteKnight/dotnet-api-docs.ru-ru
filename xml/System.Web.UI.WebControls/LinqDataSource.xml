<Type Name="LinqDataSource" FullName="System.Web.UI.WebControls.LinqDataSource">
  <Metadata><Meta Name="ms.openlocfilehash" Value="729f547459d16d92aa81f597137e6216474a2b35" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57924386" /></Metadata><TypeSignature Language="C#" Value="public class LinqDataSource : System.Web.UI.WebControls.ContextDataSource, System.Web.DynamicData.IDynamicDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LinqDataSource extends System.Web.UI.WebControls.ContextDataSource implements class System.Web.DynamicData.IDynamicDataSource, class System.Web.UI.IDataSource" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.LinqDataSource" />
  <TypeSignature Language="VB.NET" Value="Public Class LinqDataSource&#xA;Inherits ContextDataSource&#xA;Implements IDynamicDataSource" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinqDataSource : System::Web::UI::WebControls::ContextDataSource, System::Web::DynamicData::IDynamicDataSource" />
  <TypeSignature Language="F#" Value="type LinqDataSource = class&#xA;    inherit ContextDataSource&#xA;    interface IDynamicDataSource&#xA;    interface IDataSource" />
  <AssemblyInfo>
    <AssemblyName>System.Web.Extensions</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.ContextDataSource</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-3.5">System.Web.UI.DataSourceControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Web.DynamicData.IDynamicDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Web.UI.IDataSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Selecting")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("ContextTypeName")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.bmp")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.ParseChildren(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Web.UI.PersistChildren(false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Web.UI.Design.WebControls.LinqDataSourceDesigner, System.Web.Extensions.Design, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Web.Extensions, Version=3.5.0.0, Culture=neutral, PublicKeyToken=31bf3856ad364e35", System.ComponentModel.ToolboxItemFilterType.Require)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-3.5">
      <AttributeName>System.Drawing.ToolboxBitmap(typeof(System.Web.UI.WebControls.LinqDataSource), "LinqDataSource.ico")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Позволяет использовать LINQ на страницах ASP.NET при помощи текста разметки, для извлечения и изменения данных из объекта данных.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В этом разделе.  
  
-   [Введение](#introduction)  
  
-   [Порядок операций](#order_of_operations)  
  
-   [Упорядочение данных](#ordering_data)  
  
-   [Группировка данных](#grouping_data)  
  
-   [Изменения данных](#data_modifications)  
  
-   [Вычисление значений во время выполнения](#evaluating_value_at_run_time)  
  
-   [Работа с хранимыми процедурами](#working_with_stored_procedures)  
  
-   [Декларативный синтаксис](#declarative_syntax)  
  
<a name="introduction"></a>   
## <a name="introduction"></a>Вступление  
 Language-Integrated Query (LINQ) — это синтаксис запросов, который определяет набор операторов запроса, которые позволяют выполнять операции обхода, фильтрации и проекции можно выразить декларативно в любой. На основе NET язык программирования. Объект данных может быть коллекцию данных в памяти или объект, представляющий данные из базы данных. Можно извлечь или изменить данные без необходимости написания команд SQL для каждой операции.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления позволяет использовать LINQ в веб-страницу ASP.NET, задав свойства в текст разметки. <xref:System.Web.UI.WebControls.LinqDataSource> Использует LINQ to SQL для автоматического создания команд. Дополнительные сведения о LINQ to SQL, см. в разделе [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).  
  
 При получении данных из коллекции в памяти данных, задайте <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойства класса, содержащего коллекцию данных. Можно задать <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойства для свойства или поля, которое возвращает коллекцию данных. Например, возможно, класс с именем `Person` , содержащий свойство с именем `FavoriteCities` , возвращающий массив строковых значений. В этом случае можно задать <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойства `Person` и задайте <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойства `FavoriteCities`.  
  
 При выполнении запроса базы данных, сначала необходимо создать классы сущностей, представляющих базы данных и ее таблицы. Можно использовать [!INCLUDE[vs_ordesigner_long](~/includes/vs-ordesigner-long-md.md)] или программа SqlMetal.exe для создания этих классов. Затем устанавливается <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойство в класс, представляющий базу данных и задать <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойства для свойства, которое представляет таблицу базы данных.  
  
<a name="order_of_operations"></a>   
## <a name="order-of-operations"></a>Порядок операций  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления применяет операции с данными в следующем порядке:  
  
1.  Где (укажите, какие записи данных для возврата).  
  
2.  Предложение Order By (сортировки).  
  
3.  Group By (Группировать записи данных, которые совместно используют значения).  
  
4.  Порядок групп (сортировки сгруппированных данных).  
  
5.  Выберите, (укажите, какие поля или свойства для возврата).  
  
6.  Auto сортировки (сортировки данных по свойству, которое пользователь выбрал).  
  
7.  Страница "автоматические" (извлекает набор записей данных, которые были выбраны пользователем).  
  
 Можно добавить условия для <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство включения фильтра записи данных, возвращаемых из запроса. Если <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство не задано, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления извлекает все записи из объекта данных.  
  
<a name="ordering_data"></a>   
## <a name="ordering-data"></a>Упорядочение данных  
 Использовании <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство, чтобы указать имена свойств из возвращаемых данных для сортировки.  
  
> [!NOTE]
>  При использовании <xref:System.Web.UI.WebControls.LinqDataSource> управления [!INCLUDE[ss2k](~/includes/ss2k-md.md)] или [!INCLUDE[ssEW](~/includes/ssew-md.md)] и <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойству `true`, необходимо указать значение в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство. По умолчанию <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойство `true`. Если присвоить значение <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства, необходимо также включить все столбцы идентификаторов в список свойств, который возвращается в запросе.  
  
<a name="grouping_data"></a>   
## <a name="grouping-data"></a>Группировка данных  
 Использовании <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойство, чтобы указать, какие свойства используются для объединения записей данных, которые имеют одинаковые значения. При группировании данных, можно включить `Key` и `It`, который динамически создаются свойства, в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. `Key` Свойство ссылается на значения в свойства или свойств, которые были использованы для группирования данных. Например, если данные группируются по свойство с именем `Category`, `Key` свойство будет содержать все уникальные значения в `Category` свойство. `It` Свойство ссылается на набор отдельных записей в группировании данных. Можно выполнить итерацию по `It` свойство для извлечения отдельных записей, которые были объединены в операции группирования. Например, если данные группируются по свойство с именем `Category`, `It` свойство содержит все отдельные записи, которые совместно используют общее значение `Category` свойства.  
  
 Использовании <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойство, чтобы указать свойства, которые будут использоваться для сортировки сгруппированных данных. При группировании данных, <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство задает способ сортировки отдельных записей в сгруппированных данных.  
  
 По умолчанию <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления получает значения для всех свойств объекта данных. Использовании <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство, чтобы указать, какие свойства необходимо вернуть, если вы хотите работать с подмножеством доступных свойств. Операции Select применяется после Where, Order By и Group By операций. Таким образом при создании псевдонимов в предложении Select, псевдоним не доступны в других предложениях.  
  
<a name="data_modifications"></a>   
## <a name="data-modifications"></a>Модификации данных  
 Можно указать, разрешено ли изменение данных с помощью <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, и <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> свойства. Пользовательский интерфейс для изменения данных из <xref:System.Web.UI.WebControls.LinqDataSource> управления обычно предоставляются с помощью элемента управления с привязкой данных, таких как <xref:System.Web.UI.WebControls.DetailsView> элемента управления. Дополнение к параметру <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A>, или <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> для `true`, необходимые для включения автоматического изменения данных следующих условий:  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> Свойство не может быть присвоено значение.  
  
-   <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Свойство не может быть присвоено значение.  
  
-   Класс, который будет назначен <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойства должен быть производным от <xref:System.Data.Linq.DataContext>.  
  
-   Свойство, которое назначается <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойства должен быть производным от <xref:System.Data.Linq.Table%601>.  
  
 Можно ограничить свойства, отображаемые в элементе управления с привязкой к данным двумя способами. Можно либо установить <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства подмножество свойств, или можно определить поля для элемента управления с привязкой данных, добавив <xref:System.Web.UI.WebControls.DataControlField> элементов управления. Тем не менее если задать <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства, это означает, что невозможно включить автоматическое обновление, операций вставки и удаления. Если вы хотите включить автоматического изменения данных во время работы с подмножеством доступных свойств, не задавайте <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. Вместо этого получить все свойства из объекта данных и управление, какие из них отображаются с помощью элемента управления с привязкой данных. При использовании <xref:System.Web.UI.WebControls.DetailsView> управления или <xref:System.Web.UI.WebControls.GridView> элемента управления, необходимо также задать <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> или <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> свойства `false`. Это предотвращает автоматически, включая кнопки для редактирования и удаления данных элемента управления с привязкой данных. Все значения, которые не отображаются в элементе управления с привязкой к данным, хранятся в состоянии представления. Они передаются без изменений в источник данных при операции обновления данных.  
  
<a name="evaluating_value_at_run_time"></a>   
## <a name="evaluating-values-at-run-time"></a>Вычисление значений во время выполнения  
 Если у вас для оценки значений во время выполнения для порядка сортировки, фильтрации, или значений группировки, можно добавить параметры для <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A>, <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A>, или <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекций.  
  
 Если вы хотите указать значения по умолчанию, можно добавить параметры к <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> коллекции.  
  
 Если вы хотите проверить или изменить значения, перед выполнением операции с данными, можно обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Deleting>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserting>, <xref:System.Web.UI.WebControls.LinqDataSource.Selecting>, или <xref:System.Web.UI.WebControls.LinqDataSource.Updating> события. Можно также обрабатывать эти события для отмены операции с данными или для проверки ошибок, возникших при задании свойств в классе данных, на основе ввода пользователя.  
  
 Чтобы проверить значения после завершения операции с данными, обработайте <xref:System.Web.UI.WebControls.LinqDataSource.Deleted>, <xref:System.Web.UI.WebControls.LinqDataSource.Inserted>, <xref:System.Web.UI.WebControls.LinqDataSource.Selected>, или <xref:System.Web.UI.WebControls.LinqDataSource.Updated> события.  
  
<a name="working_with_stored_procedures"></a>   
## <a name="working-with-stored-procedures"></a>Работа с хранимыми процедурами  
 Использовании <xref:System.Web.UI.WebControls.LinqDataSource> управления для получения данных из хранимой процедуры, создав обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий. В событии обработчик, необходимо вызвать метод в классе контекста данных, который представляет хранимую процедуру и присвоить результат <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> свойство <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> объекта. Если вы хотите включить автоматическое обновление, операций вставки и удаления данных, тип, который возвращается из метода должен соответствовать типу, который указан в <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство. Дополнительные сведения о создании методов контекста данных, см. в разделе [как: создать методы DataContext, сопоставленные с хранимыми процедурами и функциями (реляционный конструктор объектов)](https://msdn.microsoft.com/library/e7ca32f1-50b3-48af-ad92-ceafd749296a).  
  
<a name="declarative_syntax"></a>   
## <a name="declarative-syntax"></a>Декларативный синтаксис  
  
```  
<asp:LinqDataSource  
    AutoGenerateOrderByClause="True|False"  
    AutoGenerateWhereClause="True|False"  
    AutoPage="True|False"  
    AutoSort="True|False"  
    ContextTypeName="string"  
    EnableDelete="True|False"  
    EnableInsert="True|False"  
    EnableTheming="True|False"  
    EnableUpdate="True|False"  
    EnableViewState="True|False"  
    GroupBy="string"  
    ID="string"  
    OnContextCreated="ContextCreated event handler"  
    OnContextCreating="ContextCreating event handler"  
    OnContextDisposing="ContextDisposing event handler"  
    OnDataBinding="DataBinding event handler"  
    OnDeleted="Deleted event handler"  
    OnDeleting="Deleting event handler"  
    OnDisposed="Disposed event handler"  
    OnInit="Init event handler"  
    OnInserted="Inserted event handler"  
    OnInserting="Inserting event handler"  
    OnLoad="Load event handler"  
    OnPreRender="PreRender event handler"  
    OnSelected="Selected event handler"  
    OnSelecting="Selecting event handler"  
    OnUnload="Unload event handler"  
    OnUpdated="Updated event handler"  
    OnUpdating="Updating event handler"  
    OrderBy="string"  
    runat="server"  
    Select="string"  
    SkinID="string"  
    StoreOriginalValuesInViewState="True|False"  
    TableName="string"  
    Visible="True|False"  
    Where="string"  
>  
        <GroupByParameters />  
        <InsertParameters />  
        <OrderByParameters />  
        <SelectParameters />  
        <WhereParameters />  
</asp:LinqDataSource>  
```  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления, который извлекает данные из класса сущностей с именем `Products`. Класс сущностей может быть создан с помощью [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] или программа SqlMetal.exe. <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> Задано только те записи, которые содержат значение в `Price` которых превышает 50. Объект <xref:System.Web.UI.WebControls.GridView> привязан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> управления для отображения данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления, который позволяет пользователям обновлять, удалять и вставлять записи в источнике данных. Объект <xref:System.Web.UI.WebControls.DetailsView> привязан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> управления и позволяет пользователям просмотреть и изменить данные. Обратите внимание на то, что никакие команды SQL необходимы для выбора, обновления, удаления или вставки записей.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событие, которое задает объект данных на основе значения в веб-страницы.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления, настроенный для группирования данных по двум столбцам. `Key` Свойство ссылается на объект, который имеет два свойства: `ProductCategory` и `Color`. Объект, представленный `It` — файл переименован (псевдоним) `Products`. Переименованной `Products` содержит коллекцию отдельных записей в группировании. Каждый экземпляр будет содержать все столбцы из `Products` таблицы.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 В следующем примере показаны два <xref:System.Web.UI.WebControls.ListView> элементов управления, отображающих данные из <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления в предыдущем примере. Один <xref:System.Web.UI.WebControls.ListView> элемент управления отображает сгруппированных данных, а другой — <xref:System.Web.UI.WebControls.ListView> элемент управления отображает отдельные названия продуктов, которые принадлежат к этой группе. Вложенного элемента управления с привязкой к данным <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> свойству `Products`, который является псевдонимом для `It` объекта.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinqDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinqDataSource();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateOrderByClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateOrderByClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateOrderByClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateOrderByClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateOrderByClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateOrderByClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое указывает, создает ли элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> динамически предложение ORDER BY на основе значений в коллекции <see cref="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />.</summary>
        <value><see langword="true" /> Если <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> элемент управления создает предложение Order By; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При задании <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> свойства `true`, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления динамически создает предложение Order By, основанный на значениях в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции. <xref:System.Web.UI.WebControls.LinqDataSource> Управления сортирует данные по первого параметра и затем, кроме того, сортирует данные для каждого из них. Параметры, содержащие `null` или пустое значение не включаются в предложение Order By.  
  
 Не устанавливайте <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство при <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> присваивается `true`, так как он динамически создает предложение Order By. <xref:System.Web.UI.WebControls.LinqDataSource> Управления создает исключение, если <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> присваивается `true` и <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойству назначается значения.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> присвоено `true`. Параметр включается в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекцию, которая упорядочивает данные на основе свойства имя, которое пользователь выбирает из <xref:System.Web.UI.WebControls.DropDownList> элемента управления.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGenerateWhereClause">
      <MemberSignature Language="C#" Value="public bool AutoGenerateWhereClause { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGenerateWhereClause" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoGenerateWhereClause As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoGenerateWhereClause { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoGenerateWhereClause : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.AutoGenerateWhereClause</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее, создает ли динамически элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> оператор Where, основываясь на значениях, определенных в коллекции <see cref="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />.</summary>
        <value><see langword="true" />, если элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> создает оператор Where; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При задании <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойства `true`, <xref:System.Web.UI.WebControls.LinqDataSource> управления динамически создает предложение из параметров в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции. Каждый параметр, добавляемый <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекция должна иметь его <xref:System.Web.UI.WebControls.Parameter.Name%2A> свойство присвоено значение, соответствующее свойство в объекте данных, к которому происходит обращение. Автоматически созданный где предложение будет проверять, является ли значение, заданное в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции равен значению соответствующее свойство в объекте данных. Если указать более одного параметра, параметры связываются логической операцией `AND` операции. Параметры, содержащие `null` или пустое значение не включаются в Where предложение.  
  
 Автоматически созданный <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> предложение можно только для проверки на равенство и можно связать параметры только с `AND` операции. Не устанавливайте <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойства `true` Если необходимо добавить условие, которое не для проверки на равенство, или у вас связать параметры с `OR` операции. Эти задачи можно выполнить, задав <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойства `false` и добавление заполнители в <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> для каждого параметра в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции. В <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство, приставку каждый заполнитель символа @.  
  
 Не устанавливайте <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство при <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойство `true`, так как он динамически создает Where предложение. <xref:System.Web.UI.WebControls.LinqDataSource> Управления создает исключение, если <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойство `true` и <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойству назначается значения.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> присвоено `true`. Объект <xref:System.Web.UI.WebControls.GridView> привязан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> управления для отображения данных, возвращаемых из запроса. Объект <xref:System.Web.UI.WebControls.DropDownList> управления включено то есть три значения. Параметр включается в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции с именем, равным `Category,` которого совпадает с одним из свойств объекта данных. Его <xref:System.Web.UI.WebControls.ControlParameter.ControlID%2A> свойству присваивается идентификатор <xref:System.Web.UI.WebControls.DropDownList> элемента управления. <xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления автоматически создает <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство для фильтрации записей на основе значения, выбранного пользователем из <xref:System.Web.UI.WebControls.DropDownList> элемента управления. Запрос возвращает записи которого `Category` свойства совпадает со значением, выбранный пользователем из <xref:System.Web.UI.WebControls.DropDownList> элемента управления.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default7.aspx#7)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#7](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default7.aspx#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoPage">
      <MemberSignature Language="C#" Value="public bool AutoPage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoPage" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoPage As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoPage { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoPage : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoPage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает и задает значение, указывающее, поддерживает ли элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> переход между разделами данных во время выполнения.</summary>
        <value>Возвращает значение <see langword="true" />, если пользователь может просматривать данные. В противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задайте <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойства `true` включить разбиение на страницы в <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления. Чтобы разрешить пользователю просматривать данные, подключения элемента управления с привязкой данных, который предоставляет интерфейс для разбиения на страницы, чтобы <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления. Когда <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойству `true`, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления извлекает только достаточное количество записей для одной страницы в элементе управления с привязкой к данным. Она использует <xref:System.Linq.Enumerable.Skip%2A> и <xref:System.Linq.Enumerable.Take%2A> методы для получения записи для текущей страницы.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойству присвоено `true` и <xref:System.Web.UI.WebControls.GridView> элемента управления, привязанного к <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления. <xref:System.Web.UI.WebControls.GridView.AllowPaging%2A> Свойство <xref:System.Web.UI.WebControls.GridView> игнорируется `true` для предоставления интерфейса, которая позволяет странице "пользователи" в данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoSort">
      <MemberSignature Language="C#" Value="public bool AutoSort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoSort" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoSort As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoSort { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoSort : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.AutoSort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее на то, поддерживает ли элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> сортировку данных во время выполнения.</summary>
        <value>Значение <see langword="true" />, если пользователь может сортировать данные. В противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления поддерживает два подхода для сортировки данных. Можно использовать <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> свойство, чтобы включить сортировку во время выполнения, либо задать <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство, чтобы определить порядок сортировки во время разработки.  
  
 Задайте <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> свойства `true` Чтобы включить сортировку в <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления, который основан на выражение сортировки из элемента управления с привязкой данных. Элемент управления с привязкой к данным предоставляет интерфейс, позволяющий пользователю выбрать во время выполнения, какое свойство использовать для сортировки.  
  
 Можно программно установить порядок, в котором данные возвращаются, задав <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойства для свойства или свойств, используемых для сортировки. При <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство имеет значение свойства и <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> свойство `true`, выражение сортировки из элемента управления с привязкой к данным применяется после выражения в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство. Таким образом определяется конечный способ сортировки данных.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> свойству присвоено `true` и <xref:System.Web.UI.WebControls.GridView> элемента управления, привязанного к <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления. <xref:System.Web.UI.WebControls.GridView.AllowSorting%2A> Свойство <xref:System.Web.UI.WebControls.GridView> игнорируется `true` для предоставления интерфейса, который позволяет пользователям сортировать данные.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; ContextCreated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ ContextCreated;" />
      <MemberSignature Language="F#" Value="member this.ContextCreated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.ContextCreated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит после создания экземпляра объекта типа контекста.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreated> событие для проверки объекта типа контекста или изучить исключения, возникающие при создании объекта. Получение объекта типа контекста из <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объекта, связанного с данным событием. Получить исключение, возникшее во время операции с данными из <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> свойство.  
  
 Объекта типа контекста создается во время select, update, insert и операции удаления и используется во время запроса.  
  
 Имеется один раз, когда событие не вызывается. На этом этапе можно программно задать <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> свойства объекта во время <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий. Дополнительное условие является то, что исходные значения не должны храниться в состояние представления, либо этого объекта в <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> реализует свойство <xref:System.Data.Linq.ITable> интерфейс.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextCreating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; ContextCreating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextCreating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextCreating As EventHandler(Of LinqDataSourceContextEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceContextEventArgs ^&gt; ^ ContextCreating;" />
      <MemberSignature Language="F#" Value="member this.ContextCreating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " Usage="member this.ContextCreating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceContextEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед созданием экземпляра объекта типа контекста.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления создает экземпляр типа, который указан в <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойство. <xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления вызывает конструктор по умолчанию объекта контекста данных для создания экземпляра объекта. Возможно, что вам придется использовать конструктора не по умолчанию, или необходимо создать объект, который отличается от указанного в <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойство. В этом случае необходимо обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> событий и вручную создать объект контекста данных.  
  
 Объекта типа контекста создается во время select, update, insert и операции удаления.  
  
 Имеется один раз, когда событие не вызывается. На этом этапе можно программно задать <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> свойства объекта в обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий. Дополнительное условие является то, что исходные значения не должны храниться в состояние представления, либо этого объекта в <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Result%2A> реализует свойство <xref:System.Data.Linq.ITable> интерфейс.  
  
   
  
## Examples  
 Приведенный ниже показано, как создать объект контекста данных с помощью конструктора не по умолчанию во время <xref:System.Web.UI.WebControls.LinqDataSource.ContextCreating> событий. Код назначает объект <xref:System.Web.UI.WebControls.LinqDataSourceContextEventArgs.ObjectInstance%2A> свойство.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.ContextCreating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.ContextCreating/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextDisposing">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; ContextDisposing" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.ContextDisposing" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ContextDisposing As EventHandler(Of LinqDataSourceDisposeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDisposeEventArgs ^&gt; ^ ContextDisposing;" />
      <MemberSignature Language="F#" Value="member this.ContextDisposing : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " Usage="member this.ContextDisposing : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDisposeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед удалением объекта типа контекста.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы обрабатываете <xref:System.Web.UI.WebControls.LinqDataSource.ContextDisposing> событие, чтобы вручную удалить объект, или для выполнения очистки, относящиеся к объекту перед уничтожением объекта.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContextTypeName">
      <MemberSignature Language="C#" Value="public override string ContextTypeName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContextTypeName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property ContextTypeName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ContextTypeName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ContextTypeName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.ContextTypeName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя типа, содержащего свойство, значение которого включает предназначенные для извлечения данные.</summary>
        <value>Имя класса, из которого должны извлекаться данные.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании <xref:System.Web.UI.WebControls.LinqDataSource> управления для получения данных из коллекции в памяти данных или базы данных, необходимо задать два свойства. Первый — это класс контекста данных, представляющий источник данных. Второй — это свойство в классе контекста данных, содержащий данные. Можно задать <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> задано имя класса контекста данных и вы <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство в коллекцию данных, содержащий данные.  
  
 Например, при получении данных из базы данных, задайте <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> значения свойства имя класса, представляющего базу данных. Также задайте <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство к свойству, которое представляет таблицу в базе данных. Для создания классов из базы данных, используйте [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)] или программа SqlMetal.exe для автоматического создания этих классов.  
  
 При извлечении данных из коллекции данных в памяти, таких как массив, задайте <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> значения свойства имя класса, который содержит свойство массива. Затем установите <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство к свойству, которое возвращает массив.  
  
 Чтобы включить автоматическое обновление, вставка или удаление операции с помощью <xref:System.Web.UI.WebControls.LinqDataSource> класс элемента управления, назначенные <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойства должен быть производным от <xref:System.Data.Linq.DataContext>. Кроме того, свойство назначено <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойства должен быть производным от <xref:System.Data.Linq.Table%601>. Если вы не требуется для включения автоматического обновления, вставки или операции удаления, вы можете назначить имя любого типа класса, чтобы <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойство.  
  
 Сведения о том, как выбрать данные из экземпляра класса см. в разделе <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> свойство.  
  
   
  
## Examples  
 В следующем примере показано, как задать <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойство к классу, который содержит массив строк. Также показано, как задать свойство к классу (созданные [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]), представляющий базу данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 Класс с именем `ExampleDataContext` , представляет таблицу базы данных не отображается в этом примере. Для работы этого примера необходимо создать этот класс, добавив именованный Example.dbml и перетаскивание таблицы с именем фильма на класс LINQ To SQL [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]. Класс с именем `ExampleDataContext` со свойством, именуемым `Movies` создается.  
  
 В следующем примере класс с именем `MovieLibrary` , на который ссылается <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="CreateQueryableView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.WebControls.QueryableDataSourceView CreateQueryableView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateQueryableView" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateQueryableView () As QueryableDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::WebControls::QueryableDataSourceView ^ CreateQueryableView();" />
      <MemberSignature Language="F#" Value="override this.CreateQueryableView : unit -&gt; System.Web.UI.WebControls.QueryableDataSourceView" Usage="linqDataSource.CreateQueryableView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.QueryableDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает представление, доступное для запросов.</summary>
        <returns>Представление, доступное для запросов.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateView">
      <MemberSignature Language="C#" Value="protected virtual System.Web.UI.WebControls.LinqDataSourceView CreateView ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Web.UI.WebControls.LinqDataSourceView CreateView() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.CreateView" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateView () As LinqDataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Web::UI::WebControls::LinqDataSourceView ^ CreateView();" />
      <MemberSignature Language="F#" Value="abstract member CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView&#xA;override this.CreateView : unit -&gt; System.Web.UI.WebControls.LinqDataSourceView" Usage="linqDataSource.CreateView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.LinqDataSourceView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает новый экземпляр класса <see cref="T:System.Web.UI.WebControls.LinqDataSourceView" />, связанный с данным элементом управления.</summary>
        <returns>Объект, действующий как интерфейс для элементов управления с привязкой к данным.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы предоставить пользовательское представление, можно переопределить этот метод в производном классе.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delete">
      <MemberSignature Language="C#" Value="public int Delete (System.Collections.IDictionary keys, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Delete(class System.Collections.IDictionary keys, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Delete(System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Delete (keys As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Delete(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Delete : System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Delete (keys, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Ключевые значения строк для удаляемых записей.</param>
        <param name="oldValues">Значения строк, которые проверяются на наличие конфликтов данных.</param>
        <summary>Выполняет операцию удаления.</summary>
        <returns>Количество записей, затронутых операцией удаления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, нет необходимости вызывать <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> метод из кода. При использовании <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления с привязкой к данным элементом управления, элемент управления с привязкой к данным автоматически вызовет <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> метод, когда пользователь выполняет действие, чтобы удалить запись. Явно вызывать <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> метод, если вы хотите создать свой собственный процесс для удаления данных. Например, можно вызвать <xref:System.Web.UI.WebControls.LinqDataSource.Delete%2A> метод, если вы хотите удалить запись на основе события за пределами элемента управления с привязкой к данным.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Deleted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Deleted;" />
      <MemberSignature Language="F#" Value="member this.Deleted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Deleted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при завершении операции удаления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> событие перехват всех исключений, операции удаления, или проверить выходные параметры, после завершения операции. Можно извлечь выходные параметры из <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объект, который передается обработчикам событий.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection DeleteParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection DeleteParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeleteParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ DeleteParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeleteParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.DeleteParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Это свойство не используется классом <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>Коллекция параметров.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Deleting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; Deleting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Deleting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Deleting As EventHandler(Of LinqDataSourceDeleteEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceDeleteEventArgs ^&gt; ^ Deleting;" />
      <MemberSignature Language="F#" Value="member this.Deleting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " Usage="member this.Deleting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед операцией удаления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> событие для проверки объекта для удаления, для проверки на наличие ошибок проверки данных в классе данных, чтобы изменить значение перед выполнением операции удаления, либо отменить операцию удаления. <xref:System.Web.UI.WebControls.LinqDataSource> Управление передается <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> с обработчиками событий для <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> событий. <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> Объект содержит данные, которые будут удалены и позволяет отменить операцию удаления. Если данные класса вызывает <xref:System.Web.UI.WebControls.LinqDataSourceValidationException> исключение, <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs> объект содержит исключение в <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.Exception%2A> свойство.  
  
 Если исключение в обработчике событий для <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> событий, необходимо обрабатывать исключения в этом обработчике событий. Исключение не будут передаваться обработчику событий для <xref:System.Web.UI.WebControls.LinqDataSource.Deleted> событий (через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объекта). <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Свойство содержит только исключения, возникающие после <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> событий.  
  
   
  
## Examples  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Deleting> событий. Код отменяет операции удаления, основанное на свойстве в <xref:System.Web.UI.WebControls.LinqDataSourceDeleteEventArgs.OriginalObject%2A> свойство и значение из веб-страницы. В примере когда `OnSale` свойству `true`, пользователь должен выбрать <xref:System.Web.UI.WebControls.CheckBox> элемента управления, чтобы убедиться, что записи должны быть удалены.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Deleting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Deleting/vb/Default.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableDelete">
      <MemberSignature Language="C#" Value="public bool EnableDelete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableDelete" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableDelete As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableDelete { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableDelete : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableDelete" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableDelete</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, могут ли быть удалены записи данных при помощи элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value><see langword="true" />, если автоматическое удаление включено; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задайте <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> свойства `true` Если вы хотите разрешить пользователям удалять записи данных через <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления. Когда <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> — `true`, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления использует LINQ to SQL, чтобы автоматически создать команду для удаления данных. Необходимо включить интерфейс, позволяющий пользователям выбрать запись для удаления, такие как <xref:System.Web.UI.WebControls.DetailsView> элемента управления.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления не поддерживает автоматическое удаление при <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство или <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойству. В этом случае <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления вызывает исключение при попытке операции удаления.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления, имеющего <xref:System.Web.UI.WebControls.LinqDataSource.EnableDelete%2A> присвоено `true`. Объект <xref:System.Web.UI.WebControls.DetailsView> выводит данные и создает кнопку, которая позволяет пользователям удалять записи данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="EnableInsert">
      <MemberSignature Language="C#" Value="public bool EnableInsert { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableInsert" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableInsert As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableInsert { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableInsert : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableInsert" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableInsert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, могут ли быть вставлены записи данных при помощи элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value><see langword="true" />, если автоматическая вставки включена; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задайте <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> свойства `true` Если вы хотите разрешить пользователям вставлять записи данных через <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления. Когда <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> — `true`, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления использует LINQ to SQL, чтобы автоматически создать команду для вставки данных. Необходимо включить интерфейс, который позволяет пользователям вставки новых записей, таких как <xref:System.Web.UI.WebControls.DetailsView> элемента управления.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления не поддерживает автоматическая вставки при <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство или <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойству. В этом случае <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления вызывает исключение, если производится попытка выполнения операции вставки.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления, имеющего <xref:System.Web.UI.WebControls.LinqDataSource.EnableInsert%2A> присвоено `true`. Объект <xref:System.Web.UI.WebControls.DetailsView> выводит данные и отображает кнопку управления для вставки режим, где пользователи могут создавать и сохранять новые записи.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="EnableObjectTracking">
      <MemberSignature Language="C#" Value="public bool EnableObjectTracking { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableObjectTracking" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableObjectTracking As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableObjectTracking { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableObjectTracking : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, отслеживаются ли изменения в объекте контекста данных.</summary>
        <value><see langword="true" />, если изменения в объекте контекста данных отслеживаются; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> Свойство используется только в том случае, при выборе данных из объекта контекста данных LINQ To SQL.  
  
 Когда выполняется взаимодействие с данными только для чтения, установка <xref:System.Web.UI.WebControls.LinqDataSource.EnableObjectTracking%2A> свойства `false` повышает производительность, поскольку данные не кэшируются для определения того, если он был изменен. Тем не менее он также отключает отложенное выполнение запроса. Это свойство должно быть присвоено `true` Если вы хотите использовать отложенное выполнение запроса.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Data.Linq.DataContext.ObjectTrackingEnabled" />
      </Docs>
    </Member>
    <Member MemberName="EnableUpdate">
      <MemberSignature Language="C#" Value="public bool EnableUpdate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableUpdate" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberSignature Language="VB.NET" Value="Public Property EnableUpdate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EnableUpdate { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EnableUpdate : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.EnableUpdate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EnableUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, указывающее, могут ли быть обновлены записи данных при помощи элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value><see langword="true" />, если автоматическое обновление включено; в противном случае <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задайте <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> свойства `true` Если вы хотите дать пользователям возможность обновлять записи данных с помощью <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления. Когда <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> — `true`, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления использует LINQ to SQL, чтобы автоматически создать команду для обновления данных. Необходимо включить интерфейс, который позволяет пользователям обновлять записи, такие как <xref:System.Web.UI.WebControls.DetailsView> элемента управления.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource> Управления не поддерживает автоматическое обновление при <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство или <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойству. В этом случае <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления вызывает исключение, если производится попытка выполнения операции обновления.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления, имеющего <xref:System.Web.UI.WebControls.LinqDataSource.EnableUpdate%2A> присвоено `true`. Объект <xref:System.Web.UI.WebControls.DetailsView> выводит данные и создает кнопку, которая позволяет пользователям обновлять записи данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetView">
      <MemberSignature Language="C#" Value="protected override System.Web.UI.DataSourceView GetView (string viewName);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Web.UI.DataSourceView GetView(string viewName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetView(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetView (viewName As String) As DataSourceView" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Web::UI::DataSourceView ^ GetView(System::String ^ viewName);" />
      <MemberSignature Language="F#" Value="override this.GetView : string -&gt; System.Web.UI.DataSourceView" Usage="linqDataSource.GetView viewName" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetView(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.DataSourceView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewName" Type="System.String" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="viewName">Имя получаемого представления, должно быть — "DefaultView".</param>
        <summary>Возвращает представление источника данных, связанное с объектом <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <returns>Представление источника данных, связанное с объектом <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления поддерживает только одно представление источника данных. <xref:System.Web.UI.WebControls.LinqDataSourceView> Объект имеет имя по умолчанию «DefaultView». <xref:System.Web.UI.WebControls.LinqDataSourceView> Объект определяет возможности элемента управления источником данных извлекает данные из базы данных и выполняет операции, такие как сортировка, insert, delete и update.

]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><p>viewName имеет значение null (в Visual Basic — Nothing) или любое отличное от "DefaultView".</p></exception>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Обзор управления LinqDataSource Web Server</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Общие сведения о доступе к данным в ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GetViewNames">
      <MemberSignature Language="C#" Value="protected override System.Collections.ICollection GetViewNames ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.ICollection GetViewNames() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.GetViewNames" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function GetViewNames () As ICollection" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::ICollection ^ GetViewNames();" />
      <MemberSignature Language="F#" Value="override this.GetViewNames : unit -&gt; System.Collections.ICollection" Usage="linqDataSource.GetViewNames " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Web.UI.IDataSource.GetViewNames</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ICollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает коллекцию имен, представляющих список объектов представления, связанных с элементом управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <returns>Коллекция с одним элементом, которая содержит имя "DefaultView".</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
<xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления поддерживает только одно представление, в его базовых данных, которая называется `DefaultView`. `GetViewNames` Таким образом, метод возвращает коллекцию с единственным элементом, который содержит имя этого представления.

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Обзор управления LinqDataSource Web Server</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Общие сведения о доступе к данным в ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy">
      <MemberSignature Language="C#" Value="public string GroupBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GroupBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberSignature Language="VB.NET" Value="Public Property GroupBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ GroupBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.GroupBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.GroupBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее свойства, используемые для группировки и получения данных.</summary>
        <value>Строка, используемая для создания предложения Group By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Использовании <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойство, чтобы указать, какие свойства используются для объединения записей данных, которые имеют одинаковые значения. Например, если задать <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойства `Name`, все записи в запросе с одинаковым `Name` значение свойства возвращаются в виде одной консолидированные записи.  
  
 Вы можете назначить больше одного свойства к <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойство путем заключения всех свойств в `new` функции и разделения каждого свойства с помощью запятой. Например, чтобы группировать по свойствам `Name` и затем `Category`, задайте <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойства `new(Name, Category)`.  
  
 Возвращенные значения в свойстве, которые используются для группирования с помощью созданного свойство с именем `Key`. Включить `Key` свойство в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> извлекаемого сгруппированных значениях свойства. Можно задать `Key` присваивается псевдоним с помощью `As` ключевого слова, но вы не обязаны использовать псевдонимы. Например, можно задать <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойства свойство с именем `Category`. Вы можете получать объединенные значения из `Category` свойство, задав <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства `new(Key As ProductCategory)`.  
  
 Можно открыть отдельных записей в группе, включая `It` свойство в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. `It` Свойство содержит коллекцию записей, имеющих значение сгруппированного свойства. Можно выполнить итерацию по `It` свойство для извлечения отдельных записей.  
  
 <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> Свойство часто используется с помощью методов статистической обработки. Можно использовать следующие статистические методы:  
  
-   `Count()`  
  
-   `Average(` *столбец* `)`  
  
-   `Sum(` *столбец* `)`  
  
-   `Max(` *столбец* `)`  
  
-   `Min(` *столбец* `)`  
  
-   `Where(` *условие* `)`  
  
-   `Any()`  
  
-   `All(` *условие* `)`  
  
 Дополнительные сведения см. в разделе [NIB: Обзор управления LinqDataSource Web Server](https://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) и [как: Группы и статистической обработки данных, с помощью элемента управления LinqDataSource](https://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления, группирующий возвращенные данные по свойству с именем `Category`. Он возвращает общие значения и вычисляет среднюю цену для группированных записей.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления, настроенный для группирования данных по двум столбцам. `Key` Свойство ссылается на объект, который имеет два свойства: `ProductCategory` и `Color`. Объект, представленный `It` переименовывается `Products`. Переименованной `Products` объект содержит коллекцию отдельных записей в группе, и каждый экземпляр содержит все столбцы из таблицы Products.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#1)]  
  
 В следующем примере показаны два <xref:System.Web.UI.WebControls.ListView> элементы управления для отображения данных из <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления в предыдущем примере. Один <xref:System.Web.UI.WebControls.ListView> элемент управления отображает сгруппированных данных, а другой <xref:System.Web.UI.WebControls.ListView> элемент управления отображает отдельные названия продуктов, которые принадлежат к этой группе. Вложенного элемента управления с привязкой к данным <xref:System.Web.UI.WebControls.BaseDataList.DataSource%2A> свойству `Products`, который является псевдонимом для `It` объекта.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.GroupBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.GroupBy/vb/Default.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection GroupByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection GroupByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GroupByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ GroupByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.GroupByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.GroupByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются для создания предложения Group By.</summary>
        <value>Параметры, которые используются для создания предложения Group By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления использует параметры в <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> коллекции для создания предложения Group By во время выполнения. Обычно вы не будете использовать <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> коллекции для группировки данных. Вместо этого можно использовать <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойство. Использовании <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> сбор, только когда значение в предложении Group By, которые должны быть заданы во время выполнения, и это значение не является именем свойства. Например, использовать <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> коллекции для группировки данных в зависимости от `LastName` свойство в записях данных равно значению, предоставленных пользователем.  
  
 Если вы хотите сгруппировать данные по свойству, и это свойство не нужно задавать во время выполнения, можно определить свойство группировки в <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойство. Например, для возвращения значений из таблицы базы данных группируются по `LastName`, задайте <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> «Фамилия» без параметров. Если вы хотите динамически группировать данные по свойству, создайте обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий и настраивать <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойства при необходимости.  
  
 Не удается назначить имя свойства как значение для параметра в <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> коллекции. После добавления параметров к <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> коллекции, если вы хотите добавить условие для <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойства, которые должны быть установлены во время выполнения.  
  
 Чтобы задать значения в <xref:System.Web.UI.WebControls.LinqDataSource.GroupByParameters%2A> коллекции, задавать имя для каждого параметра, а затем добавить заполнитель в <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойство для данного именованного параметра. В предложении Group By, в начале имя каждого параметра с символа @.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public int Insert (System.Collections.IDictionary values);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Insert(class System.Collections.IDictionary values) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Insert(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Insert (values As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Insert(System::Collections::IDictionary ^ values);" />
      <MemberSignature Language="F#" Value="member this.Insert : System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Insert values" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="values">Значения строк, которые вносятся в источник данных.</param>
        <summary>Выполняет операцию вставки.</summary>
        <returns>Количество строк, на которые повлияла операция вставки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, нет необходимости вызывать <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> метод из кода. Элемент управления с привязкой к данным автоматически вызывает <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> метод, когда пользователь предпринимает действия для вставки новых записей. Явно вызывать <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> метод, если вы хотите создать свой собственный процесс для вставки данных.  
  
   
  
## Examples  
 В следующем примере показано, как программным образом вставить новую запись в источнике данных, после нажатия кнопки. Код передает <xref:System.Collections.Specialized.ListDictionary> значений, содержащий значение по умолчанию <xref:System.Web.UI.WebControls.LinqDataSource.Insert%2A> метод.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Insert#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx.vb#1)]  
  
 В следующем примере показана разметка для предыдущего примера.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Insert#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Insert/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Inserted" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserted As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Inserted;" />
      <MemberSignature Language="F#" Value="member this.Inserted : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Inserted : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при завершении операции вставки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> событие перехват всех исключений из операции вставки или для проверки значений, после завершения операции вставки. Вы можете получать новые значения через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объект, который передается обработчикам событий. Например, можно использовать <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объект для извлечения свойства identity, создаваемые базы данных для записи данных.  
  
   
  
## Examples  
 В следующем примере показано, как создать обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> событие, которое проверяет наличие исключения и извлекает свойство identity для новой записи.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/cs/Default.aspx#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceStatusEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceStatusEventArgs/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Inserting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; Inserting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Inserting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Inserting As EventHandler(Of LinqDataSourceInsertEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceInsertEventArgs ^&gt; ^ Inserting;" />
      <MemberSignature Language="F#" Value="member this.Inserting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " Usage="member this.Inserting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceInsertEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед операцией вставки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> событие для проверки этого объекта должны быть вставлены, для проверки ошибок проверки данных в классе данных, чтобы изменить значение перед выполнением операции вставки, или для отмены операции вставки. <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> Объект, передаваемый в обработчики событий для этого события содержит новый объект для вставки в источнике данных.  
  
 Если возникает ошибка проверки во время операции вставки, <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> содержит объект исключения проверки, которые вызываются с помощью класса данных. Если вставляемое значение не соответствует типу свойства в классе данных, или в том случае, если пользовательская проверка не прошла, возникает ошибка проверки. В обработчике событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> событий, вы сможете получить исключения проверки и предпринять соответствующие действия.  
  
 Если исключение в обработчике событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> событий, необходимо обрабатывать исключения в этом обработчике событий. Исключение не будут передаваться обработчику событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserted> событий (через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объекта). <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Свойство содержит только исключения, возникающие после <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> событий.  
  
   
  
## Examples  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> событие, которое изменяет данные перед операцией вставки. Объект, из <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs.NewObject%2A> свойство приводится к типу с именем `Product`. `DateModified` Свойство `Product` объекта установлено на текущую дату и время.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Inserting#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Inserting/vb/Default.aspx.vb#1)]  
  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Inserting> событие, которое получает исключения проверки.  
  
```vb  
Protected Sub LinqDataSource_Inserting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceInsertEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Inserting(object sender,   
        LinqDataSourceInsertEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 Предыдущий пример получает исключения проверки. Может быть создано исключение, если значение не соответствует типу свойства. Оно также может выдаваться настраиваемой проверке, как показано в следующем примере. `OnAgeChanging` Метод проверяет, что количество `Age` свойство не является отрицательным.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection InsertParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection InsertParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property InsertParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ InsertParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.InsertParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.InsertParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются во время операции вставки.</summary>
        <value>Параметры, которые используются во время операции вставки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обычно передаются значения, которые необходимы для операции вставки <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления с привязкой к данным элемента управления. Параметры вставки, если вы хотите предоставить значение по умолчанию значение или определить, следует ли преобразовывать пустые значения для `null`. Необходимо указать параметр для каждого значения, который будет вставлен, только для значения, которые нужно обработать, если пользователь не предоставил значение.  
  
 Значения, указываемые в <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> коллекции используются только для полей, которые определены в источнике данных, но, которые не привязаны в элементе данных. Например предположим, что таблицы базы данных содержит столбцы, которые имеют имена, имя, адрес и PostalCode, но <xref:System.Web.UI.WebControls.ListView> привязан элемент управления, привязанный к таблице только поля имени и адреса. Значения в <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> коллекции будет использоваться только для поля PostalCode. Они не будут использоваться для поля имени и адреса. Это справедливо, даже если значение не указано для этих полей. Если автоматически заполняет поля элемента управления с привязкой данных для всех полей в данных источника, без значений из <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> коллекции будет использоваться.  
  
   
  
## Examples  
 В следующем примере показан <xref:System.Web.UI.WebControls.LinqDataSource> управления с параметром, который предоставляет значение по умолчанию в <xref:System.Web.UI.WebControls.LinqDataSource.InsertParameters%2A> коллекции. Если пользователь не предоставит значение для `Category` свойство, значение по умолчанию, предоставленное параметром сохраняется в базе данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default9.aspx#9)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#9](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default9.aspx#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadViewState">
      <MemberSignature Language="C#" Value="protected override void LoadViewState (object savedState);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void LoadViewState(object savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.LoadViewState(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub LoadViewState (savedState As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void LoadViewState(System::Object ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.LoadViewState : obj -&gt; unit" Usage="linqDataSource.LoadViewState savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Object" Index="0" FrameworkAlternate="netframework-3.5" />
      </Parameters>
      <Docs>
        <param name="savedState">Объект, представляющий состояние элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</param>
        <summary>Загружает в элемент управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> состояние значений, которые необходимо сохранить.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
`LoadViewState` Метод используется для загрузки ранее сохраненное состояние представления элемента <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления.

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Обзор управления LinqDataSource Web Server</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Общие сведения о доступе к данным в ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="OnInit">
      <MemberSignature Language="C#" Value="protected internal override void OnInit (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnInit(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnInit(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnInit (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnInit(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnInit : EventArgs -&gt; unit" Usage="linqDataSource.OnInit e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Данные события.</param>
        <summary>Выполняет инициализацию объекта <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnUnload">
      <MemberSignature Language="C#" Value="protected internal override void OnUnload (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnUnload(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.OnUnload(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnUnload (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnUnload(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnUnload : EventArgs -&gt; unit" Usage="linqDataSource.OnUnload e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.EventArgs" />, содержащий данные о событии.</param>
        <summary>Создает событие <see cref="E:System.Web.UI.Control.Unload" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Web.UI.Control.OnUnload(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OrderBy">
      <MemberSignature Language="C#" Value="public string OrderBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее поля, используемые для сортировки полученных данных.</summary>
        <value>Строка, используемая для создания предложения Order By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Использовании <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство, чтобы указать, какие свойства из возвращаемых данных следует использовать для сортировки. Свойство для сортировки данных должен существовать в исходном источнике данных, но необязательно должны быть включены в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. Можно добавить пробел и `Ascending`, `ASC`, `Descending`, или `DESC` к свойству в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> строку, чтобы указать, каким образом возвращается упорядоченных данных.  
  
 Можно указать более одного свойства в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство, разделив каждое свойство с помощью запятой. Например, для предложения order by с именем свойства `LastName` и `FirstName`, задайте <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство «Фамилия, имя».  
  
> [!NOTE]
>  При использовании <xref:System.Web.UI.WebControls.LinqDataSource> управления [!INCLUDE[ss2k](~/includes/ss2k-md.md)] или [!INCLUDE[ssEW](~/includes/ssew-md.md)] и <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойству `true`, необходимо указать значение в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство. По умолчанию <xref:System.Web.UI.WebControls.LinqDataSource.AutoPage%2A> свойство `true`. Если присвоить значение <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства, необходимо также включить все столбцы идентификаторов в список свойств, который возвращается в запросе.  
  
 Если <xref:System.Web.UI.WebControls.LinqDataSource.AutoSort%2A> свойству `true`, элемент управления с привязкой к данным можно передать выражение сортировки для <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления во время выполнения. <xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления будет применять выражение сортировки из элемента управления с привязкой к данным, после применения <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство. Таким образом данные возвращаются в соответствии с выражением сортировки из элемента управления с привязкой к данным.  
  
   
  
## Examples  
 Следующий пример возвращает данные в обратном алфавитном порядке на основе значений в `Category` свойство.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default4.aspx#4)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#4](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default4.aspx#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются для создания предложения Order By.</summary>
        <value>Параметры, которые используются для создания предложения Order By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления использует параметры в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции для создания предложения Order By во время выполнения. Как правило <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> свойства `true` при добавлении параметров <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции. При <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> свойству `true`, каждый параметр в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции добавляется в предложение Order By в последовательности, которой они указаны в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции. Когда <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A> свойство `true`, параметры не нужно иметь имя, так как они применяются в последовательности и не сопоставляются с заполнителем.  
  
 Если у вас нет присвоить значение во время выполнения в предложении Order By, не нужно использовать <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции. Можно определить поля, используемые для сортировки данных в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство. Например, для возвращения значений из таблицы базы данных, упорядоченных `LastName`, задайте <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> «Фамилия» без параметров.  
  
 Можно задать параметры <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции, а параметрам соответствует заполнителям в <xref:System.Web.UI.WebControls.LinqDataSource.OrderBy%2A> свойство, но такой подход обеспечивает ограниченную приложения. При использовании этого подхода, параметры в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекции не может представлять имя столбца. Можно задать параметр в значение и затем сравнить со значениями в свойстве. Например можно сортировать данные, в зависимости от того, являются ли значения в свойстве меньше, чем значение времени выполнения, представленный параметром.  
  
   
  
## Examples  
 В следующем примере показан элемент управления <xref:System.Web.UI.WebControls.LinqDataSource> со свойством <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateOrderByClause%2A>, имеющим значение `true`. Параметр включается в <xref:System.Web.UI.WebControls.LinqDataSource.OrderByParameters%2A> коллекцию, которая упорядочивает данные на основе свойства имя, которое пользователь выбирает из <xref:System.Web.UI.WebControls.DropDownList> элемента управления.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default8.aspx#8)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#8](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default8.aspx#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsBy">
      <MemberSignature Language="C#" Value="public string OrderGroupsBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrderGroupsBy" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberSignature Language="VB.NET" Value="Public Property OrderGroupsBy As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ OrderGroupsBy { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsBy : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает поля, используемые для сортировки группированных данных.</summary>
        <value>Строка, которая используется для создания оператора Order Groups By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Использовании <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойство, чтобы указать порядок сортировки групп данных. Например, можно сгруппировать по `CategoryID` свойство и затем сортировки, каждый идентификатор категории группировать по среднее `Price` свойство.  
  
 Можно задать <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойства только в том случае, если имеются сгруппированные данные. Если задать <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойство без параметра <xref:System.Web.UI.WebControls.LinqDataSource.GroupBy%2A> свойство, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления вызывает исключение.  
  
 Свойство, которое используется для сортировки данных должен быть либо свойство, которое используется для группирования данных, либо результат статистической функции для сгруппированных данных. Чтобы указать способ сортировки данных, можно добавить пробел и строка «Ascending», либо «ASC», «По убыванию» или «DESC» имени свойства в <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> строку.  
  
 Можно указать более одного свойства в <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойство. Через запятую для разделения свойств.  
  
   
  
## Examples  
 Следующий пример показывает, как группировать данные с помощью двух свойств, а также порядок сортировки сгруппированных данных с помощью одного из этих свойств. Данные из таблицы с именем `Products` группируются с помощью свойства с именем `CategoryID` и `Discontinued`. Сгруппированные данные сортируются по `CategoryID` свойство.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default.aspx#1)]  
  
 Следующий пример показывает, как группировать данные с помощью свойства, а также порядок сортировки в зависимости от результатов статистической функции. Данные из `Products` таблицы группируются с помощью `CategoryID` свойство. Он сортируется по по среднему количеству `UnitPrice` свойство внутри каждой группы.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy/vb/Default2.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OrderGroupsByParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection OrderGroupsByParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OrderGroupsByParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ OrderGroupsByParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.OrderGroupsByParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются для создания предложения Order Groups By.</summary>
        <value>Параметры, которые используются для создания предложения Order Groups By.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления использует параметры в <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> коллекции для создания предложения Order Groups By во время выполнения.  
  
 Добавьте значения для <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> сбор только в том случае, когда необходимо задать значения во время выполнения в предложения Order Groups By. Можно определить поля, которые используются для упорядочивания данных с помощью <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойство.  
  
 Можно задать параметры <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> коллекции, а параметрам соответствует заполнителям в <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsBy%2A> свойство. Тем не менее, при использовании этого подхода, параметры в <xref:System.Web.UI.WebControls.LinqDataSource.OrderGroupsByParameters%2A> коллекции не может представлять имя столбца; они должны представлять значения. Можно задать параметр в значение и затем сравнить это значение к свойству. Например можно сортировать данные, в зависимости от того, являются ли значения в свойстве меньше, чем значение времени выполнения, представленный параметром.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveViewState">
      <MemberSignature Language="C#" Value="protected override object SaveViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance object SaveViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.SaveViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function SaveViewState () As Object" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Object ^ SaveViewState();" />
      <MemberSignature Language="F#" Value="override this.SaveViewState : unit -&gt; obj" Usage="linqDataSource.SaveViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сохраняет текущее состояние представления элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <returns>Объект, который содержит сохраненное состояние элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Обзор управления LinqDataSource Web Server</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Общие сведения о доступе к данным в ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public string Select { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Select" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberSignature Language="VB.NET" Value="Public Property Select As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Select { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Select : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Select" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает свойства и рассчитанные значение, которые включаются в извлеченные данные.</summary>
        <value>Строка, которая используется для создания предложения "Select".</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы не установите <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления извлекает все свойства (столбцы данных) из объекта данных. Использовании <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство для извлечения подмножества свойств из объекта или рассчитать новые значения, когда данные извлекаются.  
  
 Указать свойства для получения, задав <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства имена свойств, которые вы хотите включить в возвращаемых данных.  
  
 Если вы получите подмножество свойств из объекта данных, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления динамически создает класс, который содержит только свойства, указанные в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. Класс также создается динамически, если вычисление свойств, которые не являются свойствами в объекте данных. В этих случаях объект, возвращаемый из запроса не является экземпляром класса, который указан в <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство. Вместо этого необходимо использовать `new` метод в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство, указывающее, что новый класс возвращается из запроса. Например, чтобы вернуть только `FirstName` и `LastName` свойства из объекта, который содержит больше, чем эти свойства необходимо задать <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства `new(FirstName, LastName)`. <xref:System.Web.UI.WebControls.LinqDataSource> Управления динамически создаст новый класс, который указан в `new` метод.  
  
 Можно использовать `As` ключевое слово позволяют назначить псевдоним для указанных значений. Если назначить псевдоним, необходимо включить свойства псевдонима в `new` метод. Любой элемент управления с привязкой к данным, который привязывается к результатам из <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления должен ссылаться на свойство по псевдониму. Например, если задать <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства `new(Region As SalesRegion, Revenue / 1000 As RevenueThousands)`, элемент управления с привязкой к данным можно получить доступ к два свойства `SalesRegion` и `RevenueThousands`.  
  
 Использовании `new` работать в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства в соответствии с условиями, перечисленные в следующей таблице.  
  
|Выбрать|Использование нового|Пример|  
|------------|----------------|-------------|  
|Одно свойство.|`new` не требуется.|`Select="Category"`|  
|Несколько свойств.|`new` требуется.|`Select="new(Cateogry, Name)"`|  
|Один или несколько свойств с псевдонимами.|`new` требуется.|`Select="new(Category As CategoryGroup)"`|  
  
 Если вы хотите включить автоматического изменения данных, но вы не хотите отобразить все свойства из объекта данных, не устанавливайте <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. Вместо этого управление отображением при помощи элемента управления с привязкой данных. При использовании <xref:System.Web.UI.WebControls.DetailsView> управления или <xref:System.Web.UI.WebControls.GridView> элемента управления, необходимо также задать <xref:System.Web.UI.WebControls.DetailsView.AutoGenerateRows%2A> или <xref:System.Web.UI.WebControls.GridView.AutoGenerateColumns%2A> свойства `false`. Все значения, которые не отображаются в элементе управления с привязкой к данным, хранятся в состоянии представления. Они передаются без изменений в источник данных при операции обновления данных.  
  
 При группировании данных в запросе, можно включить статистические методы в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. Можно использовать следующие статистические методы:  
  
-   `Count()`  
  
-   `Average(` *столбец* `)`  
  
-   `Sum(` *столбец* `)`  
  
-   `Max(` *столбец* `)`  
  
-   `Min(` *столбец* `)`  
  
-   `Where(` *условие* `)`  
  
-   `Any()`  
  
-   `All(` *условие* `)`  
  
 Дополнительные сведения см. в разделе [NIB: Обзор управления LinqDataSource Web Server](https://msdn.microsoft.com/library/104cfc3f-7385-47d3-8a51-830dfa791136) и [как: Группы и статистической обработки данных, с помощью элемента управления LinqDataSource](https://msdn.microsoft.com/library/b922cf69-251f-4158-b405-ea960993a1af).  
  
 При группировании данных, можно включить `Key` и `It`, который динамически создаются свойства, в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. `Key` Свойство ссылается на значения в свойства или свойств, которые были использованы для группирования данных. Например, если данные группируются по свойство с именем `Category`, `Key` свойство будет содержать каждого уникального значения в `Category` свойство. `It` Свойство ссылается на набор отдельных записей в группировании данных. Можно выполнить итерацию по `It` свойство для извлечения отдельных записей, которые были объединены в операции группирования. Например, если данные группируются по свойство с именем `Category`, `It` свойство содержит все отдельные записи, которые совместно используют общее значение `Category` свойства.  
  
 При включении `It` ключевое слово в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство при группировании данных, необходимо назначить псевдоним `It` ключевое слово. <xref:System.Web.UI.WebControls.LinqDataSource> Управления будет выдано исключение, если `It` имеет псевдоним. Вы можете назначить псевдоним `Key` ключевое слово, но это не является обязательным.  
  
   
  
## Examples  
 В следующем примере показано, как задать <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства подмножество свойств в объекте данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default10.aspx#10)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#10](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default10.aspx#10)]  
  
 Приведенный ниже показано, как извлечь значения в свойстве, который использовался для группирования данных и получения среднего значения для сгруппированных записей. `Key` Ключевое слово содержит свойство, которое используется для группирования данных. В этом примере `Key` будет содержать общие значения из `ProductCategory` свойство.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default3.aspx#3)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default3.aspx#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Selected" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selected As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Selected;" />
      <MemberSignature Language="F#" Value="member this.Selected : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Selected : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при завершении операции извлечения данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Selected> событие перехват всех исключений из операции по извлечению данных или проверить объект данных после завершения операции извлечения. Объект, доступен из <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объект, который передается обработчикам событий.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selecting">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; Selecting" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Selecting" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Selecting As EventHandler(Of LinqDataSourceSelectEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceSelectEventArgs ^&gt; ^ Selecting;" />
      <MemberSignature Language="F#" Value="member this.Selecting : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " Usage="member this.Selecting : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceSelectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед операцией извлечения данных.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий для выполнения следующих задач:  
  
-   Изменение параметров для извлечения данных.  
  
-   Программное создание запроса.  
  
-   Измените значения для сортировки или разбиения на страницы.  
  
-   Выполнение пользовательской сортировки или разбиения на страницы.  
  
-   Отмените операцию извлечения данных.  
  
 <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs> Объект, передаваемый в обработчики событий для этого события содержит параметры для операции извлечения данных. Можно изменить параметры в <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> обработчик событий до выполнения запроса, или можно создать результирующий набор и назначить <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> свойство.  
  
 Возможность реализации пользовательской сортировки или разбиения на страницы в обработчиках для этого события может быть ограничен элементом управления, который привязан к <xref:System.Web.UI.WebControls.LinqDataSource>. Например, если заголовок <xref:System.Web.UI.WebControls.GridView> нажатии элемента управления, элемент управления выполняет автоматическую сортировку, которая может переопределения, в любом порядке установления событий обработчик.  
  
 Если исключение в обработчике событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий, необходимо обрабатывать исключения в этом обработчике событий. Исключение не будут передаваться обработчику событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selected> событий (через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объекта). <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Свойство содержит только исключения, возникающие после <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий.  
  
   
  
## Examples  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий. Обработчик создает запрос, который извлекает значения из массива строковых значений в веб-страницы.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/cs/Default3.aspx.cs#3)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSourceSelectEventArgs#3](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSourceSelectEventArgs/vb/Default3.aspx.vb#3)]  
  
 В следующем примере показано, как назначить <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> объект, который возвращается из метода, который представляет хранимую процедуру.  
  
```vb  
Protected Sub LinqDataSource_Selecting(ByVal sender As Object, _  
        ByVal e As LinqDataSourceSelectEventArgs)  
    Dim exampleContext As ExampleDataContext = New ExampleDataContext()  
    e.Result = exampleContext.GetRegisteredCustomers()  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Selecting(object sender,   
        LinqDataSourceSelectEventArgs e)  
{  
    ExampleDataContext exampleContext = new ExampleDataContext();  
    e.Result = exampleContext.GetRegisteredCustomers();  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection SelectParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection SelectParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SelectParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ SelectParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SelectParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.SelectParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются во время операции извлечения данных.</summary>
        <value>Параметры, которые используются для создания предложения Select.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления использует параметры в <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции для создания оператора Select во время выполнения. После добавления параметров к <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции, если вы хотите использовать значения времени выполнения в предложении Select. Например, можно добавить параметр к <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции для представления свойства в профиле пользователя. Затем можно использовать это свойство и значение из источника данных для вычисления нового значения.  
  
 Если у вас нет присвоить значение во время выполнения в предложении Select, не нужно использовать <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции. Можно определить свойства для извлечения в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство. Например, для возвращения `FirstName` и `LastName` из таблицы базы данных, вы задаете <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> с «FirstName, LastName» без параметров.  
  
 Чтобы задать значения в <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции, можно добавить заполнитель в <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойство для именованного параметра. В предложении Select, в начале имя каждого параметра с символа @.  
  
 Нельзя использовать параметр в <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции для представления имени свойства. Чтобы динамически задать <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> имя свойства, создайте обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Selecting> событий и настраивать <xref:System.Web.UI.WebControls.LinqDataSource.Select%2A> свойства при необходимости.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать заданные пользователем значения для вычисления значения в возвращенных данных. Пользователя можно ввести значение в текстовое поле, которое представляет количество рабочих дней. Это значение делится на значение из базы данных, которая представляет число дней для производства продукта. Возвращаемое значение указывает, сколько продуктов можно произвести за указанное число дней. Введенные пользователем, включается в команде Select через <xref:System.Web.UI.WebControls.LinqDataSource.SelectParameters%2A> коллекции.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/cs/Default.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.SelectParameters#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.SelectParameters/vb/Default.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreOriginalValuesInViewState">
      <MemberSignature Language="C#" Value="public bool StoreOriginalValuesInViewState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool StoreOriginalValuesInViewState" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberSignature Language="VB.NET" Value="Public Property StoreOriginalValuesInViewState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool StoreOriginalValuesInViewState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.StoreOriginalValuesInViewState : bool with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Behavior")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, определяющее необходимость хранения данных из источника данных в состоянии просмотра для гарантии неизменности данных другим процессом перед их обновлением или удалением.</summary>
        <value>Значение <see langword="true" />, если значения сохраняются в состоянии представления; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 По умолчанию обновление и удаление, когда была включена, <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления сохраняет исходные значения для всех записей в состоянии представления. <xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления сохраняет значения для всех первичных ключей, и все свойства, не помеченный `UpdateCheck.Never` в `Column` атрибута. Можно задать `UpdateCheck` свойство `Column` атрибут в [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)].  
  
 Прежде чем LINQ to SQL обновляет или удаляет данные, он проверяет значения в состоянии представления со значениями в источнике данных. Если значения не совпадают, запись в источнике данных был изменен. В этом случае LINQ to SQL возникло исключение и не продолжить обновление или удаление. Дополнительные сведения о LINQ to SQL, см. в разделе [LINQ to SQL](https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655).  
  
 Хранение исходные значения в представлении состояния может привести к чрезмерно возрасти параметры размера страницы и может предоставлять конфиденциальные данные, пользователь-злоумышленник. Вы можете отключить хранение значений в состоянии представления, задав <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> свойства `false`. После этого необходимо предоставить собственный способ убедиться, что данные не изменились. Если задать <xref:System.Web.UI.WebControls.LinqDataSource.StoreOriginalValuesInViewState%2A> свойства `false`, исходные значения не сохраняются в состоянии представления для элемента управления с привязкой к данным. В этом случае LINQ to SQL не удалось проверить целостность данных. LINQ to SQL выдаст исключение, указывающее конфликт данных, даже если данные в источнике данных фактически не изменяется.  
  
 Если базовый источник данных содержит поле метки времени, которое автоматически обновляется во время обновления, можно сохранить только это значение в состоянии представления. В этом случае свойство метки времени в классе сущности присваивается `IsVersion=true` и все свойства задаются `UpdateCheck.Never`. Поскольку поле метки времени автоматически обновляются в базе данных каждый раз при изменении данных в этой записи, LINQ to SQL определяет от этого значения, если данные были изменены. Это помогает сократить размер состояния представления, а также предоставления конфиденциальных данных отсутствует. LINQ to SQL будет проверка согласованности данных, сравнивая значение отметки времени в представлении состояния с помощью значение отметки времени в базе данных. Дополнительные сведения см. в разделе [Пошаговое руководство: С помощью метки времени с помощью элемента управления LinqDataSource для проверки целостности данных](https://msdn.microsoft.com/library/e7700162-4f05-4130-81f7-3be1361027fa).  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/73d13345-eece-471a-af40-4cc7a2f11655">LINQ to SQL</related>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.ContextType">
      <MemberSignature Language="C#" Value="Type System.Web.DynamicData.IDynamicDataSource.ContextType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#ContextType" />
      <MemberSignature Language="VB.NET" Value=" Property ContextType As Type Implements IDynamicDataSource.ContextType" />
      <MemberSignature Language="C++ CLI" Value="property Type ^ System::Web::DynamicData::IDynamicDataSource::ContextType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.DynamicData.IDynamicDataSource.ContextType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.ContextType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Описание этого члена см. в разделе <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Тип, связанный с данным классом.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Данный элемент является явной реализацией элемента интерфейса. Он может использоваться, только если экземпляр <xref:System.Web.UI.WebControls.LinqDataSource> приведен к типу интерфейса <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.EntitySetName">
      <MemberSignature Language="C#" Value="string System.Web.DynamicData.IDynamicDataSource.EntitySetName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#EntitySetName" />
      <MemberSignature Language="VB.NET" Value=" Property EntitySetName As String Implements IDynamicDataSource.EntitySetName" />
      <MemberSignature Language="C++ CLI" Value="property System::String ^ System::Web::DynamicData::IDynamicDataSource::EntitySetName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Web.DynamicData.IDynamicDataSource.EntitySetName" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.EntitySetName</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Описание этого члена см. в разделе <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <value>Имя сущности.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Данный элемент является явной реализацией элемента интерфейса. Он может использоваться, только если экземпляр <xref:System.Web.UI.WebControls.LinqDataSource> приведен к типу интерфейса <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Web.DynamicData.IDynamicDataSource.Exception">
      <MemberSignature Language="C#" Value="event EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.DynamicData.DynamicValidatorEventArgs&gt; System.Web.DynamicData.IDynamicDataSource.Exception" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.System#Web#DynamicData#IDynamicDataSource#Exception" />
      <MemberSignature Language="VB.NET" Value="Custom Event Exception As EventHandler(Of DynamicValidatorEventArgs) Implements System.Web.DynamicData.IDynamicDataSource" />
      <MemberType>Event</MemberType>
      <Implements>
        <InterfaceMember>E:System.Web.DynamicData.IDynamicDataSource.Exception</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.DynamicData.DynamicValidatorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Описание этого члена см. в разделе <see cref="T:System.Web.DynamicData.IDynamicDataSource" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот член представляет собой явную реализацию члена интерфейса. Он может использоваться только при условии, что экземпляр класса <xref:System.Web.UI.WebControls.LinqDataSource> приведен к типу интерфейса <xref:System.Web.DynamicData.IDynamicDataSource>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TableName">
      <MemberSignature Language="C#" Value="public string TableName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TableName" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberSignature Language="VB.NET" Value="Public Property TableName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ TableName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TableName : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.TableName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя свойства или поля в классе контекста данных, представляющем коллекцию данных.</summary>
        <value>Строка, содержащую имя свойства, содержащего коллекцию данных.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задайте <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> имя свойства или поля, представляющего данные, которые необходимо получить. При подключении к таблице базы данных, имя свойства обычно является совпадает с именем таблицы. При подключении к коллекции данных в памяти, установите <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> присваивается имя свойства или поля, которое возвращает коллекцию данных.  
  
 Можно назначить свойство, которое возвращает любой тип <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство для операций получения. Если объекта, который представлен свойством не реализует <xref:System.Collections.IEnumerable>, <xref:System.Web.UI.WebControls.LinqDataSource> управления будет автоматически включать объект в экземпляре <xref:System.Collections.IEnumerable> объекта.  
  
 Чтобы включить автоматическое обновление, вставка или удаление операции, класс, который назначен <xref:System.Web.UI.WebControls.LinqDataSource.ContextTypeName%2A> свойства должен быть производным от <xref:System.Data.Linq.DataContext> и свойства, которое назначается <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойства должен быть производным от <xref:System.Data.Linq.Table%601>.  
  
 Сведения о том, как выбрать данные из экземпляра класса см. в разделе <xref:System.Web.UI.WebControls.LinqDataSourceSelectEventArgs.Result%2A> свойство.  
  
   
  
## Examples  
 В следующем примере показаны два <xref:System.Web.UI.WebControls.LinqDataSource> элементов управления. В одном <xref:System.Web.UI.WebControls.LinqDataSource> управления <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойство имеет значение свойства в классе. Это свойство возвращает массив строк. В другом <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления, <xref:System.Web.UI.WebControls.LinqDataSource.TableName%2A> свойству присваивается свойству, которое представляет таблицу базы данных.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/Default.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/Default.aspx#2)]  
  
 Класс с именем `ExampleDataContext` , представляет таблицу базы данных не отображается в этом примере. Для работы этого примера необходимо создать этот класс, добавив LINQ to SQL, класс именованный Example.dbml и перетаскивание таблицы с именем фильма на [!INCLUDE[vs_ordesigner_short](~/includes/vs-ordesigner-short-md.md)]. Класс с именем `ExampleDataContext` со свойством, именуемым `Movies` создается.  
  
 В следующем примере класс с именем `MovieLibrary` , на который ссылается <xref:System.Web.UI.WebControls.LinqDataSource> элемента управления.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/cs/App_Code/MovieLibrary.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Overview/vb/App_Code/MovieLibrary.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackViewState">
      <MemberSignature Language="C#" Value="protected override void TrackViewState ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TrackViewState() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.TrackViewState" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub TrackViewState ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void TrackViewState();" />
      <MemberSignature Language="F#" Value="override this.TrackViewState : unit -&gt; unit" Usage="linqDataSource.TrackViewState " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Отслеживает изменения состояния представления элемента управления <see cref="T:System.Web.UI.WebControls.LinqDataSource" /> для сохранения их в объекте <see cref="T:System.Web.UI.StateBag" /> этого элемента управления.</summary>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/bb547113(v=vs.100)">Обзор управления LinqDataSource Web Server</related>
        <related type="Article" href="https://docs.microsoft.com/previous-versions/aspnet/ms178359(v=vs.110)">Общие сведения о доступе к данным в ASP.NET</related>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public int Update (System.Collections.IDictionary keys, System.Collections.IDictionary values, System.Collections.IDictionary oldValues);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Update(class System.Collections.IDictionary keys, class System.Collections.IDictionary values, class System.Collections.IDictionary oldValues) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.LinqDataSource.Update(System.Collections.IDictionary,System.Collections.IDictionary,System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Function Update (keys As IDictionary, values As IDictionary, oldValues As IDictionary) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Update(System::Collections::IDictionary ^ keys, System::Collections::IDictionary ^ values, System::Collections::IDictionary ^ oldValues);" />
      <MemberSignature Language="F#" Value="member this.Update : System.Collections.IDictionary * System.Collections.IDictionary * System.Collections.IDictionary -&gt; int" Usage="linqDataSource.Update (keys, values, oldValues)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.Collections.IDictionary" />
        <Parameter Name="values" Type="System.Collections.IDictionary" />
        <Parameter Name="oldValues" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="keys">Ключевые значения строк для обновляемых записей.</param>
        <param name="values">Значения строк, для обновления в источнике данных.</param>
        <param name="oldValues">Значения строк, которые проверяются на наличие конфликтов данных.</param>
        <summary>Выполняет операцию обновления.</summary>
        <returns>Количество записей, затронутых операцией обновления.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, нет необходимости вызывать <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> метод из кода. Элемент управления с привязкой к данным автоматически вызывает <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> метод, когда пользователь выполняет действие для обновления записи. Явно вызывать <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> метод, если вы хотите создать свой собственный процесс для обновления данных.  
  
   
  
## Examples  
 В следующем примере показано, как программно обновить запись в источнике данных, после нажатия кнопки. Код передает <xref:System.Collections.Specialized.ListDictionary> , содержащий значение ключа, <xref:System.Collections.Specialized.ListDictionary> , содержащий исходные значения, и <xref:System.Collections.Specialized.ListDictionary> , содержащий новые значения для <xref:System.Web.UI.WebControls.LinqDataSource.Update%2A> метод.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Update#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx.vb#1)]  
  
 В следующем примере показана разметка для предыдущего примера.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/cs/Default2.aspx#2)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource.Update#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Update/vb/Default3.aspx#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Updated">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; Updated" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updated As EventHandler(Of LinqDataSourceStatusEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceStatusEventArgs ^&gt; ^ Updated;" />
      <MemberSignature Language="F#" Value="member this.Updated : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " Usage="member this.Updated : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceStatusEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит при завершении операции обновления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Updated> событие перехват всех исключений из операции обновления или проверить значения выходных параметров, после завершения операции обновления. Выходные параметры доступны из <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объект, который передается обработчикам событий.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection UpdateParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection UpdateParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UpdateParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ UpdateParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UpdateParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.UpdateParameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Эта коллекция не используется классом <see cref="T:System.Web.UI.WebControls.LinqDataSource" />.</summary>
        <value>Коллекция параметров.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Updating">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; Updating" />
      <MemberSignature Language="DocId" Value="E:System.Web.UI.WebControls.LinqDataSource.Updating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Updating As EventHandler(Of LinqDataSourceUpdateEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::Web::UI::WebControls::LinqDataSourceUpdateEventArgs ^&gt; ^ Updating;" />
      <MemberSignature Language="F#" Value="member this.Updating : EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " Usage="member this.Updating : System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Происходит перед операцией обновления.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обрабатывать <xref:System.Web.UI.WebControls.LinqDataSource.Updating> событие для проверки объекта обновления, для проверки на наличие ошибок проверки данных в классе данных, чтобы изменить значение перед операцией обновления, либо отменить операцию обновления. <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs> Объект, который передается обработчикам событий содержит исходный объект и обновленного объекта.  
  
 Если возникает ошибка проверки во время операции обновления, <xref:System.Web.UI.WebControls.LinqDataSourceInsertEventArgs> содержит объект исключения проверки, которые вызываются с помощью класса данных. Если значения для обновления не соответствует типу свойства в классе данных, или в том случае, если пользовательская проверка не прошла, возникает ошибка проверки. В обработчике событий для <xref:System.Web.UI.WebControls.LinqDataSource.Updating> событий, вы сможете получить исключения проверки и предпринять соответствующие действия.  
  
 Если исключение в обработчике событий для <xref:System.Web.UI.WebControls.LinqDataSource.Updating> событий, необходимо обрабатывать исключения в этом обработчике событий. Исключение не будут передаваться обработчику событий для <xref:System.Web.UI.WebControls.LinqDataSource.Updated> событий (через <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> свойство <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs> объекта). <xref:System.Web.UI.WebControls.LinqDataSourceStatusEventArgs.Exception%2A> Свойство содержит только исключения, возникающие после <xref:System.Web.UI.WebControls.LinqDataSource.Updating> событий.  
  
   
  
## Examples  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Updating> событий. Код сравнивает свойства из <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.OriginalObject%2A> свойство и <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> свойство, чтобы узнать, изменилось ли значение. Если значение изменилось, значение <xref:System.Web.UI.WebControls.LinqDataSourceUpdateEventArgs.NewObject%2A> свойству `true`.  
  
 [!code-csharp[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/cs/Default.aspx.cs#1)]
 [!code-vb[System.Web.UI.WebControls.LinqDataSource.Updating#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource.Updating/vb/Default.aspx.vb#1)]  
  
 В примере показан обработчик событий для <xref:System.Web.UI.WebControls.LinqDataSource.Updating> событие, которое получает исключения проверки.  
  
```vb  
Protected Sub LinqDataSource_Updating(ByVal sender As Object, _  
        ByVal e As LinqDataSourceUpdateEventArgs)  
    If (e.Exception IsNot Nothing) Then  
        For Each innerException As KeyValuePair(Of String, Exception) _  
               In e.Exception.InnerExceptions  
            Label1.Text &= innerException.Key & ": " & _  
                innerException.Value.Message & "<br />"  
        Next  
        e.ExceptionHandled = True  
    End If  
End Sub  
```  
  
```csharp  
protected void LinqDataSource_Updating(object sender,   
        LinqDataSourceUpdateEventArgs e)  
{  
    if (e.Exception != null)  
    {  
        foreach (KeyValuePair<string, Exception> innerException in   
             e.Exception.InnerExceptions)  
        {  
        Label1.Text += innerException.Key + ": " +   
            innerException.Value.Message + "<br />";  
        }  
        e.ExceptionHandled = true;  
    }  
}  
```  
  
 Предыдущий пример получает исключения проверки. Может быть создано исключение, если значение не соответствует типу свойства. Оно также может выдаваться настраиваемой проверке, как показано в следующем примере. `OnAgeChanging` Метод проверяет, что количество `Age` свойство не является отрицательным.  
  
```csharp  
partial void  OnAgeChanging(int? value)  
{  
    if (value < 0)  
    {  
        throw new Exception("Age cannot be a negative number.");  
    }  
}  
```  
  
```vb  
Private Sub OnAgeChanging(ByVal value As System.Nullable(Of Integer))  
    If (value < 0) Then  
        Throw New Exception("Age cannot be a negative number.")  
    End If  
End Sub  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Where">
      <MemberSignature Language="C#" Value="public string Where { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Where" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberSignature Language="VB.NET" Value="Public Property Where As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Where { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Where : string with get, set" Usage="System.Web.UI.WebControls.LinqDataSource.Where" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.Where</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, которое указывает, что условия должны иметь значение true, чтобы запись могла включаться в извлеченные данные.</summary>
        <value>Строка, которая используется для создания предложения Where.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Использовании <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство, чтобы указать условия для записей, возвращаемых из запроса. Синтаксис <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойства совпадает со значением синтаксис предложения LINQ Where в C#.  
  
 Укажите выражение, результатом является логическое значение, и если выражение, результатом которого является `true` для конкретной строки, строка включается в результирующий набор. Выражения состоят из имен столбцов, операторы сравнения и значения для сравнения, как показано в следующем примере:  
  
```  
<asp:LinqDataSource ... Where="Price > 50"...>  
```  
  
 Чтобы указать несколько выражений, которые связаны с помощью логических `AND` или `OR` использовать операторы, `&&` как логический оператор AND и `||` как логический оператор OR, как показано в следующем примере:  
  
```  
<asp:LinqDataSource ... Where="Price > 50 && Price < 100"...>  
<asp:LinqDataSource ... Where="Price <= 50 || Price >= 100"...>  
```  
  
 Если вы хотите проверить свойство со значением литерала строки, значение символьной строки должны заключаться в двойные кавычки. Чтобы сделать это в разметке, заключите <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> значение предложения в одинарные кавычки, как показано в следующем примере:  
  
```  
<asp:LinqDataSource ... Where='Category = "Sports"' ... >  
```  
  
 Чтобы проверить значение строкового литерала в коде, используйте escape-символы, которые подходят для языка, который используется для вставки двойные кавычки, как показано в следующем примере:  
  
```vb  
LinqDataSource1.Where = "Category = ""Sports"""  
```  
  
```csharp  
LinqDataSource1.Where = "Category = \"Sports\"";  
```  
  
 Если вы хотите проверить, является ли строка больше или меньше, чем другой строкой, необходимо использовать методы класса <xref:System.String> класса вместо использования `<` или `>` операторы между именем столбца и строковым значением. Ниже приведены примеры как выбрать строки, значения категории, в которых меньше, меньше или равно, больше, или больше или равно «Спорт».  
  
```  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") < 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") <= 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") > 0' ... >  
<asp:LinqDataSource ... Where='Category.CompareTo("Sports") >= 0' ... >  
```  
  
 Можно также использовать другие методы <xref:System.String> класс, например <xref:System.String.StartsWith%2A>, <xref:System.String.EndsWith%2A>, и <xref:System.String.Contains%2A>. Дополнительные сведения о том, как сравнивать строки, см. в разделе [сравнение строк](~/docs/standard/base-types/comparing.md). Дополнительные сведения о синтаксисе предложения WHERE см. в разделе [операторы C#](https://msdn.microsoft.com/library/0301e31f-22ad-49af-ac3c-d5eae7f0ac43) и [где предложение](~/docs/csharp/language-reference/keywords/where-clause.md).  
  
 Помимо фильтрации на основе статических значений, которые вы задаете, при создании веб-страницы, можно фильтровать на основе динамические значения, которые вычисляются во время выполнения. В этом случае включать именованный параметр в <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство, которое выступает в качестве заполнителя для значения. Затем добавьте параметр с соответствующим именем для <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции.  
  
 Кроме того, можно задать <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойства `true` и задать параметры в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции. Когда <xref:System.Web.UI.WebControls.LinqDataSource.AutoGenerateWhereClause%2A> свойство `true`, нет необходимости включать именованные параметры в <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство. Вместо этого <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления автоматически создает Where предложение на основе параметров в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> свойство.  
  
 Дополнительные сведения о том, как для фильтрации данных см. в разделе [Пошаговое руководство: Выбор и фильтрация подмножества данных с элементами управления GridView и LinqDataSource](https://msdn.microsoft.com/library/c1cca3e8-86e4-4e69-a29f-1c05b91f2205).  
  
   
  
## Examples  
 Приведенный ниже показано, как фильтровать данные, возвращенные из запроса, основанного на статическое условие.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default5.aspx#5)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#5](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default5.aspx#5)]  
  
 Следующий пример показывает способ фильтрации данных, на основе значения, предоставленные пользователем во время выполнения. В этом примере <xref:System.Web.UI.WebControls.DropDownList> управления и <xref:System.Web.UI.WebControls.GridView> управления отображаются на странице. Когда пользователь выбирает одно из значений в <xref:System.Web.UI.WebControls.DropDownList> управления <xref:System.Web.UI.WebControls.LinqDataSource> элемент управления выбирает из `Products` таблицы только те строки, содержащие `UserPrice` значения, равные выбранное значение. <xref:System.Web.UI.WebControls.GridView> Элемент управления затем отображает отфильтрованные данные.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WhereParameters">
      <MemberSignature Language="C#" Value="public System.Web.UI.WebControls.ParameterCollection WhereParameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Web.UI.WebControls.ParameterCollection WhereParameters" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WhereParameters As ParameterCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Web::UI::WebControls::ParameterCollection ^ WhereParameters { System::Web::UI::WebControls::ParameterCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WhereParameters : System.Web.UI.WebControls.ParameterCollection" Usage="System.Web.UI.WebControls.LinqDataSource.WhereParameters" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Web.DynamicData.IDynamicDataSource.WhereParameters</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Web.Extensions</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Category("Data")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Web.UI.PersistenceMode(System.Web.UI.PersistenceMode.InnerProperty)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.ParameterCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает коллекцию параметров, которые используются для создания оператора Where.</summary>
        <value>Коллекцию параметров, которые используются для создания предложения Where в свойстве <see cref="P:System.Web.UI.WebControls.LinqDataSource.Where" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.LinqDataSource> Элемент управления использует параметры в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции для создания предложения во время выполнения. После добавления параметров к <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции, если вы хотите установить один или несколько условий в Where программными средствами предложение. Например, может найти таблицу базы данных для записей с фамилией, равное значению <xref:System.Web.UI.WebControls.TextBox> элемента управления. В этом случае добавления параметра <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> сбор данных для значения текстового поля.  
  
 Если необходимо задать значение во время выполнения в Where предложения, не нужно использовать <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции. Можно определить поля для извлечения в <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство. Например, для возвращения значения из таблицы базы данных где `LastName` значение равно «Adams» в разметке, <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойства `'LastName = "Adams"'` без параметров.  
  
 Чтобы задать значения в <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции, задавать имя для каждого параметра, а затем добавить заполнитель в <xref:System.Web.UI.WebControls.LinqDataSource.Where%2A> свойство для этого параметра. В Where предложение, в начале имя каждого параметра с символа @.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Web.UI.WebControls.LinqDataSource.WhereParameters%2A> коллекции для динамического создания Where предложение. <xref:System.Web.UI.WebControls.LinqDataSource> Управления возвращает все записи со значением в `Price` столбец, который больше, чем значения, выбранного пользователем в <xref:System.Web.UI.WebControls.DropDownList> элемента управления.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/cs/Default6.aspx#6)]
 [!code-aspx-vb[System.Web.UI.WebControls.LinqDataSource_Simple#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.LinqDataSource_Simple/vb/Default6.aspx#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>