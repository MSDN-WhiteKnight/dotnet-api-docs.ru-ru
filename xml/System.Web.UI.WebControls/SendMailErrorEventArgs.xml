<Type Name="SendMailErrorEventArgs" FullName="System.Web.UI.WebControls.SendMailErrorEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8e1094a400e7f9f928cce080d1cb3194eb8424e9" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51873788" /></Metadata><TypeSignature Language="C#" Value="public class SendMailErrorEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SendMailErrorEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.SendMailErrorEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SendMailErrorEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendMailErrorEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type SendMailErrorEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет данные для события <see langword="SendMailError" /> в таких элементах управления, как <see cref="T:System.Web.UI.WebControls.ChangePassword" />, <see cref="T:System.Web.UI.WebControls.CreateUserWizard" /> и <see cref="T:System.Web.UI.WebControls.PasswordRecovery" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> Объект содержит сообщение об ошибке, вызванное объектом почтовым SMTP, если не удалось отправить сообщение электронной почты с <xref:System.Web.UI.WebControls.ChangePassword> элемента управления, или <xref:System.Web.UI.WebControls.CreateUserWizard> элемента управления. В таком случае <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> объект отправляется для <xref:System.Web.UI.WebControls.SendMailErrorEventHandler>.  
  
 Создание <xref:System.Web.UI.WebControls.SendMailErrorEventHandler> делегат для обработки события. Обработка события позволяет веб-приложения продолжить работу, несмотря на то, что произошло исключение. Это полезно в том случае, если она не важны для отправки сообщения электронной почты. Например если исключение возникает, когда пользователь работает с помощью нескольких шагов мастера, бывает полезно записать ошибку в журнал, отобразить информационное сообщение для пользователя и пользователи могут завершить работу мастера.  
  
 Изучите <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> свойства, чтобы определить действительную причину исключения. Наиболее распространенной причиной для исключения является ошибка конфигурации [ &lt;smtp&gt; (сетевые параметры)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md) файла конфигурации компьютера. Несмотря на то, что подобные ошибки обычно выявляются во время разработки и отладки приложения, почтовых серверов может привести к неожиданному в рабочей среде, и необходимо определить, следует ли переход на другой в этой ситуации всего приложения. В противном случае обработка события позволяет продолжить выполнение приложения.  
  
 Необходимо задать <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> свойства `true` информировать, что исключение было обработано; в противном случае — значение, исключение создается снова и будет включать исходный вызов стека и сообщение об ошибке.  
  
 Если не создать обработчик событий для <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> событий, или при создании обработчика событий, но оставить <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> свойство значение `false`, веб-приложения перестанут работать, если произошла ошибка при отправке сообщения электронной почты и будет ASP.NET сообщение об ошибке.  
  
 <xref:System.Web.UI.WebControls.ChangePassword.OnSendMailError%2A> Метод также позволяет производным классам обрабатывать событие, вместо этого выполняется <xref:System.Web.UI.WebControls.SendMailErrorEventHandler>. Это предпочтительная методика для обработки события в классе, который является производным от <xref:System.Web.UI.WebControls.ChangePassword> или <xref:System.Web.UI.WebControls.CreateUserWizard>.  
  
 Дополнительные сведения об обработке событий см. в разделе [Server, обработка событий в страниц веб-форм ASP.NET](https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9).  
  
   
  
## Examples  
 В следующем примере кода демонстрируется страница ASP.NET, которая использует <xref:System.Web.UI.WebControls.ChangePassword> веб-элемент управления и включает в себя обработчик событий для <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> событие с именем SendMailError. В примере кода предполагается, что ASP.NET веб-сайт настроен на использование членства ASP.NET и проверки подлинности форм и что был создан пользователь, имя и пароль вы должны знать. Дополнительные сведения см. в разделе [как: реализация простой проверки подлинности Forms](https://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e).  
  
 Если смена пароля прошла успешно, код в `SendingMail` обработчик событий предпринимает попытку отправки сообщения электронной почты пользователю, чтобы подтвердить изменение. SMTP должен быть уже настроен на сервере в порядке для работы этого примера кода. Сведения о настройке SMTP-сервера, см. в разделе [NIB: Практическое: Установка и настройка виртуальные SMTP-серверы в IIS 6.0](https://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8). Для целей этого примера нет необходимости для настройки SMTP-сервера; Пример предназначен для проверки на сбой отправки сообщения электронной почты.  
  
 Если почтовый сервер настроен неправильно или другой ошибки и не удается отправить сообщение электронной почты, `SendMailError` функция вызывается. Сообщение отображается для пользователя. Кроме того событие заносится в журнал событий приложений Windows, исходя из предположения, что источник события с именем MySamplesSite уже существует. См. в примере кода ниже, чтобы создать указанный источник события. Дополнительные сведения о создании источника событий, см. в разделе [Server, обработка событий в страниц веб-форм ASP.NET](https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9). <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> Свойство <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> имеет значение `true` для указания, что ошибка была обработана.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 В следующем примере кода следует используйте, если вам нужно программным способом добавить источник события с именем MySamplesSite в журнал приложений. Источник событий должен существовать в порядке для первого примера кода для правильной работы. В следующем примере кода требуются права администратора.  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>При переопределении метода <see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" /> в производном классе, не забудьте вызвать <see cref="M:System.Web.UI.WebControls.ChangePassword.OnSendMailError(System.Web.UI.WebControls.SendMailErrorEventArgs)" /> метод базового класса, чтобы зарегистрированные делегаты получили событие.</para></block>
    <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
    <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
    <altmember cref="T:System.Net.Mail.MailMessage" />
    <related type="Article" href="https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9">Обработка событий сервера на веб-страниц ASP.NET</related>
    <related type="Article" href="https://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f">Обработка и вызов событий</related>
    <related type="Article" href="https://msdn.microsoft.com/library/448f7802-0aa8-4304-abf7-82e138877dc8">Вкладка приложения средства администрирования веб-сайта</related>
    <related type="Article" href="https://msdn.microsoft.com/library/d85075bc-9c1a-4453-8a0c-539b10853c9c">Защита элементов управления входа</related>
    <related type="Article" href="https://msdn.microsoft.com/library/3eeeee9e-b09f-4c7f-8ce5-d9ca1f9322ad">Базовые методики безопасности для веб-приложений</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SendMailErrorEventArgs (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.SendMailErrorEventArgs.#ctor(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SendMailErrorEventArgs(Exception ^ e);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.SendMailErrorEventArgs : Exception -&gt; System.Web.UI.WebControls.SendMailErrorEventArgs" Usage="new System.Web.UI.WebControls.SendMailErrorEventArgs e" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Exception" />, содержащий исключение.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.SendMailErrorEventArgs" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
        <related type="Article" href="https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9">Обработка событий сервера на веб-страниц ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f">Обработка и вызов событий</related>
        <related type="Article" href="https://msdn.microsoft.com/library/448f7802-0aa8-4304-abf7-82e138877dc8">Вкладка приложения средства администрирования веб-сайта</related>
      </Docs>
    </Member>
    <Member MemberName="Exception">
      <MemberSignature Language="C#" Value="public Exception Exception { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Exception Exception" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />
      <MemberSignature Language="VB.NET" Value="Public Property Exception As Exception" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Exception ^ Exception { Exception ^ get(); void set(Exception ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Exception : Exception with get, set" Usage="System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Exception</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает исключение, выбрасываемое почтовым SMTP-сервером при невозможности отправить сообщение электронной почты.</summary>
        <value>Объект <see cref="T:System.Exception" />, который содержит исключение.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> Свойство содержит исключение, вызванное почтовым SMTP, если не удалось отправить сообщение электронной почты с <xref:System.Web.UI.WebControls.ChangePassword> управления или <xref:System.Web.UI.WebControls.CreateUserWizard>. Наиболее распространенной причиной этого исключения является ошибка конфигурации [ &lt;smtp&gt; (сетевые параметры)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md) файла конфигурации компьютера, который выдает следующее сообщение об исключении: `The transport failed to connect to the server.`  
  
 Если возникает ошибка в сообщении электронной почты, при внедрении в файл с помощью не вызываются исключения <xref:System.Web.UI.WebControls.MailDefinition.EmbeddedObjects%2A>. Вместо этого внедренный файл отображается нарушение при просмотре сообщения электронной почты.  
  
 Необходимо задать <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> объекта, передаваемого в качестве `e` параметр <xref:System.Web.UI.WebControls.SendMailErrorEventArgs>, `true` информировать, что исключение было обработано; в противном случае — значение, исключение создается снова и включает в себя исходный вызов стека и сообщение об ошибке.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется страница ASP.NET, которая использует <xref:System.Web.UI.WebControls.ChangePassword> веб-элемент управления и включает в себя обработчик событий для <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> событие с именем `SendMailError`. В примере кода предполагается, что ASP.NET веб-сайт настроен на использование членства ASP.NET и проверки подлинности форм и что был создан пользователь, имя и пароль вы должны знать. Дополнительные сведения см. в разделе [как: реализация простой проверки подлинности Forms](https://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e).  
  
 Если смена пароля прошла успешно, код в `SendingMail` обработчик событий предпринимает попытку отправки сообщения электронной почты пользователю, чтобы подтвердить изменение. SMTP должен быть уже настроен на сервере в порядке для работы этого примера кода. Сведения о настройке SMTP-сервера, см. в разделе [NIB: Практическое: Установка и настройка виртуальные SMTP-серверы в IIS 6.0](https://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8). Для целей этого примера нет необходимости для настройки SMTP-сервера; Пример предназначен для проверки на сбой отправки сообщения электронной почты.  
  
 Если почтовый сервер настроен неправильно или другой ошибки и не удается отправить сообщение электронной почты, `SendMailError` функция вызывается. Сообщение отображается для пользователя. Кроме того событие заносится в журнал событий приложений Windows, исходя из предположения, что источник события с именем MySamplesSite уже существует. См. в примере кода ниже, чтобы создать указанный источник события. Дополнительные сведения о создании источника событий, см. в разделе [Server, обработка событий в страниц веб-форм ASP.NET](https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9). <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> Свойство <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> имеет значение `true` для указания, что ошибка была обработана.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 В следующем примере кода следует используйте, если вам нужно программным способом добавить источник события с именем MySamplesSite в журнал приложений. Источник событий должен существовать в порядке для первого примера кода для правильной работы. В следующем примере кода требуются права администратора.  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
        <related type="Article" href="https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9">Обработка событий сервера на веб-страниц ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f">Обработка и вызов событий</related>
        <related type="Article" href="https://msdn.microsoft.com/library/448f7802-0aa8-4304-abf7-82e138877dc8">Вкладка приложения средства администрирования веб-сайта</related>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Web.UI.WebControls.SendMailErrorEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, было ли обработано исключение SMTP, содержащееся в свойстве <see cref="P:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception" />.</summary>
        <value>Если значение равно <see langword="true" />, исключение утилизируется и обрабатывается делегатом <see cref="T:System.Web.UI.WebControls.SendMailErrorEventHandler" />. Если значение равно <see langword="false" />, исключение выбрасывается, включая исходный стек вызова и сообщение об ошибке.  
  
Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> Указывает свойство, если <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Exception%2A> было обработано. Исключение вызывается почтовым SMTP при невозможности отправить сообщение электронной почты с <xref:System.Web.UI.WebControls.ChangePassword> управления или <xref:System.Web.UI.WebControls.CreateUserWizard>. Наиболее распространенной причиной для исключения является ошибка конфигурации [ &lt;smtp&gt; (сетевые параметры)](~/docs/framework/configure-apps/file-schema/network/smtp-element-network-settings.md) файла конфигурации компьютера. Несмотря на то, что подобные ошибки обычно выявляются во время разработки и отладки приложения, почтовых серверов может привести к неожиданному в рабочей среде, и необходимо определить, следует ли переход на другой в этой ситуации всего приложения. В противном случае обработка события позволяет продолжить выполнение приложения.  
  
 Если не создать обработчик событий для <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> событий, или при создании обработчика событий, но оставить <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> свойство значение `false`, веб-приложения перестанут работать, если произошла ошибка при отправке сообщения электронной почты и будет ASP.NET сообщение об ошибке. Обработка события позволяет веб-приложения продолжить работу, несмотря на то, что произошло исключение. Это полезно в том случае, если она не важны для отправки сообщения электронной почты. Например если исключение возникает, когда пользователь работает с помощью нескольких шагов мастера, бывает полезно записать ошибку в журнал, отобразить информационное сообщение для пользователя и пользователи могут завершить работу мастера.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется страница ASP.NET, которая использует <xref:System.Web.UI.WebControls.ChangePassword> веб-элемент управления и включает в себя обработчик событий для <xref:System.Web.UI.WebControls.ChangePassword.SendMailError> событие с именем `SendMailError`. В примере кода предполагается, что ASP.NET веб-сайт настроен на использование членства ASP.NET и проверки подлинности форм и что был создан пользователь, имя и пароль вы должны знать. Дополнительные сведения см. в разделе [как: реализация простой проверки подлинности Forms](https://msdn.microsoft.com/library/9522bc8d-1a41-480a-aa11-c389a4ac2d2e).  
  
 Если смена пароля прошла успешно, код в `SendingMail` обработчик событий предпринимает попытку отправки сообщения электронной почты пользователю, чтобы подтвердить изменение. SMTP должен быть уже настроен на сервере в порядке для работы этого примера кода. Сведения о настройке SMTP-сервера, см. в разделе [NIB: Практическое: Установка и настройка виртуальные SMTP-серверы в IIS 6.0](https://msdn.microsoft.com/library/ed204b58-24af-47d0-9687-60e5df5f17f8). Для целей этого примера нет необходимости для настройки SMTP-сервера; Пример предназначен для проверки на сбой отправки сообщения электронной почты.  
  
 Если почтовый сервер настроен неправильно или другой ошибки и не удается отправить сообщение электронной почты, `SendMailError` функция вызывается. Сообщение отображается для пользователя. Кроме того событие заносится в журнал событий приложений Windows, исходя из предположения, что источник события с именем MySamplesSite уже существует. См. в примере кода ниже, чтобы создать указанный источник события. Дополнительные сведения о создании источника событий, см. в разделе [Server, обработка событий в страниц веб-форм ASP.NET](https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9). <xref:System.Web.UI.WebControls.SendMailErrorEventArgs.Handled%2A> Свойство <xref:System.Web.UI.WebControls.SendMailErrorEventArgs> имеет значение `true` для указания, что ошибка была обработана.  
  
 [!code-aspx-csharp[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/CS/changepassword_cs.aspx#1)]
 [!code-aspx-vb[System.Web.UI.WebControls.SendMailErrorEventHandler#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.UI.WebControls.SendMailErrorEventHandler/VB/changepassword_vb.aspx#1)]  
  
 В следующем примере кода следует используйте, если вам нужно программным способом добавить источник события с именем MySamplesSite в журнал приложений. Источник событий должен существовать в порядке для первого примера кода для правильной работы. В следующем примере кода требуются права администратора.  
  
 [!code-csharp[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/CS/createeventsource.cs#1)]
 [!code-vb[System.Diagnostics.EventLog.CreateEventSource#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Diagnostics.EventLog.CreateEventSource/VB/createeventsource.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Web.UI.WebControls.CreateUserWizard.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.ChangePassword.SendMailError" />
        <altmember cref="E:System.Web.UI.WebControls.PasswordRecovery.SendMailError" />
        <altmember cref="T:System.Net.Mail.MailMessage" />
        <related type="Article" href="https://msdn.microsoft.com/library/765bfc89-33ee-4d0d-bbe6-3b172c06def9">Обработка событий сервера на веб-страниц ASP.NET</related>
        <related type="Article" href="https://msdn.microsoft.com/library/b6f65241-e0ad-4590-a99f-200ce741bb1f">Обработка и вызов событий</related>
        <related type="Article" href="https://msdn.microsoft.com/library/448f7802-0aa8-4304-abf7-82e138877dc8">Вкладка приложения средства администрирования веб-сайта</related>
      </Docs>
    </Member>
  </Members>
</Type>