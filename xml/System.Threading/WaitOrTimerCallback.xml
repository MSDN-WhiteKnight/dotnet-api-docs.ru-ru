<Type Name="WaitOrTimerCallback" FullName="System.Threading.WaitOrTimerCallback">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0bbfa013120262f762e4cf955271e6d0ee2830e1" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58706403" /></Metadata><TypeSignature Language="C#" Value="public delegate void WaitOrTimerCallback(object state, bool timedOut);" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed WaitOrTimerCallback extends System.MulticastDelegate" />
  <TypeSignature Language="DocId" Value="T:System.Threading.WaitOrTimerCallback" />
  <TypeSignature Language="VB.NET" Value="Public Delegate Sub WaitOrTimerCallback(state As Object, timedOut As Boolean)" />
  <TypeSignature Language="C++ CLI" Value="public delegate void WaitOrTimerCallback(System::Object ^ state, bool timedOut);" />
  <TypeSignature Language="F#" Value="type WaitOrTimerCallback = delegate of obj * bool -&gt; unit" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.ThreadPool</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Delegate</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Parameters>
    <Parameter Name="state" Type="System.Object" />
    <Parameter Name="timedOut" Type="System.Boolean" />
  </Parameters>
  <ReturnValue>
    <ReturnType>System.Void</ReturnType>
  </ReturnValue>
  <Docs>
    <param name="state">Объект, содержащий информацию, используемую всякий раз методом обратного вызова при каждом выполнении.</param>
    <param name="timedOut">Значение <see langword="true" />, если истекло время ожидания объекта <see cref="T:System.Threading.WaitHandle" />; <see langword="false" />, если объект получил сигнал.</param>
    <summary>Представляет метод, который вызывается при получении объектом <see cref="T:System.Threading.WaitHandle" /> сигнала или истечении времени ожидания.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.WaitOrTimerCallback> Представляет метод обратного вызова, который должен выполняться, когда дескриптор ожидания зарегистрированного времени ожидания или переводится в сигнальное состояние. Создайте делегат, передав в метод обратного вызова для <xref:System.Threading.WaitOrTimerCallback> конструктор. Метод должен иметь сигнатуру, показано ниже.  
  
 Создать зарегистрированный ожидающий дескриптор, передав <xref:System.Threading.WaitOrTimerCallback> делегировать и <xref:System.Threading.WaitHandle> для <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A?displayProperty=nameWithType>. Метод обратного вызова выполняется каждый раз при <xref:System.Threading.WaitHandle> времени ожидания или переводится в сигнальное состояние.  
  
  
> [!NOTE]
>  Пользователи Visual Basic могут опускать <xref:System.Threading.WaitOrTimerCallback> конструктора и просто использовать `AddressOf` оператор при передаче в метод обратного вызова, <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A>. Visual Basic автоматически вызывает соответствующий конструктор делегата.  
  
 Если вы хотите передать информацию в метод обратного вызова, создайте объект, который содержит необходимые сведения и передать его в <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> при создании дескриптора ожидания зарегистрированного. Каждый раз, выполняет метод обратного вызова, `state` параметр содержит этот объект.  
  
 Дополнительные сведения об использовании методов обратного вызова для синхронизации потоков пула см. в разделе [пул управляемых потоков](~/docs/standard/threading/the-managed-thread-pool.md).  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Threading.WaitOrTimerCallback> делегата, представляющего метод обратного вызова, который выполняется, когда сигнал дескриптор ожидания.  
  
 В примере также показано использование <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> методом, выполняемым указанный метод обратного вызова, когда сигнал дескриптор ожидания. В этом примере метод обратного вызова — `WaitProc` и дескриптора ожидания <xref:System.Threading.AutoResetEvent>.  
  
 В примере определяется `TaskInfo` класса для хранения сведений, который передается методу обратного вызова при его выполнении. В примере создается `TaskInfo` , которому присваивается некоторых строковых данных. <xref:System.Threading.RegisteredWaitHandle> , Возвращаемый <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> метод назначается `Handle` поле `TaskInfo` объекта, таким образом, метод обратного вызова имеет доступ к <xref:System.Threading.RegisteredWaitHandle>.  
  
 В дополнение к `TaskInfo` объекта, вызов <xref:System.Threading.ThreadPool.RegisterWaitForSingleObject%2A> указывает метод <xref:System.Threading.AutoResetEvent> ожидает задачу, <xref:System.Threading.WaitOrTimerCallback> делегат, представляющий `WaitProc` метод обратного вызова, интервал времени ожидания в секунду и несколько обратных вызовов .  
  
 Когда основной поток не сигнализирует о <xref:System.Threading.AutoResetEvent> путем вызова его <xref:System.Threading.EventWaitHandle.Set%2A> метода <xref:System.Threading.WaitOrTimerCallback> вызове делегата. `WaitProc` Тесты метод <xref:System.Threading.RegisteredWaitHandle> для определения, истекло ли время ожидания. Если был вызван обратный вызов, так как получил сигнал дескриптор ожидания, `WaitProc` отменяет регистрацию метод <xref:System.Threading.RegisteredWaitHandle>, останавливается обратных вызовов. В случае истечения времени ожидания она будет продолжать ожидание. `WaitProc` Метод завершает сообщение в окно консоли.  
  
 [!code-cpp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/CS/source.cs#1)]
 [!code-vb[System.Threading.ThreadPool RegisterWaitForSingleObject0#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ThreadPool RegisterWaitForSingleObject0/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/standard/threading/threads-and-threading.md">Потоки и работа с потоками</related>
    <related type="Article" href="~/docs/standard/threading/the-managed-thread-pool.md">Пул управляемых потоков</related>
  </Docs>
</Type>