<Type Name="ManualResetEvent" FullName="System.Threading.ManualResetEvent">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6ef7963b99d115f4a7f54e535f80eb38d73ee365" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56394156" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManualResetEvent : System.Threading.EventWaitHandle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManualResetEvent extends System.Threading.EventWaitHandle" />
  <TypeSignature Language="DocId" Value="T:System.Threading.ManualResetEvent" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManualResetEvent&#xA;Inherits EventWaitHandle" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManualResetEvent sealed : System::Threading::EventWaitHandle" />
  <TypeSignature Language="F#" Value="type ManualResetEvent = class&#xA;    inherit EventWaitHandle" />
  <AssemblyInfo>
    <AssemblyName>System.Threading</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Threading.EventWaitHandle</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-1.1">System.Threading.WaitHandle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет событие синхронизации потока, которое при получении сигнала необходимо сбросить вручную. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

 Использовании `ManualResetEvent`, <xref:System.Threading.AutoResetEvent>, и <xref:System.Threading.EventWaitHandle> для взаимодействия потоков (или сигнал потока). Дополнительные сведения см. в разделе [потоков взаимодействия, или передачи сигнала](~/docs/standard/threading/overview-of-synchronization-primitives.md#thread-interaction-or-signaling) раздел [Обзор примитивов синхронизации](~/docs/standard/threading/overview-of-synchronization-primitives.md) статьи.  

 Когда поток начинает действие, которое необходимо выполнить перед другими продолжить потоков, он вызывает метод [ManualResetEvent.Reset](xref:System.Threading.EventWaitHandle.Reset%2A) поместить `ManualResetEvent` в сигнальное состояние. Этот поток может рассматриваться как управление `ManualResetEvent`. После этого вызова потоков [ManualResetEvent.WaitOne](xref:System.Threading.WaitHandle.WaitOne%2A) блока, ожидая сигнала. Если управляющий поток завершит работу, он вызывает [ManualResetEvent.Set](xref:System.Threading.EventWaitHandle.Set%2A) информировать, что можно продолжить ожидающих потоков. Все ожидающие потоки освобождаются.  

 После сигнала, `ManualResetEvent` остается в сигнальном состоянии, пока сбрасывается вручную путем вызова <xref:System.Threading.EventWaitHandle.Reset> метод. То есть вызовы <xref:System.Threading.WaitHandle.WaitOne%2A> немедленный возврат.  

 Можно управлять начальное состояние `ManualResetEvent` , передав конструктору логическое значение: `true` Если начальное состояние переводится в сигнальное состояние, и `false` в противном случае.  
 
 `ManualResetEvent` Можно также использовать с `static` <xref:System.Threading.WaitHandle.WaitAll%2A> и <xref:System.Threading.WaitHandle.WaitAny%2A> методы.  
  
 Начиная с .NET Framework версии 2.0, <xref:System.Threading.ManualResetEvent> является производным от <xref:System.Threading.EventWaitHandle> класса. Объект <xref:System.Threading.ManualResetEvent> функционально эквивалентен <xref:System.Threading.EventWaitHandle> созданные с помощью <xref:System.Threading.EventResetMode.ManualReset?displayProperty=nameWithType>.  
  
> [!NOTE]
> В отличие от <xref:System.Threading.ManualResetEvent> класса <xref:System.Threading.EventWaitHandle> класс предоставляет доступ к именованные системные события синхронизации.  

 Начиная с .NET Framework версии 4.0, <xref:System.Threading.ManualResetEventSlim?displayProperty=nameWithType> класс является упрощенной альтернативой для <xref:System.Threading.ManualResetEvent>.    
   
   
  
## Examples  
 В следующем примере показано, как <xref:System.Threading.ManualResetEvent> работает. Пример начинается с <xref:System.Threading.ManualResetEvent> в состояние без сигнала (то есть `false` передается в конструктор). В примере создается три потоков, каждый из которых блоков на <xref:System.Threading.ManualResetEvent> путем вызова его <xref:System.Threading.WaitHandle.WaitOne%2A> метод. Когда пользователь нажимает **ввод** ключа, в примере вызывается <xref:System.Threading.EventWaitHandle.Set%2A> метод, который освобождает все три потока. Сравните это с поведением <xref:System.Threading.AutoResetEvent> класс, который освобождает один потоков одновременно, сброс автоматически после каждого выпуска.  
  
 Нажав клавишу **ввод** ключ еще раз демонстрирует, что <xref:System.Threading.ManualResetEvent> остается в сигнальном состоянии, пока его <xref:System.Threading.EventWaitHandle.Reset%2A> вызывается метод: В примере запускается две дополнительные потоки. Эти потоки не блокируются во время звонка <xref:System.Threading.WaitHandle.WaitOne%2A> метод, но вместо запуска и выполнения.  
  
 Нажав клавишу **ввод** ключ еще раз приводит пример, чтобы вызвать <xref:System.Threading.EventWaitHandle.Reset%2A> метод и начать один дополнительные поток, который блокирует при вызове <xref:System.Threading.WaitHandle.WaitOne%2A>. Нажав клавишу **ввод** ключа один последний раз вызывает <xref:System.Threading.EventWaitHandle.Set%2A> выпуска последнего потока и программа завершается.  
  
 [!code-cpp[System.Threading.ManualResetEvent#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CPP/source.cpp#1)]
 [!code-csharp[System.Threading.ManualResetEvent#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/CS/source.cs#1)]
 [!code-vb[System.Threading.ManualResetEvent#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Threading.ManualResetEvent/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <threadsafe>Этот класс является потокобезопасным.</threadsafe>
    <altmember cref="T:System.Threading.WaitHandle" />
    <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
    <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Общие сведения о примитивах синхронизации</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManualResetEvent (bool initialState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(bool initialState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.#ctor(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (initialState As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManualResetEvent(bool initialState);" />
      <MemberSignature Language="F#" Value="new System.Threading.ManualResetEvent : bool -&gt; System.Threading.ManualResetEvent" Usage="new System.Threading.ManualResetEvent initialState" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="initialState" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="initialState">Значение <see langword="true" /> для задания начального состояния сигнальным; <see langword="false" /> для задания несигнального начального состояния.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Threading.ManualResetEvent" /> логическим значением, показывающим наличие сигнального состояния.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если начальное состояние <xref:System.Threading.ManualResetEvent> оповещается (то есть, в том случае, если создается путем передачи `true` для `initialState`), потоки, ожидающие <xref:System.Threading.ManualResetEvent> не блокируют. Если начальное состояние является несигнальным, потоки блокируются до <xref:System.Threading.EventWaitHandle.Set%2A> вызывается метод.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.WaitHandle" />
        <related type="Article" href="~/docs/standard/threading/index.md">Управляемая поточность</related>
        <related type="Article" href="~/docs/standard/threading/overview-of-synchronization-primitives.md">Общие сведения о примитивах синхронизации</related>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public bool Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Function Reset () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; bool" Usage="manualResetEvent.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Задает несигнальное состояние события, вызывая блокирование потоков.</summary>
        <returns><see langword="true" />, если операция прошла успешно; в противном случае — <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Set">
      <MemberSignature Language="C#" Value="public bool Set ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Set() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.ManualResetEvent.Set" />
      <MemberSignature Language="VB.NET" Value="Public Function Set () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Set();" />
      <MemberSignature Language="F#" Value="member this.Set : unit -&gt; bool" Usage="manualResetEvent.Set " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Threading</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Задает сигнальное состояние события, позволяя одному или нескольким ожидающим потокам развертываться.</summary>
        <returns><see langword="true" />, если операция прошла успешно; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Вызов метода Set оставляет дескриптор ожидания в сигнальном состоянии до <xref:System.Threading.ManualResetEvent.Reset> вызывается метод.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>