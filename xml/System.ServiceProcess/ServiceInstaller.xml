<Type Name="ServiceInstaller" FullName="System.ServiceProcess.ServiceInstaller">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5f792f269c705609bda7c858826060ba7cb5bb57" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55364612" /></Metadata><TypeSignature Language="C#" Value="public class ServiceInstaller : System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceInstaller extends System.Configuration.Install.ComponentInstaller" />
  <TypeSignature Language="DocId" Value="T:System.ServiceProcess.ServiceInstaller" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceInstaller&#xA;Inherits ComponentInstaller" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceInstaller : System::Configuration::Install::ComponentInstaller" />
  <TypeSignature Language="F#" Value="type ServiceInstaller = class&#xA;    inherit ComponentInstaller" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceProcess</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Configuration.Install.ComponentInstaller</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Устанавливает класс, расширяющий класс <see cref="T:System.ServiceProcess.ServiceBase" /> для реализации службы. Этот класс вызывается программой установки при установке служебного приложения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller> Работы относятся к службе, с которым он связан. Он используется программой установки для записи значения реестра, связанные со службой подраздел в раздел реестра HKEY_LOCAL_MACHINE\System\CurrentControlSet\Services. Служба определяется по ее имени в этом подразделе. Раздел также включает имя исполняемого файла или файла DLL, к которому принадлежит служба.  
  
 Чтобы установить службу, создайте класс установщика проекта, который наследует от <xref:System.Configuration.Install.Installer> и укажите <xref:System.ComponentModel.RunInstallerAttribute> атрибут класса для `true`. В проекте, создайте один <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляра для каждого приложения службы и один <xref:System.ServiceProcess.ServiceInstaller> экземпляра для каждой службы в приложении. В конструкторе класса установщика проекта, задайте свойства установки для службы с помощью <xref:System.ServiceProcess.ServiceProcessInstaller> и <xref:System.ServiceProcess.ServiceInstaller> экземпляров и добавьте экземпляры <xref:System.Configuration.Install.Installer.Installers%2A> коллекции.  
  
> [!NOTE]
>  Рекомендуется использовать конструктор для добавления экземпляров установщика; Тем не менее если вам нужно добавить к <xref:System.Configuration.Install.Installer.Installers%2A> коллекции в <xref:System.ServiceProcess.ServiceInstaller.Install%2A> метод, не забудьте выполнить же дополнения к коллекции в <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> метод.  
  
 Для всех классов, производных от <xref:System.Configuration.Install.Installer> класса, состояние <xref:System.Configuration.Install.Installer.Installers%2A> коллекции должны быть одинаковыми в <xref:System.ServiceProcess.ServiceInstaller.Install%2A> и <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> методы. Тем не менее, можно избежать обслуживания коллекции между <xref:System.ServiceProcess.ServiceInstaller.Install%2A> и <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> методы при добавлении экземпляров установщика <xref:System.Configuration.Install.Installer.Installers%2A> коллекции в конструкторе класса пользовательского установщика. При вызове программы установки, он ищет <xref:System.ComponentModel.RunInstallerAttribute> атрибута. Если атрибут является `true`, производится установка всех служб, которые были добавлены <xref:System.Configuration.Install.Installer.Installers%2A> коллекции, которые были связаны с установщиком проектов. Если <xref:System.ComponentModel.RunInstallerAttribute> является `false` или существует, программа установки не учитывает установщик проекта.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller> Связанные с вашего проекта установки класса устанавливает общие сведения для всех <xref:System.ServiceProcess.ServiceInstaller> экземпляров в проекте. Если эта служба имеет об отличиях от других служб в проекте, эти сведения для конкретной службы устанавливается с помощью данного метода.  
  
> [!NOTE]
>  Очень важно, <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> должно совпадать с <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> класса, производного от <xref:System.ServiceProcess.ServiceBase>. Как правило, значение <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> для службы задано в функции Main() исполняемого файла приложения-службы. Диспетчер управления службами использует <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> свойства для поиска службы в исполняемой программе.  
  
 Другие свойства можно изменить на <xref:System.ServiceProcess.ServiceInstaller> до или после его добавления <xref:System.Configuration.Install.Installer.Installers%2A> коллекцию установщика проекта. Например, службы <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> может быть присвоено запустите службу автоматически при перезагрузке или потребовать от пользователя запустить службу вручную.  
  
 Как правило, не будет вызывать методы в <xref:System.ServiceProcess.ServiceInstaller> коде; они обычно вызываются только программой установки. Программа установки автоматически вызывает <xref:System.ServiceProcess.ServiceProcessInstaller.Install%2A?displayProperty=nameWithType> и <xref:System.ServiceProcess.ServiceInstaller.Install%2A?displayProperty=nameWithType> методов во время установки. При необходимости он обрабатывает сбои, путем вызова <xref:System.ServiceProcess.ServiceProcessInstaller.Rollback%2A> (или <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A?displayProperty=nameWithType>) для всех ранее установленных компонентов.  
  
 Программа установки вызывает метод <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> для удаления объекта.  
  
 Программа установки приложения автоматического сохранения сведений об уже установленных компонентах, с помощью установщика проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Сведения о состоянии постоянно обновляется как <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляра, при этом каждая <xref:System.ServiceProcess.ServiceInstaller> экземпляр устанавливается с помощью программы. Обычно нет необходимости явно изменять сведения о состоянии в коде.  
  
 Если установка выполняется, он автоматически создает <xref:System.Diagnostics.EventLogInstaller> для установки источник журнала событий, связанных с <xref:System.ServiceProcess.ServiceBase> производного класса. <xref:System.Diagnostics.EventLog.Log%2A> Свойство для этого источника задается <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> конструктор журнал приложений на компьютере. При задании <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> из <xref:System.ServiceProcess.ServiceInstaller> (который должен быть идентичен <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> службы), <xref:System.Diagnostics.EventLog.Source%2A> автоматически присваивается то же значение. При сбое Установка источника выполняется откат вместе с ранее установленных служб.  
  
 <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> Метод пытается остановить службу, если она запущена. Успешно ли или нет, <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> отменяет изменения, внесенные программой <xref:System.ServiceProcess.ServiceInstaller.Install%2A>. Если новый источник был создан для ведения журнала событий, он удаляется.  
  
   
  
## Examples  
 В следующем примере создается установщик проекта, вызывается `MyProjectInstaller`, который наследует от <xref:System.Configuration.Install.Installer>. Предполагается есть исполняемого файла, содержащего две службы: «Здравствуй, мир служба 1» и «Здравствуй, мир службы 2». В конструкторе для `MyProjectInstaller` (который будет вызываться программой установки), <xref:System.ServiceProcess.ServiceInstaller> объекты создаются для каждой службы, а также объект <xref:System.ServiceProcess.ServiceProcessInstaller> создается для исполняемого файла. Для программы установки для распознавания `MyProjectInstaller` как допустимый установщик, <xref:System.ComponentModel.RunInstallerAttribute> атрибут имеет значение `true`.  
  
 Необязательные свойства задаются на процессов и установщиков служб до их добавления к <xref:System.Configuration.Install.Installer.Installers%2A> коллекции. Когда программа установки осуществляет доступ к `MyProjectInstaller`, объекты, добавляемые к <xref:System.Configuration.Install.Installer.Installers%2A> коллекции посредством вызова <xref:System.Configuration.Install.InstallerCollection.Add%2A?displayProperty=nameWithType> будет устанавливаться в свою очередь. В процессе установщик сохраняются сведения о состоянии объектов, которые были установлены, поэтому каждый может быть отменена в свою очередь, если происходит сбой установки.  
  
 Обычно экземпляр вашего класса установщика проекта не создаются явным образом. Может создать его и добавить <xref:System.ComponentModel.RunInstallerAttribute> атрибута синтаксис, но это программу установки, которая фактически вызывает и, соответственно, класс.  
  
 [!code-cpp[Classic ServiceInstaller Example#1](~/samples/snippets/cpp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ServiceInstaller Example#1](~/samples/snippets/csharp/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/CS/source.cs#1)]
 [!code-vb[Classic ServiceInstaller Example#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_Classic/classic ServiceInstaller Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
    <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
    <altmember cref="T:System.ServiceProcess.ServiceBase" />
    <altmember cref="P:System.ServiceProcess.ServiceBase.EventLog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceInstaller ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceInstaller();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.ServiceProcess.ServiceInstaller" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы установить службу, создайте класс установщика проекта, который наследует от <xref:System.Configuration.Install.Installer> и укажите <xref:System.ComponentModel.RunInstallerAttribute> атрибут класса для `true`. В проекте, создайте один <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляра для каждого приложения службы и один <xref:System.ServiceProcess.ServiceInstaller> экземпляра для каждой службы в приложении. В конструкторе класса установщика проекта, задайте свойства установки для службы с помощью <xref:System.ServiceProcess.ServiceProcessInstaller> и <xref:System.ServiceProcess.ServiceInstaller> экземпляров и добавьте экземпляры <xref:System.Configuration.Install.Installer.Installers%2A> коллекции.  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Конструктор автоматически создает журнал событий источника, <xref:System.Diagnostics.EventLog.Log%2A> свойству журнал приложений на компьютере и <xref:System.Diagnostics.EventLogInstaller>. При задании <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> из <xref:System.ServiceProcess.ServiceInstaller>, который должен быть идентичен <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> службы, <xref:System.Diagnostics.EventLog.Source%2A> свойства журнала событий, автоматически присваивается то же значение. Источник, автоматически удаляется в случае сбоя установки.  
  
 <xref:System.ServiceProcess.ServiceInstaller.%23ctor%2A> Конструктора задает <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> свойства `ServiceStartMode.Manual` для указания, что пользователь запуска службы. Вы можете сбросить свойство `ServiceStartMode.Automatic` для указания, что служба запущена после перезагрузки компьютера.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Diagnostics.EventLog" />
        <altmember cref="T:System.ServiceProcess.ServiceStartMode" />
      </Docs>
    </Member>
    <Member MemberName="CopyFromComponent">
      <MemberSignature Language="C#" Value="public override void CopyFromComponent (System.ComponentModel.IComponent component);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CopyFromComponent(class System.ComponentModel.IComponent component) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CopyFromComponent (component As IComponent)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CopyFromComponent(System::ComponentModel::IComponent ^ component);" />
      <MemberSignature Language="F#" Value="override this.CopyFromComponent : System.ComponentModel.IComponent -&gt; unit" Usage="serviceInstaller.CopyFromComponent component" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="component" Type="System.ComponentModel.IComponent" />
      </Parameters>
      <Docs>
        <param name="component">Объект <see cref="T:System.ComponentModel.IComponent" />, из которого будет выполняться копирование.</param>
        <summary>Копирует в данный установщик свойства из экземпляра класса <see cref="T:System.ServiceProcess.ServiceBase" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод будет вызываться редко в коде. <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> обычно вызывается только конструкторами.  
  
 <xref:System.ServiceProcess.ServiceInstaller.CopyFromComponent%2A> сохраняет имя службы `component` параметр <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> из <xref:System.ServiceProcess.ServiceInstaller> экземпляра. (Так как параметр должен быть экземпляром класса, производного от <xref:System.ServiceProcess.ServiceBase>, `component` будет гарантированно содержать <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> свойство.)  
  
> [!NOTE]
>  Если вы используете конструктор Visual Studio, этот метод вызывается во время разработки, когда пользователь щелкает `Add Installer` на компонент, который указан этот класс как программа установки. Установщик получает все сведения из динамического компонента и сохраняет его для использования во время установки.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Компонент, связанный с данным установщиком, не наследуется из класса <see cref="T:System.ServiceProcess.ServiceBase" />.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
      </Docs>
    </Member>
    <Member MemberName="DelayedAutoStart">
      <MemberSignature Language="C#" Value="public bool DelayedAutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelayedAutoStart" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberSignature Language="VB.NET" Value="Public Property DelayedAutoStart As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DelayedAutoStart { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DelayedAutoStart : bool with get, set" Usage="System.ServiceProcess.ServiceInstaller.DelayedAutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDelayedAutoStart")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, следует ли задержать запуск службы, пока не заработают другие автоматически запускающиеся службы.</summary>
        <value>Значение <see langword="true" /> для задержки автоматического запуска службы; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DelayedAutoStart%2A> Свойства, которые могут применяться к любой службе, но оно игнорируется, если режим запуска службы — <xref:System.ServiceProcess.ServiceStartMode.Automatic>. Параметр вступает в силу при следующей перезагрузке системы. Диспетчер управления службами не гарантирует определенное время для службы.  
  
 Отложенный автоматический запуск службы не может быть членом группы упорядочения загрузки, но он может зависеть от другой службы автоматический запуск. Если приложение вызывает службу отложенный автоматический запуск, перед загрузкой, вызов завершается ошибкой.  
  
 В операционных системах, которые не поддерживают отложенный автоматический запуск задание этого свойства не влияет.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public string Description { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.Description" />
      <MemberSignature Language="VB.NET" Value="Public Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Description { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Description : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает описание для службы.</summary>
        <value>Описание службы. Значение по умолчанию — пустая строка ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте <xref:System.ServiceProcess.ServiceInstaller.Description%2A> свойство, описывающий назначение установленной службы для пользователя. Пользователь может просмотреть описание службы в приложениях, которые выводит сведения об установленных служб.  
  
 Например, с помощью Windows XP, можно просмотреть описание службы с помощью программы командной строки управления службой (Sc.exe) или можно просмотреть описание службы внутри **служб** узел **Управление компьютером**  консоли.  
  
   
  
## Examples  
 В следующем примере кода задаются свойства установки для нового приложения службы Windows. В примере задается имя службы, а также отображаемое имя и описание. После назначения свойства установки для службы, в примере добавляется <xref:System.ServiceProcess.ServiceInstaller> объект <xref:System.Configuration.Install.Installer.Installers%2A> коллекции.  
  
 [!code-csharp[ServiceProcess_ServiceInstaller#3](~/samples/snippets/csharp/VS_Snippets_CLR/ServiceProcess_serviceinstaller/CS/simpleserviceinstaller.cs#3)]
 [!code-vb[ServiceProcess_ServiceInstaller#3](~/samples/snippets/visualbasic/VS_Snippets_CLR/ServiceProcess_serviceinstaller/VB/service1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="DisplayName">
      <MemberSignature Language="C#" Value="public string DisplayName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DisplayName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberSignature Language="VB.NET" Value="Public Property DisplayName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DisplayName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DisplayName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.DisplayName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerDisplayName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает псевдоним, обозначающий службу для пользователя.</summary>
        <value>Имя, связанное со службой, которое часто используется в интерактивных инструментах.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> Используется, например, в диспетчере управления службами для обеспечения понятное пользователю описательное имя для службы. <xref:System.ServiceProcess.ServiceInstaller.DisplayName%2A> Значение реестра, но никогда не используется в качестве ключа реестра. Таким образом, ограничения на <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> значение свойства не применяются. <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> используется в раздел реестра HKEY_LOCAL_MACHINES\System\CurrentControlSet\Services, поэтому он ограничен.  
  
 Отображаемое имя никогда не используется программой установки для идентификации службы, поэтому существуют ограничения на выбор имени, как для <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> свойство.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.Description" />
      </Docs>
    </Member>
    <Member MemberName="Install">
      <MemberSignature Language="C#" Value="public override void Install (System.Collections.IDictionary stateSaver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Install(class System.Collections.IDictionary stateSaver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Install (stateSaver As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Install(System::Collections::IDictionary ^ stateSaver);" />
      <MemberSignature Language="F#" Value="override this.Install : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Install stateSaver" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stateSaver" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="stateSaver">Объект <see cref="T:System.Collections.IDictionary" />, содержащий контекстные данные, связанные с процессом установки.</param>
        <summary>Устанавливает службу, записывая в реестр сведения о служебном приложении. Этот метод предназначен для использования инструментами установки, которые автоматически обрабатывают соответствующие методы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, не будет вызывать методы в <xref:System.ServiceProcess.ServiceInstaller> коде; они обычно вызываются только программой установки. Программа установки автоматически вызывает <xref:System.ServiceProcess.ServiceInstaller.Install%2A> метод во время установки. При необходимости он обрабатывает сбои, путем вызова <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> в объекте, который создал событие.  
  
 Приложения сохранения сведений автоматически о компонентах, которые были уже установлены, с помощью установщика проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Сведения о состоянии, переданные <xref:System.ServiceProcess.ServiceInstaller.Install%2A> как `stateSaver` параметра, постоянно обновляется как <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляра и каждого <xref:System.ServiceProcess.ServiceInstaller> экземпляр устанавливается с помощью программы. Обычно нет необходимости явно изменять сведения о состоянии в коде.  
  
 <xref:System.ServiceProcess.ServiceProcessInstaller> Связанные с вашего проекта установки класса устанавливает общие сведения для всех <xref:System.ServiceProcess.ServiceInstaller> экземпляров в проекте. Если эта служба имеет об отличиях от других служб в проекте, эти сведения для конкретной службы устанавливается с помощью данного метода.  
  
 Чтобы установить службу, создайте класс установщика проекта, который наследует от <xref:System.Configuration.Install.Installer> и укажите <xref:System.ComponentModel.RunInstallerAttribute> атрибут класса для `true`. В проекте, создайте один <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляра для каждого приложения службы и один <xref:System.ServiceProcess.ServiceInstaller> экземпляра для каждой службы в приложении. В конструкторе класса установщика проекта, задайте свойства установки для службы с помощью <xref:System.ServiceProcess.ServiceProcessInstaller> и <xref:System.ServiceProcess.ServiceInstaller> экземпляров и добавьте экземпляры <xref:System.Configuration.Install.Installer.Installers%2A> коллекции.  
  
> [!NOTE]
>  Рекомендуется использовать конструктор для добавления экземпляров установщика; Тем не менее если вам нужно добавить к <xref:System.Configuration.Install.Installer.Installers%2A> коллекции в <xref:System.ServiceProcess.ServiceInstaller.Install%2A> метод, не забудьте выполнить же дополнения к коллекции в <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> метод.  
  
 Для всех классов, производных от <xref:System.Configuration.Install.Installer> класса, состояние <xref:System.Configuration.Install.Installer.Installers%2A> коллекции должны быть одинаковыми в <xref:System.ServiceProcess.ServiceInstaller.Install%2A> и <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> методы. Тем не менее, можно избежать обслуживания коллекции между <xref:System.ServiceProcess.ServiceInstaller.Install%2A> и <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> методы при добавлении экземпляров установщика <xref:System.Configuration.Install.Installer.Installers%2A> коллекции в конструкторе класса пользовательского установщика.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Средства установки не содержат <see cref="T:System.ServiceProcess.ServiceProcessInstaller" /> для исполняемого файла.  
  
-или- 
Имя файла сборки — <see langword="null" /> или пустая строка.  
  
-или- 
Недопустимое имя службы.  
  
-или- 
Не удалось открыть диспетчер служб.</exception>
        <exception cref="T:System.ArgumentException">Отображаемое имя службы содержит более 255 символов.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Системе не удалось создать дескриптор для службы.  
  
-или- 
Служба с этим именем уже установлена.</exception>
        <altmember cref="T:System.ServiceProcess.ServiceProcessInstaller" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
        <altmember cref="T:System.Diagnostics.EventLogInstaller" />
        <altmember cref="M:System.Diagnostics.EventLogInstaller.#ctor" />
      </Docs>
    </Member>
    <Member MemberName="IsEquivalentInstaller">
      <MemberSignature Language="C#" Value="public override bool IsEquivalentInstaller (System.Configuration.Install.ComponentInstaller otherInstaller);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool IsEquivalentInstaller(class System.Configuration.Install.ComponentInstaller otherInstaller) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller(System.Configuration.Install.ComponentInstaller)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function IsEquivalentInstaller (otherInstaller As ComponentInstaller) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool IsEquivalentInstaller(System::Configuration::Install::ComponentInstaller ^ otherInstaller);" />
      <MemberSignature Language="F#" Value="override this.IsEquivalentInstaller : System.Configuration.Install.ComponentInstaller -&gt; bool" Usage="serviceInstaller.IsEquivalentInstaller otherInstaller" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherInstaller" Type="System.Configuration.Install.ComponentInstaller" />
      </Parameters>
      <Docs>
        <param name="otherInstaller">Объект <see cref="T:System.Configuration.Install.ComponentInstaller" />, с которым сравнивается текущий установщик.</param>
        <summary>Определяет, будут ли два установщика устанавливать одну и ту же службу.</summary>
        <returns><see langword="true" />, если вызов метода <see cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" /> для обоих установщиков будет приводить к установке одной и той же службы; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceProcess.ServiceInstaller.IsEquivalentInstaller%2A> Указывает, к примеру, будет ли два установщика устанавливать той же службе, одну и ту же учетную запись пользователя.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.CopyFromComponent(System.ComponentModel.IComponent)" />
        <altmember cref="T:System.Configuration.Install.ComponentInstaller" />
      </Docs>
    </Member>
    <Member MemberName="Rollback">
      <MemberSignature Language="C#" Value="public override void Rollback (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Rollback(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Rollback(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Rollback (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Rollback(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Rollback : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Rollback savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Объект <see cref="T:System.Collections.IDictionary" />, содержащий контекстные данные, связанные с процессом установки.</param>
        <summary>Отменяет сведения о служебном приложении, записанные в реестр процедурой установки. Этот метод предназначен для использования инструментами установки, которые автоматически обрабатывают соответствующие методы.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, не будет вызывать методы в <xref:System.ServiceProcess.ServiceInstaller> коде; они обычно вызываются только программой установки. Программа установки автоматически вызывает <xref:System.ServiceProcess.ServiceInstaller.Install%2A> метод во время установки. При необходимости он обрабатывает сбои, путем вызова <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> в объекте, который создал событие.  
  
 Программа установки приложения автоматического сохранения сведений об уже установленных компонентах, с помощью установщика проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Сведения о состоянии, переданные <xref:System.ServiceProcess.ServiceInstaller.Rollback%2A> как `savedState` параметра, постоянно обновляется как <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляра и каждого <xref:System.ServiceProcess.ServiceInstaller> экземпляр устанавливается с помощью программы. Обычно нет необходимости явно изменять сведения о состоянии в коде.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.ServiceProcess.ServiceProcessInstaller.Rollback(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
        <altmember cref="M:System.Configuration.Install.Installer.Commit(System.Collections.IDictionary)" />
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      </Docs>
    </Member>
    <Member MemberName="ServiceName">
      <MemberSignature Language="C#" Value="public string ServiceName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ServiceName" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberSignature Language="VB.NET" Value="Public Property ServiceName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ServiceName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServiceName : string with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServiceName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServiceName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.TypeConverter("System.Diagnostics.Design.StringValueConverter, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает имя, использованное системой для идентификации этой службы. Это свойство должно совпадать со свойством <see cref="P:System.ServiceProcess.ServiceBase.ServiceName" /> устанавливаемой службы.</summary>
        <value>Имя устанавливаемой службы. Это значение должно быть задано до установки службы.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Очень важно, <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> должно совпадать с <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> класса, производного от <xref:System.ServiceProcess.ServiceBase>. Как правило, значение <xref:System.ServiceProcess.ServiceBase.ServiceName%2A?displayProperty=nameWithType> для службы задано в функции Main() исполняемого файла приложения-службы. Диспетчер управления службами использует <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A?displayProperty=nameWithType> свойства для поиска службы в исполняемой программе.  
  
 При задании <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> установщика службы <xref:System.Diagnostics.EventLog.Source%2A> журнала событий, связанных присваивается то же значение. Это позволяет службе автоматически записывать вызовы команд (например, Start и Stop) службы в журнал приложений на компьютере.  
  
> [!NOTE]
>  Если источник с таким именем уже существует на компьютере, но в журнале, отличный от журнала приложения, будет вызвано исключение. Если источник существует и связана с журналом приложений, он используется для записи команды обращений в службу, и исключение не создается.  
  
 <xref:System.ServiceProcess.ServiceInstaller.ServiceName%2A> Не может быть `null` или имеет нулевую длину. Максимальный размер составляет 256 символов. Он также не может содержать косыми чертами вперед или назад, «/» или "\\", или со значением менее десятичное значение 32 кодировку символов ASCII.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Недопустимое свойство <see cref="P:System.ServiceProcess.ServiceInstaller.ServiceName" />.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceBase.ServiceName" />
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.DisplayName" />
      </Docs>
    </Member>
    <Member MemberName="ServicesDependedOn">
      <MemberSignature Language="C#" Value="public string[] ServicesDependedOn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ServicesDependedOn" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberSignature Language="VB.NET" Value="Public Property ServicesDependedOn As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ ServicesDependedOn { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ServicesDependedOn : string[] with get, set" Usage="System.ServiceProcess.ServiceInstaller.ServicesDependedOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerServicesDependedOn")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет службы, необходимые для запуска данной службы.</summary>
        <value>Массив служб, которые должны быть запущены до запуска службы, связанной с данным установщиком.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Служба может потребовать другие службы, прежде чем его можно запустить. Сведения из этого свойства записываются на ключ в реестре. Когда пользователь (или системы, при автоматическом запуске) пытается запустить службу, диспетчер управления службами (SCM) проверяет, что каждой из служб в массиве уже запущен.  
  
 Если любой службы в массиве не запущена, диспетчер управления Службами пытается запустить ее. Это относится к службам `Manual` <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>.  
  
 Если любая служба, от которой зависит данная служба не запускается, эта служба не запустится. Исключение не создано, если система не запущена, так как отсутствует обработчик исключений на уровне системы для обнаружения этого. Выберите способ обработки ошибок при запуске службы и реализовать в коде. Как правило если служба не запускается, для пользователя при запуске откроется диалоговое окно.  
  
 Если служба не запускается, запись записывается в журнал событий приложений.  
  
 Службы, от которых зависит данная служба не обязательно должны находиться в одном исполняемом объекте.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.ServiceProcess.ServiceInstaller.StartType" />
      </Docs>
    </Member>
    <Member MemberName="StartType">
      <MemberSignature Language="C#" Value="public System.ServiceProcess.ServiceStartMode StartType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.ServiceProcess.ServiceStartMode StartType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberSignature Language="VB.NET" Value="Public Property StartType As ServiceStartMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ServiceProcess::ServiceStartMode StartType { System::ServiceProcess::ServiceStartMode get(); void set(System::ServiceProcess::ServiceStartMode value); };" />
      <MemberSignature Language="F#" Value="member this.StartType : System.ServiceProcess.ServiceStartMode with get, set" Usage="System.ServiceProcess.ServiceInstaller.StartType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ServiceProcess.ServiceProcessDescription("ServiceInstallerStartType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ServiceProcess.ServiceStartMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Указывает, как и когда запускается эта служба.</summary>
        <value>Объект <see cref="T:System.ServiceProcess.ServiceStartMode" />, представляющий способ запуска службы. По умолчанию используется значение <see langword="Manual" />, указывающее, что служба не будет запускаться автоматически после перезагрузки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Задайте <xref:System.ServiceProcess.ServiceInstaller.StartType%2A> для указания, что служба запускаться автоматически после перезагрузки или что пользователю необходимо вручную запустить службу. Службу можно также отключить, указав, что она не может быть запущена, вручную или программным образом, пока не будет включена.  
  
 Невозможно изменить <xref:System.ServiceProcess.ServiceInstaller> значения свойств после установки. Чтобы изменить <xref:System.ServiceProcess.ServiceInstaller.StartType%2A>, необходимо удалить и переустановить службу или вручную изменить параметр, с помощью диспетчера управления службами.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Режим запуска не является значением перечисления <see cref="T:System.ServiceProcess.ServiceStartMode" />.</exception>
        <altmember cref="P:System.ServiceProcess.ServiceProcessInstaller.Account" />
      </Docs>
    </Member>
    <Member MemberName="Uninstall">
      <MemberSignature Language="C#" Value="public override void Uninstall (System.Collections.IDictionary savedState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Uninstall(class System.Collections.IDictionary savedState) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceProcess.ServiceInstaller.Uninstall(System.Collections.IDictionary)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Uninstall (savedState As IDictionary)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Uninstall(System::Collections::IDictionary ^ savedState);" />
      <MemberSignature Language="F#" Value="override this.Uninstall : System.Collections.IDictionary -&gt; unit" Usage="serviceInstaller.Uninstall savedState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceProcess</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="savedState" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="savedState">Объект <see cref="T:System.Collections.IDictionary" />, содержащий контекстные данные, связанные с процессом установки.</param>
        <summary>Удаляет службу, удаляя сведения о ней из реестра.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uninstall пытается остановить службу перед ее удалением. Если служба не может быть остановлена, то исключение перехватывается и метод переходит к удалению службы.  
  
 Как правило, не будет вызывать методы в <xref:System.ServiceProcess.ServiceInstaller> коде; они обычно вызываются только программой установки. InstallUtil используется для удаления служб, а также установить их; При удалении принимает параметр в командной строке.  
  
 Приложения удалите процедуру автоматического сохранения сведений об компоненты удаляемой, с помощью установщика проекта <xref:System.Configuration.Install.Installer.Context%2A?displayProperty=nameWithType>. Сведения о состоянии, переданные <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> как `savedState` параметра, постоянно обновляется как <xref:System.ServiceProcess.ServiceProcessInstaller> экземпляра и каждого <xref:System.ServiceProcess.ServiceInstaller> экземпляр устанавливается с помощью программы. Обычно нет необходимости явно изменять сведения о состоянии в коде.  
  
 Для всех классов, производных от <xref:System.Configuration.Install.Installer> класса, состояние <xref:System.Configuration.Install.Installer.Installers%2A> коллекции должны быть одинаковыми в <xref:System.ServiceProcess.ServiceInstaller.Install%2A> и <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> методы. Тем не менее, можно избежать обслуживания коллекции между <xref:System.ServiceProcess.ServiceInstaller.Install%2A> и <xref:System.ServiceProcess.ServiceInstaller.Uninstall%2A> методы при добавлении экземпляров установщика <xref:System.Configuration.Install.Installer.Installers%2A> коллекции в конструкторе класса пользовательского установщика.  
  
 Отсутствует механизм отката для удаления, поэтому не удается удалить одну службу, это не влияет на другие службы (обычно в рамках одного проекта установки) выполняется удаление.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Win32Exception">Не удалось открыть диспетчер служб.  
  
-или- 
Системе не удалось получить дескриптор для службы.</exception>
        <altmember cref="M:System.ServiceProcess.ServiceInstaller.Install(System.Collections.IDictionary)" />
      </Docs>
    </Member>
  </Members>
</Type>