<Type Name="ParallelLoopState" FullName="System.Threading.Tasks.ParallelLoopState">
  <Metadata><Meta Name="ms.openlocfilehash" Value="af16a98f705e63e2ba868d464648af2e365bcb9a" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48619334" /></Metadata><TypeSignature Language="C#" Value="public class ParallelLoopState" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ParallelLoopState extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.ParallelLoopState" />
  <TypeSignature Language="VB.NET" Value="Public Class ParallelLoopState" />
  <TypeSignature Language="C++ CLI" Value="public ref class ParallelLoopState" />
  <TypeSignature Language="F#" Value="type ParallelLoopState = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.3.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Diagnostics.DebuggerDisplay("ShouldExitCurrentIteration = {ShouldExitCurrentIteration}")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Позволяет итерациям параллельных циклов взаимодействовать с другими итерациями. Экземпляр этого класса предоставляется каждому циклу классом <see cref="T:System.Threading.Tasks.Parallel" />; невозможно создавать экземпляры в коде.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обратите внимание на то, что не удается создать экземпляр экземпляра этого класса. Он автоматически создается компилятором как аргумент в вызове <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> или <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> метод. Иллюстрация приведена в примере.  
  
 Таких конструкций, как `for` и `foreach` (в C#) и `For` и `For Each` (в Visual Basic) выполняться последовательно от наименьшего индекса и заканчивая самым верхним или из первого объекта в наборе до последнего. Напротив <xref:System.Threading.Tasks.Parallel.For%2A?displayProperty=nameWithType> и <xref:System.Threading.Tasks.Parallel.ForEach%2A?displayProperty=nameWithType> методы — нет. Так как отдельные итерации цикла выполняются в параллельном режиме, они могут начинаются и заканчиваются в любом порядке. <xref:System.Threading.Tasks.ParallelLoopState> Класс позволяет отдельным итерациям параллельных циклов взаимодействовать друг с другом. <xref:System.Threading.Tasks.ParallelLoopState> Класс позволяет:  
  
-   Выйдите из текущей итерации и предотвратить все большем числе итераций запуститься, вызвав <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод. Это не влияет на итерации, уже начали выполнение.  
  
-   Запретить выполнение путем вызова любой итерации с индексом большим, чем текущий индекс <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод. Это не влияет на итерации, уже начали выполнение.  
  
-   Определить, возникло ли исключение в какой-либо итерации цикла, получая значение <xref:System.Threading.Tasks.ParallelLoopState.IsExceptional%2A> свойства.  
  
-   Определить, вызван ли какая-либо итерация цикла <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода, получая значение <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойства. Это свойство можно использовать для возврата из итераций цикла, который запущен перед вызовом <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод, но по-прежнему выполняются.  
  
-   Определить, вызван ли какая-либо итерация цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> или <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода или генерации исключения, получая значение <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойства.  
  
-   Выход из итерации выполняющейся длительное время, индекс которого больше, чем индекс итерации, в котором был вызван Break, получая значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства.  
  
   
  
## Examples  
 В следующем примере выполняется до 100 итераций цикла в параллельном режиме. Каждая итерация приостанавливает случайный промежуток времени от 1 до 1000 миллисекунд. Случайно сгенерированное значение определяет, на какие итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод. Как видно в результатах показано в примере, нет итераций, индекс которого больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> начальное значение свойства после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Поскольку итерации цикла, скорее всего, будет исполняться при <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод, вызовы функций каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод. Если свойство имеет значение `true`, итерации проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если это больше, чем значение индекса текущей итерации, возвращается немедленно.  
  
 ]]></format>
    </remarks>
    <threadsafe>Объект <see cref="T:System.Threading.Tasks.ParallelLoopState" /> экземпляр предназначен для использования только в теле цикла, к которому был предоставлен экземпляр.  Не является безопасным для использования в предоставленный <see cref="T:System.Threading.Tasks.ParallelLoopState" /> экземпляр после связанного цикла заканчивается, и безопасно явно передавать его другим потокам и предоставлять этим потокам доступ к нему в любое время.  Другой <see cref="T:System.Threading.Tasks.ParallelLoopState" /> экземпляр будет предоставляться для каждого потока, участвующих в цикле.</threadsafe>
    <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
  </Docs>
  <Members>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public void Break ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Break() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Break" />
      <MemberSignature Language="VB.NET" Value="Public Sub Break ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Break();" />
      <MemberSignature Language="F#" Value="member this.Break : unit -&gt; unit" Usage="parallelLoopState.Break " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сообщает, что цикл <see cref="T:System.Threading.Tasks.Parallel" /> должен прекратить выполнение итераций после текущей в первый удобный для системы момент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> Указывает, что должно выполняться нет итераций после текущей итерации. Фактически он отменяет любые дополнительные итерации цикла. Тем не менее любой итерации, уже начали выполнение не останавливается. Например если <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается из 100-й итерации параллельного цикла итерации от 0 до 1 000, всех итераций меньше 100 должны по-прежнему выполняться, но итераций от 101 до 1000, который еще не запущен не выполняться.  
  
 Для длительных итераций, которые уже могут выполняться <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> задает <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> индекс текущей итерации, если текущий индекс меньше, чем текущее значение свойства <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A>. Чтобы остановить, индекс которого больше, чем самую нижнюю итерацию break из конкурирующих выполнения итераций, поступайте следующим:  
  
1.  Проверьте ли <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство `true`.  
  
2.  Выход из итерации в случае его индекс больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение свойства.  
  
 Иллюстрация приведена в примере.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> обычно используются в алгоритмах на основе поиска, где порядок присутствует в источнике данных.  
  
   
  
## Examples  
 В следующем примере выполняется до 100 итераций цикла в параллельном режиме. Каждая итерация приостанавливает случайный промежуток времени от 1 до 1000 миллисекунд. Случайно сгенерированное значение определяет, на какие итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод. Как видно в результатах показано в примере, нет итераций, индекс которого больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> начальное значение свойства после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Поскольку итерации цикла, скорее всего, будет исполняться при <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод, вызовы функций каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод. Если свойство имеет значение `true`, итерации проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если это больше, чем значение индекса текущей итерации, возвращается немедленно.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Был ранее вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> и <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> не могут использоваться в сочетании итерациями одного и того же цикла.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="IsExceptional">
      <MemberSignature Language="C#" Value="public bool IsExceptional { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExceptional" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExceptional As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExceptional { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExceptional : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsExceptional" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, возникло ли в какой-либо итерации цикла исключение, не обработанное данной итерацией.</summary>
        <value>Значение <see langword="true" />, если было вызвано необработанное исключение; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="IsStopped">
      <MemberSignature Language="C#" Value="public bool IsStopped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsStopped" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsStopped As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsStopped { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsStopped : bool" Usage="System.Threading.Tasks.ParallelLoopState.IsStopped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, вызывала ли какая-либо итерация цикла метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />.</summary>
        <value>Значение <see langword="true" />, если какая-либо итерация остановила цикл, вызвав метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для длительных итераций цикла, можно получить значение <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойства, чтобы определить видимость все итерации цикла, начала выполнения перед вызовом <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод по-прежнему выполняются. Затем можно использовать значение <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойства, чтобы определить ли они должны немедленно вернет управление или выполнение в обычном режиме.  
  
   
  
## Examples  
 В следующем примере выполняется до 10 000 итераций цикла в параллельном режиме. Каждая итерация приостанавливает случайный промежуток времени от 1 до 1000 миллисекунд. Случайно сгенерированное значение определяет, на какие итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызывается метод. Поскольку итерации цикла, скорее всего, будет исполняться при <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызове метода, лямбда-выражение вызывает <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> метод для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод. Если он возвращает `true`, итерации возвращается немедленно.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="LowestBreakIteration">
      <MemberSignature Language="C#" Value="public Nullable&lt;long&gt; LowestBreakIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int64&gt; LowestBreakIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LowestBreakIteration As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Nullable&lt;long&gt; LowestBreakIteration { Nullable&lt;long&gt; get(); };" />
      <MemberSignature Language="F#" Value="member this.LowestBreakIteration : Nullable&lt;int64&gt;" Usage="System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает первую итерацию цикла, из которой был вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />.</summary>
        <value>Получает первую итерацию, из которой был вызван метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" />. В случае цикла <see cref="M:System.Threading.Tasks.Parallel.ForEach``1(System.Collections.Concurrent.Partitioner{``0},System.Action{``0})" /> значение основано на внутренне создаваемом индексе.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Возможно несколько итераций параллельного цикла для вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод. Если это так, это значение равно наименьшего индекса итерации, который вызвал <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>. При вызове не итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A>, это свойство возвращает `null`. Обратите внимание, что значение свойства не затрагивает вызовы <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод.  
  
 В режиме итераций длительных всех итераций после итерации, которое вызывает <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> нет необходимости использовать метод, <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойство используется для завершения итерации, начала выполнения перед вызовом <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод. Чтобы остановить, индекс которого больше, чем самую нижнюю итерацию break из конкурирующих выполнения итераций, поступайте следующим:  
  
1.  Проверьте ли <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство `true`.  
  
2.  Выход из итерации в случае его индекс больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение свойства.  
  
 Иллюстрация приведена в примере.  
  
   
  
## Examples  
 В следующем примере выполняется до 100 итераций цикла в параллельном режиме. Каждая итерация приостанавливает случайный промежуток времени от 1 до 1000 миллисекунд. Случайно сгенерированное значение определяет, на какие итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод. Это предотвращает итераций, индекс которого больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение свойства запуститься после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод, но он не влияет на все итерации, уже начали выполнение. Чтобы предотвратить их выполнение, вызывает каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> метод для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод. Если таким образом, итерации проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если это больше, чем значение индекса текущей итерации, возвращается немедленно.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 Обратите внимание, что, поскольку <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение находится вне области за пределами параллельного цикла, его значение необходимо присваивать переменной, видимый за пределами цикла, если вы хотите сохранить ее значение.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="ShouldExitCurrentIteration">
      <MemberSignature Language="C#" Value="public bool ShouldExitCurrentIteration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldExitCurrentIteration" />
      <MemberSignature Language="DocId" Value="P:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ShouldExitCurrentIteration As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShouldExitCurrentIteration { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ShouldExitCurrentIteration : bool" Usage="System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, следует ли текущей итерации цикла завершить работу на основе запросов от этой или других итераций.</summary>
        <value>Значение <see langword="true" />, если текущая итерация должна завершать работу; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> Свойству `true` выполняется любое из следующих условий:  
  
-   Итерации цикла вызовов <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> или <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A>.  
  
-   Итерация цикла создает исключение.  
  
-   Цикл отменяется.  
  
 Если этому свойству присвоено `true`, <xref:System.Threading.Tasks.Parallel> класс заранее пытается запретить запуск дополнительных итераций цикла. Однако возможны ситуации, где он не сможет предотвратить дополнительных итераций запуститься.  
  
 Также может оказаться так, что уже началось выполнение продолжительной итерации. В таких случаях может явно проверять итераций <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> свойство и прекращение выполнения, если свойство возвращает `true`.  
  
   
  
## Examples  
 В следующем примере выполняется до 100 итераций цикла в параллельном режиме. Каждая итерация приостанавливает случайный промежуток времени от 1 до 1000 миллисекунд. Случайно сгенерированное значение определяет, на какие итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> вызывается метод. Это предотвращает итераций, индекс которого больше, чем <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> значение свойства запуститься после вызова <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод, но он не влияет на все итерации, уже начали выполнение. Чтобы предотвратить их выполнение, вызывает каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.ShouldExitCurrentIteration%2A> метод для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Break%2A> метод. Если таким образом, итерации проверяет значение <xref:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration%2A> свойства и, если это больше, чем значение индекса текущей итерации, возвращается немедленно.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/break1.cs#2)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/break1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.LowestBreakIteration" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Break" />
        <altmember cref="M:System.Threading.Tasks.ParallelLoopState.Stop" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.ParallelLoopState.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="parallelLoopState.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Parallel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.3.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Сообщает, что цикл <see cref="T:System.Threading.Tasks.Parallel" /> должен прекратить выполнение в первый удобный для системы момент.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вызов <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод указывает, все итерации цикла, которые еще не начали запускается не требуется. Фактически он отменяет любые дополнительные итерации цикла. Тем не менее любой итерации, уже начали выполнение не останавливается.  
  
 Вызов <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метода заставляет <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> возвращаемое свойство `true` для какой-либо итерации цикла, который все еще выполняется. Это особенно полезно для длительного итераций, которые можно проверить <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> свойство и выход ранних в том случае, если его значение равно `true`.  
  
 <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> обычно используются в алгоритмах на основе поиска, где после результат итерации найден, то все остальные должны выполняться.  
  
   
  
## Examples  
 В следующем примере выполняется до 10 000 итераций цикла в параллельном режиме. Каждая итерация приостанавливает случайный промежуток времени от 1 до 1000 миллисекунд. Случайно сгенерированное значение определяет, на какие итерации цикла <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызывается метод. Как видно из примера, не итерации выполняются после вызова <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод.  
  
 [!code-csharp[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/cs/stop1.cs#1)]
 [!code-vb[System.Threading.Tasks.ParallelLoopState#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.threading.tasks.parallelloopstate/vb/stop1.vb#1)]  
  
 Поскольку итерации цикла, скорее всего, будет исполняться при <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> вызывается метод, вызовы функций каждой итерации <xref:System.Threading.Tasks.ParallelLoopState.IsStopped%2A> метод для проверки, вызвал ли другую итерацию <xref:System.Threading.Tasks.ParallelLoopState.Stop%2A> метод. Если он возвращает `true`, итерации возвращается немедленно.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Метод <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> был вызван ранее. <see cref="M:System.Threading.Tasks.ParallelLoopState.Break" /> и <see cref="M:System.Threading.Tasks.ParallelLoopState.Stop" /> не могут использоваться в сочетании итерациями одного и того же цикла.</exception>
        <altmember cref="P:System.Threading.Tasks.ParallelLoopState.IsStopped" />
        <related type="Article" href="~/docs/standard/parallel-programming/data-parallelism-task-parallel-library.md">Параллелизм данных (библиотека параллельных задач)</related>
      </Docs>
    </Member>
  </Members>
</Type>