<Type Name="ProviderConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ProviderConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b186bce22b03fda14da233681ff3d7453e893c88" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53390239" /></Metadata><TypeSignature Language="C#" Value="public class ProviderConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ProviderConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ProviderConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ProviderConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ProviderConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Определяет объект точки подключения, позволяющий серверному элементу управления действовать в качестве поставщика, чтобы сформировать подключение к потребителю.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В каждое соединение веб-частей между двумя серверными элементами управления, каждый элемент управления должен иметь (помимо прочих требований) связанный объект точки подключения, включает его для подключения к другому элементу управления, а также для предоставления или получения данных, в зависимости от того, следует ли элемент управления используется в качестве поставщика или потребителя соединения. Объект <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> объект содержит сведения о том, как элемент управления может подключаться к другому элементу управления и тип данных, он может публиковать. Для элемента управления, играющий роль поставщика в подключении, его точка соединения должна быть <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта. Дополнительные сведения о подключениях веб-частей и точки подключения см. в разделах, перечисленных в разделе также см. в разделе ниже.  
  
 Для создания <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта, требуются несколько шагов:  
  
1.  Создайте интерфейс. Когда данные поставщика общих ресурсов с потребителем, это достигается путем получения экземпляра интерфейса и возвращая этот экземпляр с потребителем.  
  
2.  Реализуйте интерфейс в поставщике. Объект <xref:System.Web.UI.WebControls.WebParts.WebPart> или другого серверного элемента управления (любого типа серверного элемента управления в <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> можно использовать зоны), которые будут поставщик должен реализовывать интерфейс, созданный на первом шаге.  
  
3.  Определите метод обратного вызова. Метод в поставщике должно быть идентифицировано как метод обратного вызова для установления соединения. Этот метод возвращает экземпляр реализованного интерфейса потребителю. Подход веб-частей для идентификации метода обратного вызова в поставщике заключается в добавлении `ConnectionProvider` атрибут метаданных (определяется <xref:System.Web.UI.WebControls.WebParts.ConnectionProviderAttribute> класс) методу, который возвращает экземпляр интерфейса. При добавлении атрибута Единственным обязательным параметром является отображаемое имя для точки подключения поставщика. Необязательные параметры можно также добавить, например идентификатор для точки подключения.  
  
 После элемента управления начнет действовать в качестве поставщика, элемент управления может участвовать в соединениях, (при условии, что элемент управления получателя аналогично оборудован). Чтобы создать статическое, декларативный подключение в разметке веб-страницы, разработчики могут использовать `<asp:webpartconnection>` элемент. Если `ConnectionProvider` атрибут в исходном коде поставщика, который определяет метод обратного вызова указывает идентификатор для точки подключения, а затем это значение должны быть назначены `ProviderConnectionPointID` атрибут в `<asp:webpartconnection>` элемент на странице. Одна из причин, что разработчик может указать идентификатор для точки подключения поставщика, существует несколько точек подключения в элементе управления поставщика. Если идентификатор не указан для точки подключения поставщика в элементе управления поставщика, значение не назначаться `ProviderConnectionPointID` атрибут на странице, так как подключение будет создано с использованием значения по умолчанию, полученный из <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> поле.  
  
 Для создания подключения в коде, разработчикам необходимо создать новый <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> путем вызова метода <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> метод и передавая ему идентификатор элемента управления поставщика, а также идентификатор или индекс объекта определенного <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект в элементе управления поставщика. Возвращенный <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> , вместе со ссылкой на элемент управления поставщика, ссылка на объект для элемента управления получателя, а также соответствующий <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> , являются все передаваемые <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод для создания нового <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объекта.  
  
 Несмотря на то, что разработчики могут использовать точки подключения поставщика, как часть установки подключений декларативно или программно, пользователи также могут взаимодействовать с точками подключения поставщика для установления подключений через пользовательский интерфейс (UI). Если разработчики объявляют <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемента управления на веб-странице, он предоставляет пользовательский Интерфейс времени выполнения для создания подключений. Если в качестве отправной точки для установления соединения, нажав кнопку пользователи выбрали элемента управления получателя его команду подключения (они могут выбрать поставщик, нет никакой разницы в установленное подключение), в пользовательском Интерфейсе, они будут видеть элемент управления с раскрывающимся списком с отображаемое имя доступного поставщика подключения точка (или точки, если их несколько). Пользователи должны выбрать точку подключения поставщика, чтобы создать подключение.  
  
 Объект <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект связывает непосредственно с элементом управления определенного поставщика и сохраняет сведения о подключении в свойствах, он наследует от базового <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> класса. Например, в унаследованный <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> свойство, точки подключения поставщика сохраняет тип интерфейса, возвращаемого поставщиком. Если тип интерфейса поставщика и получателя в подключении, как работать с теми же, элементы управления являются совместимыми и могут создавать прямое подключение. Если поставщика и потребителя не может работать с тем же типом интерфейса, они несовместимы и необходимо использовать <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объекта для преобразования точки подключения поставщика <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> значение в тип, который потребитель может работать с. Является другим важным свойством <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> при создании подключений, выберите пункт Свойства, которое предоставляет понятное имя для отображения в пользовательском Интерфейсе, пользователи могут выбрать подключения поставщика. Отображаемое имя — это обязательный параметр при добавлении разработчиками `ConnectionProvider` атрибут в метод обратного вызова в элементе управления поставщика. Унаследованный <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> свойство полезно также, как указано выше, так как он предоставляет уникальный идентификатор для точки подключения поставщика, в случае, если поставщик имеет несколько точек подключения. Поставщик может иметь несколько <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекты, определенные в нем и в этом случае при добавлении разработчиками `ConnectionProvider` атрибут к методу, следует указать значение идентификатора для различения каждой точки подключения. Один другие важные является свойством <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> свойство, которое указывает, что точка подключения поставщика может одновременно подключаться к нескольким потребителям. Это свойство имеет значение `true` по умолчанию для точки подключения поставщика (в то время как по умолчанию используется `false` для точки подключения получателя).  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> Класс добавляет несколько уникальных методов к членам, он наследует от <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> класса. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Метод получает экземпляр интерфейса, который будет возвращать метод обратного вызова для потребителей. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> Метод позволяет получить дополнительные пользовательские интерфейсы, которые являются частью существующего подключения, но не интерфейсы используются для установления соединения.  
  
   
  
## Examples  
 В следующем примере кода показаны простые способы создания подключения декларативно, программно или через пользовательский Интерфейс каждого варианта предоставления доступа, используйте точки подключения поставщика.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения всех элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — пользовательский элемент управления, позволяющий пользователю изменять режим отображения на веб-страницы. Сохраните следующий исходный код в файле ASCX, задав для него имя файла, который назначен `Src` атрибут `Register` директив для этого пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: Изменение режимов отображения на веб-частей страницы](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть в примере кода приведен исходный код для интерфейса и элементов управления. Исходный файл содержит простой интерфейс с именем `IZipCode`. Имеется также <xref:System.Web.UI.WebControls.WebParts.WebPart> класс с именем `ZipCodeWebPart` , реализующий интерфейс и выступает в качестве элемента управления поставщика. Его `ProvideIZipCode` метод является методом обратного вызова, реализующий единственный член этого интерфейса. Метод просто возвращает экземпляр интерфейса. Обратите внимание, что метод помечен атрибутом `ConnectionProvider` атрибут в своих метаданных. Это механизм для идентификации метода как метода обратного вызова для точки подключения поставщика. Другой <xref:System.Web.UI.WebControls.WebParts.WebPart> класс называется `WeatherWebPart`, и он выступает в роли потребителя для соединения. Этот класс содержит метод с именем `GetZipCode` , возвращает экземпляр `IZipCode` интерфейса из элемента управления поставщика. Обратите внимание, что этот метод помечен как метод точки подключения потребителя с `ConnectionConsumer` в метаданных атрибутом. Это механизм идентификации метода точки подключения в элементе управления получателя.  
  
 Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода — это веб-страницы. В верхней, `Register` директивы для регистрации пользовательских элементов управления, которые образуют связь и пользовательский элемент управления, позволяющий пользователю изменять режимы отображения на странице. Само соединение создается декларативно в `<staticconnections>` элемента на странице. Этот пример демонстрирует один из способов создания подключения--Примечание `ProviderConnectionPointID` атрибут в `<asp:webpartconnection>` элемент. Можно также создать соединения программным образом. код для выполнения, который находится в `Button1_Click` метод. В этом случае <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект создается и передается в метод, который создает фактическое подключение. Следует ли создать подключение, декларативно или программно, точки подключения всегда необходимо указать для поставщика и потребителя. `Button2_Click` Метод обращается к <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> объектов для поставщика и потребителя, а также записывает некоторые значения свойств метку в странице.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 После загрузки страницы в браузере, щелкните **сведения о точках подключения** кнопки. Появятся сведения о точках подключения поставщика и потребителя, установленных в декларативной связи. Затем используйте **режим отображения** раскрывающийся элемент управления для переключения страницы в режим подключения. В меню команд **почтовый индекс получателя** <xref:System.Web.UI.WebControls.WebParts.WebPart> управления (представленное стрелкой вниз в строке заголовка), щелкните команду подключения. Автоматически создать подключение, отображается пользовательский Интерфейс, `<asp:connectionszone>` элемента управления, объявленные в странице. Это еще один способ создания подключения (через пользовательский Интерфейс), а также декларативные и программные методы, описанные ранее. Нажмите кнопку **Disconnect** кнопку, чтобы завершить существующие статическое подключение. Нажмите кнопку **создать подключение к поставщику** ссылку. Теперь пользовательский Интерфейс отображает элемент управления раскрывающегося списка, который содержит отображаемое имя точки подключения поставщика. Выберите точку подключения в раскрывающемся списке и нажмите кнопку **Connect** для завершения подключения. Затем щелкните **Disconnect** еще раз. Щелкните **динамическое подключение** кнопку, чтобы создать подключение программными средствами. Используйте **режим отображения** элемента управления, чтобы вернуться в режим просмотра. Нажмите кнопку **сведения о пункте подключения** кнопку, чтобы еще раз указать сведения о объекта точки подключения поставщика.  
  
 В этом примере демонстрируется установления соединения и использование поставщика точки подключения тремя способами: статическое подключение, объявленные в разметке веб-страницы; соединение, созданное на код, который используется <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объект и подключения, созданного пользователем через пользовательский Интерфейс подключения.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
    <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">Страницы ASP.NET веб-частей</related>
    <related type="Article" href="https://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b">Обзор подключений веб-частей</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ProviderConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ProviderConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ProviderConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Метод в элементе управления поставщика, возвращающий экземпляр интерфейса потребителям для установления подключения.</param>
        <param name="interfaceType">Объект <see cref="T:System.Type" /> интерфейса, который поставщик обслуживает для потребителей.</param>
        <param name="controlType">Объект <see cref="T:System.Type" /> элемента управления поставщика, с которым сопоставлена точка подключения поставщика.</param>
        <param name="displayName">Понятное отображаемое имя для точки подключения поставщика, которое видят пользователи в пользовательском интерфейсе подключения.</param>
        <param name="id">Уникальный идентификатор для точки подключения поставщика.</param>
        <param name="allowsMultipleConnections">Логическое значение, указывающее может ли точка подключения поставщика иметь несколько одновременных подключений с потребителями.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> Конструктор для <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> класс просто вызывает базовый конструктор, передавая ему различные параметры и инициализации базового класса.  
  
 Конструктор базового класса проверяет число параметров для точки подключения и может создать несколько исключений. Список возможных исключений см. раздел "исключения".  
  
 Можно вызвать <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.%23ctor%2A> конструктор для создания собственного экземпляра <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> класса. Однако в случаях, когда вы просто установления соединения и не расширения класса, должен вызывать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints%2A> метод для возврата существующего объекта точки подключения поставщика.  
  
   
  
## Examples  
 В следующем примере кода показано, как выполнять наследование <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> класса для создания точки подключения пользовательского поставщика.  
  
 В примере кода состоит из трех частей:  
  
-   Исходный файл, который содержит провайдер <xref:System.Web.UI.WebControls.WebParts.WebPart> управления, объект-получатель <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, а пользовательский <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта.  
  
-   Веб-страницы, содержащей элемент управления в статическом подключении.  
  
-   Объяснение того, как запустить пример кода.  
  
 Первая часть примера кода является источником для поставщика и потребителя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, а пользовательский <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> класс с именем `TableProviderConnectionPoint`. Обратите внимание, что конструктор `TableProviderConnectionPoint` класс вызывает базовый конструктор, передавая ему необходимые параметры, как указано в разделе "Параметры". Также Обратите внимание, что в `TableProviderWebPart` класс, `GetConnectionInterface` метод указывается в качестве метода обратного вызова для подключений и `ConnectionProvider` атрибут объявляет пользовательский `TableProviderConnectionPoint` как параметр. Это демонстрируется создание точки подключения пользовательского поставщика, а затем свяжите ее с элементом управления поставщика. В этом примере предполагается, что исходный код компилируется динамически, так что следует поместить файл исходного кода в подпапку App_Code веб-приложения.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Вторая часть примера кода — веб-страницы, на котором размещены пользовательские элементы управления в статическом подключении веб-частей. В верхней части страницы находится `Register` директива для объявления префикса и пространства имен для пользовательских элементов управления. Соединение объявлено с помощью `<asp:webpartconnection>` управления элемент и поставщика и получателя, объявляются в `<asp:webpartzone>` элемент.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Загрузите страницу в браузере. Подключение между элементами управления уже существует, а потребитель отображает данные от поставщика, так как подключение было объявлено как статическое подключение на странице.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="callbackMethod" /> имеет значение <see langword="null" />.  
  
-или- 
 Свойство <paramref name="interfaceType" /> имеет значение <see langword="null" />.  
  
-или- 
 Свойство <paramref name="controlType" /> имеет значение <see langword="null" />.  
  
-или- 
 Параметр <paramref name="displayName" /> имеет значение <see langword="null" /> или равен пустой строке ("").</exception>
        <exception cref="T:System.ArgumentException">Параметр <paramref name="controlType" /> имеет тип, отличный от типа элемента управления поставщика (или производного от него допустимого класса).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetProviderConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">Страницы ASP.NET веб-частей</related>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetObject : System.Web.UI.Control -&gt; obj&#xA;override this.GetObject : System.Web.UI.Control -&gt; obj" Usage="providerConnectionPoint.GetObject control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления, действующий как поставщик в связи веб-частей.</param>
        <summary>Вызывает метод обратного вызова в элементе управления поставщика, который получает экземпляр интерфейса для возвращения потребителям.</summary>
        <returns>Объект <see cref="T:System.Object" />, являющийся экземпляром интерфейса, который поставщик возвращает потребителям для установления подключения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод возвращает объект из элемента управления поставщика, являющийся экземпляром интерфейса, используемого для установления соединения. Тип объекта будет использоваться реализованного интерфейса. Например, два интерфейса, которые реализуются для подключений веб-частей являются <xref:System.Web.UI.WebControls.WebParts.IWebPartField> и <xref:System.Web.UI.WebControls.WebParts.IWebPartRow>. Когда <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> вызывается метод <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта, если соответствующий поставщик реализует один из этих интерфейсов, возвращаемый объект будет иметь тот же тип.  
  
 <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> Вызывается метод <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объектов, когда подключение активируется. Это важный шаг, который фактически инициирует подключение и начинает процесс, который позволяет двум элементам управления совместно использовать данные.  
  
 Элемента управления получателя в подключении должен быть могут работать с тем же типом интерфейса, как поставщик. Если этого не произошло, элементы управления несовместимы и <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект должен использоваться для установления соединения.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="control" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetSecondaryInterfaces">
      <MemberSignature Language="C#" Value="public virtual System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces (System.Web.UI.Control control);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection GetSecondaryInterfaces(class System.Web.UI.Control control) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ GetSecondaryInterfaces(System::Web::UI::Control ^ control);" />
      <MemberSignature Language="F#" Value="abstract member GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection&#xA;override this.GetSecondaryInterfaces : System.Web.UI.Control -&gt; System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" Usage="providerConnectionPoint.GetSecondaryInterfaces control" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления, действующий как поставщик в связи веб-частей.</param>
        <summary>Получает дополнительную коллекцию дополнительных интерфейсов, которые могут поддерживаться точкой подключения поставщика.</summary>
        <returns>Объект <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> дополнительных интерфейсов, предоставленных элементом управления, действующим как поставщик.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект точки подключения поставщика всегда имеет интерфейс по умолчанию, который используется для установления соединения с потребителями. Экземпляр интерфейса по умолчанию получается путем вызова <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> метод <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> объекта.  
  
 Тем не менее некоторые элементы управления поставщика будут реализовывать несколько интерфейсов для предоставления клиентам как часть соединения. Эти интерфейсы, которые не используются по умолчанию, которые используются для установления соединения, называются дополнительных интерфейсов. <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces%2A> Метод предоставляет способ для возврата коллекции ссылок на дополнительных интерфейсов, так же, как <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetObject%2A> метод возвращает ссылку на интерфейс по умолчанию.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para><see cref="M:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint.GetSecondaryInterfaces(System.Web.UI.Control)" /> Метод в <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> класс содержит без реализации; он возвращает пустую коллекцию дополнительных интерфейсов. Для реализации этого метода необходимо наследование от <see cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" /> класса и переопределить этот метод, возврат из него ряд дополнительных интерфейсов.</para></block>
      </Docs>
    </Member>
  </Members>
</Type>