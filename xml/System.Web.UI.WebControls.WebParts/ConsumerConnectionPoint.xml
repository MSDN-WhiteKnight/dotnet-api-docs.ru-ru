<Type Name="ConsumerConnectionPoint" FullName="System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint">
  <Metadata><Meta Name="ms.openlocfilehash" Value="90a1296f3cec431b86462bba13a24e323a76a691" /><Meta Name="ms.sourcegitcommit" Value="c5fd6b431a16f0412349201a0e93a9eacddf4b35" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/14/2018" /><Meta Name="ms.locfileid" Value="53391808" /></Metadata><TypeSignature Language="C#" Value="public class ConsumerConnectionPoint : System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi ConsumerConnectionPoint extends System.Web.UI.WebControls.WebParts.ConnectionPoint" />
  <TypeSignature Language="DocId" Value="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />
  <TypeSignature Language="VB.NET" Value="Public Class ConsumerConnectionPoint&#xA;Inherits ConnectionPoint" />
  <TypeSignature Language="C++ CLI" Value="public ref class ConsumerConnectionPoint : System::Web::UI::WebControls::WebParts::ConnectionPoint" />
  <TypeSignature Language="F#" Value="type ConsumerConnectionPoint = class&#xA;    inherit ConnectionPoint" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Web.UI.WebControls.WebParts.ConnectionPoint</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Определяет объект точки подключения, который позволяет серверному элементу управления выполнять роль получателя для установки подключения к поставщику.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 В каждое соединение веб-частей между двумя серверными элементами управления, каждый элемент управления должен иметь (помимо прочих требований) связанный объект точки подключения, включает его для подключения к другому элементу управления, а также для предоставления или получения данных, в зависимости от того, следует ли элемент управления используется в качестве поставщика или потребителя соединения. Объект <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> объект содержит сведения о том, как элемент управления может подключаться к другому элементу управления и тип данных, он может публиковать. Для управления, который выполняет роль получателя в подключении, его точка соединения должна быть <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта. Сведения о подключениях веб-частей и точки подключения см. в разделах, перечисленных в разделе также см. в разделе ниже.  
  
 Для создания <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта, требуются несколько шагов:  
  
1.  Включение управления получателя, для ссылки на экземпляр интерфейса. Объект <xref:System.Web.UI.WebControls.WebParts.WebPart> или другого серверного элемента управления (любого типа серверного элемента управления, который будет добавлен к <xref:System.Web.UI.WebControls.WebParts.WebPartZoneBase> зоны можно использовать) должен иметь возможность получать данные из экземпляра определенного интерфейса. Элемент управления не должны реализовывать интерфейс; только поставщик должен реализовывать его. Потребитель может работать либо с типом интерфейса, предоставляемым поставщиком или, если это не так, <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект используется для преобразования данных из типа интерфейса поставщика для типа, понятные потребителю. Типичный способ включить объект-получатель является объявить частное поле для размещения ссылки на тип требуемого интерфейса.  
  
2.  Определите метод обратного вызова. Метод в объекте-получателе должно быть идентифицировано как метод обратного вызова для установления соединения с поставщиком. Этот метод получает экземпляр интерфейса, что поставщик реализует и назначает его (например) закрытого поля создан на первом шаге. Подход веб-частей для идентификации метода обратного вызова в объекте-получателе заключается в добавлении `ConnectionConsumer` атрибут метаданных (определяется <xref:System.Web.UI.WebControls.WebParts.ConnectionConsumerAttribute> класс) методу, который получает экземпляр интерфейса. При добавлении атрибута Единственным обязательным параметром такое отображаемое имя для точки подключения потребителя. Необязательные параметры можно также добавить, такие как идентификатор.  
  
3.  Процесс и вывода данных из экземпляра интерфейса. Выполнять внутреннюю обработку данных, а затем обычно элемент управления получателя будут отображаться данные на страницу. Обычно это является переопределение элемента управления <xref:System.Web.UI.Control.OnPreRender%2A> метод.  
  
    > [!NOTE]
    >  Во время синхронного запроса объекта-получателя следует запросить данные непосредственно из поставщика во время или сразу после <xref:System.Web.UI.Control.PreRender> событий. Во время асинхронного запроса Если метод обратного вызова поставщика не вызывается в любой момент во время отрисовки, разработчик может предположить, что данные не были переданы объекту-получателю.  
  
 После элемента управления начнет действовать как получатель, элемент управления может участвовать в соединениях, (при условии, что элемент управления поставщика также оборудован). Чтобы создать статическое, декларативный подключение в разметке веб-страницы, разработчики могут использовать `<asp:webpartconnection>` элемент. Если `ConnectionConsumer` атрибут в исходном коде потребителя, который определяет метод обратного вызова указывает идентификатор для точки подключения, а затем это значение должны быть назначены `ConsumerConnectionPointID` атрибут в `<asp:webpartconnection>` элемент на странице. Причина, что разработчик может указать идентификатор для точки подключения получателя, существует несколько точек подключения, определенные в элементе управления получателя. Если идентификатор не указан для точки подключения потребителя в элементе управления получателя, значение не назначаться `ConsumerConnectionPointID` атрибут на странице, так как подключение будет создано с использованием значения по умолчанию, полученный из <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DefaultID> поле.  
  
 Для создания подключения в коде, разработчикам необходимо создать новый <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> путем вызова метода <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> метод и передавая ему идентификатор элемента управления получателя, а также идентификатор или индекс объекта определенного <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта в элементе управления получателя. Возвращенный <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> , вместе со ссылкой элемента управления получателя, ссылка на объект для элемента управления поставщика и соответствующий <xref:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint> , являются все передаваемые <xref:System.Web.UI.WebControls.WebParts.WebPartManager.ConnectWebParts%2A> метод для создания нового <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объекта.  
  
 Несмотря на то, что разработчики могут использовать точки подключения получателя как часть установки подключений декларативно или программно, пользователи также могут взаимодействовать с точки подключения получателя для установки соединения через пользовательский интерфейс (UI). Если разработчики объявляют <xref:System.Web.UI.WebControls.WebParts.ConnectionsZone> элемента управления на веб-странице, он предоставляет пользовательский Интерфейс времени выполнения для создания подключений. Если в качестве отправной точки для установления соединения, нажав кнопку пользователи выбрали управления поставщика его команду подключения (они могут выбрать потребитель, нет никакой разницы в установленное подключение), в пользовательском Интерфейсе, они будут видеть элемент управления с раскрывающимся списком с отображаемые имена доступных потребителем подключение точка (или точек, если их несколько), поставщик может отправлять данные. Пользователи должны выбрать точку подключения получателя для установления соединения.  
  
 Объект <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> связывает непосредственно с элементом управления получателя, определенного объекта и сохраняет сведения о подключении в свойствах, он наследует от базового <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> класса. Например, в унаследованный <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> свойство, точка подключения получателя сохраняет тип интерфейса, он использует. Если поставщика и получателя в подключении как понять, тип интерфейса, элементы управления являются совместимыми и могут создавать прямое подключение. Если поставщика и потребителя не может работать с тем же типом интерфейса, они несовместимы и необходимо использовать <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объекта для преобразования точки подключения поставщика <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.InterfaceType%2A> свойство в тип, который потребитель может работать с. Является другим важным свойством <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.DisplayName%2A> при создании подключений, выберите пункт Свойства, которое предоставляет понятное имя для отображения в пользовательском Интерфейсе, пользователи могут выбрать подключения получателя. Отображаемое имя — это обязательный параметр при добавлении разработчиками `ConnectionConsumer` атрибут в метод обратного вызова в элементе управления получателя. Унаследованный <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.ID%2A> свойство полезно также, как указано выше, так как он предоставляет уникальный идентификатор для точки подключения получателя в случае, если объект-получатель имеет несколько точек подключения. Объект-получатель может иметь несколько <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекты, определенные в нем и в этом случае при добавлении разработчиками `ConnectionConsumer` атрибут к методу, следует указать значение идентификатора для различения каждой точки подключения. Один другие важные является свойством <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint.AllowsMultipleConnections%2A> свойство, которое указывает, что точка подключения получателя может одновременно подключаться к нескольких поставщиков. Это свойство имеет значение `false` по умолчанию для точки подключения получателя (в то время как по умолчанию используется `true` для точки подключения поставщика).  
  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> Класс добавляет несколько уникальных методов к членам, он наследует от <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> класса. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> Метод вызывает метод обратного вызова потребителя собственные определенные для получения экземпляра интерфейса от поставщика. <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> Метод возвращает логическое значение, указывающее, способен ли точка подключения для установления соединения, на основании текущего состояния элемента управления связанного получателя.  
  
   
  
## Examples  
 В следующем примере кода показаны простые способы создания подключения декларативно, программно или через пользовательский Интерфейс каждого варианта предоставления доступа, используйте точки подключения потребителя.  
  
 Пример состоит из четырех частей.  
  
-   Режим отображения пользовательского элемента управления, позволяющий изменить веб-частей на странице.  
  
-   Исходный код для интерфейса, а также два <xref:System.Web.UI.WebControls.WebParts.WebPart> управляет действующего в качестве поставщика и потребителя для подключения.  
  
-   Веб-страница для размещения всех элементов управления и выполнение примера кода.  
  
-   Объяснение того, как запустить пример страницы.  
  
 Первая часть этого примера кода — пользовательский элемент управления, позволяющий пользователю изменять режим отображения на веб-страницы. Сохраните следующий исходный код в файле ASCX, задав для него имя файла, который назначен `Src` атрибут `Register` директив для этого пользовательского элемента управления, который находится в верхней размещения веб-страницы. Сведения о режимах отображения и описание исходного кода в этом элементе управления, см. в разделе [Пошаговое руководство: Изменение режимов отображения на веб-частей страницы](https://msdn.microsoft.com/library/24e42f74-82dc-4c13-8574-130398985fc0).  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/displaymodemenucs.ascx#6)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#6](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/DisplayModeMenuVB.ascx#6)]  
  
 Вторая часть в примере кода приведен исходный код для интерфейса и элементов управления. Исходный файл содержит простой интерфейс с именем `IZipCode`. Имеется также <xref:System.Web.UI.WebControls.WebParts.WebPart> класс с именем `ZipCodeWebPart` , реализующий интерфейс и выступает в качестве элемента управления поставщика. Другой <xref:System.Web.UI.WebControls.WebParts.WebPart> класс называется `WeatherWebPart`, и он выступает в роли потребителя для соединения. Этот класс содержит метод с именем `GetZipCode` , возвращает экземпляр `IZipCode` интерфейса из элемента управления поставщика. Обратите внимание, что этот метод помечен как метод точки подключения потребителя с `ConnectionConsumer` в метаданных атрибутом. Это механизм идентификации метода точки подключения в элементе управления получателя.  
  
 Для выполнения примера кода необходимо скомпилировать этот исходный код. Можно выполнить явную компиляцию и разместить сборку в папку Bin веб сайта или в глобальном кэше сборок. Кроме того можно поместить исходный код в папку App_Code веб сайта, где он будет компилироваться динамически во время выполнения. Данный пример кода использует динамической компиляции. Пошаговое руководство по компиляции, см. в разделе [Пошаговое руководство: Разработка и использование пользовательского веб-серверного элемента управления](https://msdn.microsoft.com/library/6d90782a-a1a4-45a6-b2d4-cf6362b83b08).  
  
 [!code-csharp[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/ZipCodeComponent.cs#2)]
 [!code-vb[WebParts_ConnectionPoint_Overview#2](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/ZipCodeComponent.vb#2)]  
  
 В третьей части в примере кода — это веб-страницы. В верхней, `Register` директивы для регистрации пользовательских элементов управления, которые образуют связь и пользовательский элемент управления, позволяющий пользователю изменять режимы отображения на странице. Само соединение создается декларативно в `<staticconnections>` элемента на странице. Этот пример демонстрирует один из способов создания подключения--Примечание `ConsumerConnectionPointID` атрибут в `<asp:webpartconnection>` элемент. Можно также создать соединения программным образом. код для выполнения, который находится в `Button1_Click` метод. В этом случае <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объект создается и передается в метод, который создает фактическое подключение. Следует ли создать подключение, декларативно или программно, точки подключения всегда необходимо указать для поставщика и потребителя. `Button2_Click` Метод обращается к <xref:System.Web.UI.WebControls.WebParts.ConnectionPoint> объектов для поставщика и потребителя, а также записывает некоторые значения свойств метку в странице.  
  
 [!code-aspx-csharp[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/csharp/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/CS/connectionPointCS.aspx#1)]
 [!code-aspx-vb[WebParts_ConnectionPoint_Overview#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/WebParts_ConnectionPoint_Overview/VB/connectionPointVB.aspx#1)]  
  
 После загрузки страницы в браузере, щелкните **сведения о точках подключения** кнопки. Появятся сведения о точках подключения поставщика и потребителя, установленных в декларативной связи. Затем используйте **режим отображения** раскрывающийся элемент управления для переключения страницы в режим подключения. В меню команд **ZIP Code Provider** <xref:System.Web.UI.WebControls.WebParts.WebPart> управления (представленное стрелкой вниз в строке заголовка), щелкните команду подключения. Автоматически создать подключение, отображается пользовательский Интерфейс, `<asp:connectionszone>` элемента управления, объявленные в странице. Это еще один способ создания подключения (через пользовательский Интерфейс), а также декларативные и программные методы, описанные ранее. Нажмите кнопку **Disconnect** кнопку, чтобы завершить существующие статическое подключение. Нажмите кнопку **создать соединение с потребителем** ссылку. Теперь пользовательский Интерфейс отображает элемент управления раскрывающегося списка, который перечисляет отображаемого имени точки подключения потребителя. Выберите точку подключения в раскрывающемся списке и нажмите кнопку **Connect** для завершения подключения. Затем щелкните **Disconnect** еще раз. Нажмите кнопку **динамическое подключение** кнопку, чтобы создать подключение программными средствами. Используйте **режим отображения** элемента управления, чтобы вернуться в режим просмотра. Нажмите кнопку **сведения о пункте подключения** кнопку, чтобы указать сведения о объект точки подключения потребителя один раз больше.  
  
 В этом примере демонстрируется создание подключения и с помощью точки подключения тремя способами: статическое подключение, объявленные в разметке веб-страницы; соединение, созданное на код, который используется <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объект и подключения, созданного пользователем через пользовательский Интерфейс подключения.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Web.UI.WebControls.WebParts.WebPartConnection" />
    <altmember cref="T:System.Web.UI.WebControls.WebParts.ProviderConnectionPoint" />
    <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">Страницы ASP.NET веб-частей</related>
    <related type="Article" href="https://msdn.microsoft.com/library/d98cfd0f-ebd6-4871-89d5-abbd2cdef67b">Обзор подключений веб-частей</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConsumerConnectionPoint (System.Reflection.MethodInfo callbackMethod, Type interfaceType, Type controlType, string displayName, string id, bool allowsMultipleConnections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Reflection.MethodInfo callbackMethod, class System.Type interfaceType, class System.Type controlType, string displayName, string id, bool allowsMultipleConnections) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.#ctor(System.Reflection.MethodInfo,System.Type,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (callbackMethod As MethodInfo, interfaceType As Type, controlType As Type, displayName As String, id As String, allowsMultipleConnections As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ConsumerConnectionPoint(System::Reflection::MethodInfo ^ callbackMethod, Type ^ interfaceType, Type ^ controlType, System::String ^ displayName, System::String ^ id, bool allowsMultipleConnections);" />
      <MemberSignature Language="F#" Value="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint : System.Reflection.MethodInfo * Type * Type * string * string * bool -&gt; System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" Usage="new System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint (callbackMethod, interfaceType, controlType, displayName, id, allowsMultipleConnections)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="callbackMethod" Type="System.Reflection.MethodInfo" />
        <Parameter Name="interfaceType" Type="System.Type" />
        <Parameter Name="controlType" Type="System.Type" />
        <Parameter Name="displayName" Type="System.String" />
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="allowsMultipleConnections" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="callbackMethod">Метод в элементе управления получателя, который возвращает экземпляр интерфейса получателям для создания подключения.</param>
        <param name="interfaceType">Тип <see cref="T:System.Type" /> интерфейса, который получатель принимает от поставщика.</param>
        <param name="controlType">Тип <see cref="T:System.Type" /> элемента управления получателя, с которым связана точка подключения получателя.</param>
        <param name="displayName">Понятное отображаемое имя для точки подключения получателя, которая отображается для пользователей в пользовательском интерфейсе подключения.</param>
        <param name="id">Уникальный идентификатор точки подключения получателя.</param>
        <param name="allowsMultipleConnections">Логическое значение, указывающее, может ли точка подключения получателя иметь несколько одновременных подключений с поставщиками.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> Конструктор для <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> класс просто вызывает базовый конструктор, передавая ему различные параметры и инициализации базового класса.  
  
 Конструктор базового класса проверяет число параметров для точки подключения и может создать несколько исключений. Список возможных исключений см. раздел "исключения".  
  
 Можно вызвать <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.%23ctor%2A> конструктор для создания собственного экземпляра <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> класса. Однако в случаях, когда вы просто установления соединения и не расширения класса, должен вызывать <xref:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints%2A> метод вернет объект точки подключения поставщика.  
  
   
  
## Examples  
 В следующем примере кода показано, как выполнять наследование <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> класса для создания точки подключения пользовательского поставщика.  
  
 В примере кода состоит из трех частей:  
  
-   Исходный файл, который содержит провайдер <xref:System.Web.UI.WebControls.WebParts.WebPart> управления, объект-получатель <xref:System.Web.UI.WebControls.WebParts.WebPart> элемента управления, а пользовательский <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объекта.  
  
-   Веб-страницы, содержащей элемент управления в статическом подключении.  
  
-   Объяснение того, как запустить пример кода.  
  
 Первая часть примера кода является источником для поставщика и потребителя <xref:System.Web.UI.WebControls.WebParts.WebPart> элементов управления, а пользовательский <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> класс с именем `TableConsumerConnectionPoint`. Обратите внимание, что конструктор `TableConsumerConnectionPoint` класс вызывает базовый конструктор, передавая ему необходимые параметры, как указано в разделе "Параметры". Также Обратите внимание, что в `TableConsumer` класс, `SetConnectionInterface` метод указывается в качестве метода обратного вызова для подключений и `ConnectionConsumer` атрибут объявляет пользовательский `TableConsumerConnectionPoint` как параметр. Это показано, как создать пользовательскую точку подключения получателя, а затем свяжите ее с элементом управления получателя. В этом примере предполагается, что исходный код компилируется динамически, так что следует поместить файл исходного кода в подпапку App_Code веб-приложения.  
  
 [!code-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#1](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/connectionControls.cs#1)]  
  
 Вторая часть примера кода — веб-страницы, на котором размещена пользовательских элементов управления в статических подключении веб-частей. В верхней части страницы находится `Register` директива для объявления префикса и пространства имен для пользовательских элементов управления. Соединение объявлено с помощью `<asp:webpartconnection>` управления элемент и поставщика и получателя, объявляются в `<asp:webpartzone>` элемент.  
  
 [!code-aspx-csharp[UI.WebControls.WebParts.ProviderConnectionPoint#3](~/samples/snippets/csharp/VS_Snippets_WebNet/UI.WebControls.WebParts.ProviderConnectionPoint/CS/defaultcs.aspx#3)]  
  
 Загрузите страницу в браузере. Подключение между элементами управления уже существует, а потребитель отображает данные от поставщика, так как подключение было объявлено как статическое подключение на странице.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="callbackMethod" /> имеет значение <see langword="null" />.  
  
-или- 
 Свойство <paramref name="interfaceType" /> имеет значение <see langword="null" />.  
  
- или - 
 Свойство <paramref name="controlType" /> имеет значение <see langword="null" />.  
  
-или- 
 Параметр <paramref name="displayName" /> имеет значение <see langword="null" /> или равен пустой строке ("").</exception>
        <exception cref="T:System.ArgumentException">Тип <paramref name="controlType" /> не является тем же типом, что и тип элемента управления получателя (или допустимого производного класса).</exception>
        <altmember cref="M:System.Web.UI.WebControls.WebParts.WebPartManager.GetConsumerConnectionPoints(System.Web.UI.WebControls.WebParts.WebPart)" />
        <related type="Article" href="https://msdn.microsoft.com/library/ab78a66e-9feb-4391-b3c3-8c07555e2308">Страницы ASP.NET веб-частей</related>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (System.Web.UI.Control control, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class System.Web.UI.Control control, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject(System.Web.UI.Control,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SetObject(System::Web::UI::Control ^ control, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetObject : System.Web.UI.Control * obj -&gt; unit&#xA;override this.SetObject : System.Web.UI.Control * obj -&gt; unit" Usage="consumerConnectionPoint.SetObject (control, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления получателя, с которым связана точка подключения получателя.</param>
        <param name="data">Экземпляр интерфейса, возвращенного из элемента управления поставщика.</param>
        <summary>Вызывает метод обратного вызова в элементе управления получателя и получает экземпляр интерфейса из элемента управления поставщика.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод получает экземпляр интерфейса от поставщика, который содержит данные для элемента управления получателя.  
  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SetObject%2A> Вызывается метод <xref:System.Web.UI.WebControls.WebParts.WebPartConnection> объектов, когда подключение активируется. Это важный шаг, который является частью инициализации подключения и включение двух элементов управления для обмена данными.  
  
 Элемента управления получателя в подключении должен быть могут работать с тем же типом интерфейса, как поставщик. Если этого не произошло, элементы управления несовместимы и <xref:System.Web.UI.WebControls.WebParts.WebPartTransformer> объект должен использоваться для установления соединения.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Свойство <paramref name="control" /> имеет значение <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsConnection">
      <MemberSignature Language="C#" Value="public virtual bool SupportsConnection (System.Web.UI.Control control, System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsConnection(class System.Web.UI.Control control, class System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection secondaryInterfaces) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection(System.Web.UI.Control,System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsConnection(System::Web::UI::Control ^ control, System::Web::UI::WebControls::WebParts::ConnectionInterfaceCollection ^ secondaryInterfaces);" />
      <MemberSignature Language="F#" Value="abstract member SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool&#xA;override this.SupportsConnection : System.Web.UI.Control * System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection -&gt; bool" Usage="consumerConnectionPoint.SupportsConnection (control, secondaryInterfaces)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="control" Type="System.Web.UI.Control" />
        <Parameter Name="secondaryInterfaces" Type="System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" />
      </Parameters>
      <Docs>
        <param name="control">Элемент управления получателя, связанный с точкой подключения <see cref="T:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint" />.</param>
        <param name="secondaryInterfaces">Коллекция <see cref="T:System.Web.UI.WebControls.WebParts.ConnectionInterfaceCollection" /> любых дополнительных интерфейсов, участвующих в подключении.</param>
        <summary>Определяет, может ли точка подключения получателя в настоящий момент устанавливать подключение.</summary>
        <returns>Значение <see langword="true" />, если точка подключения в настоящий момент может создавать подключение; в противном случае — <see langword="false" />. Значение по умолчанию — <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> Метод реализация всегда возвращает `true` во всех случаях для <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> класса. Цель для этого метода — это проверить состояние `control` и `secondaryInterfaces` в критических точках, определенных для определения ли <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> объект находится в настоящее время возможность создать подключение.  
  
 Может существовать сценарии где `control` находится в состоянии, это делает невозможным подключение, или где `secondaryInterfaces` должны существовать до подключения. В таких случаях разработчики могут наследовать от <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint> класса и переопределить <xref:System.Web.UI.WebControls.WebParts.ConsumerConnectionPoint.SupportsConnection%2A> метод, предоставляя пользовательскую реализацию, чтобы определить, когда точка подключения будет готов для поддержки соединений.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>