<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata><Meta Name="ms.openlocfilehash" Value="7b148e780cf09e6100de24389ca119039ce3229d" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58713707" /></Metadata><TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecureString = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Представляет текст, который должен оставаться конфиденциальным, например, путем его удаления из памяти компьютера, если он больше не нужен. Этот класс не наследуется.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
>  Мы не рекомендуем использовать `SecureString` класса для разработки новых приложений. Дополнительные сведения см. в разделе [SecureString не должны использоваться](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md) на сайте GitHub.

 <xref:System.Security.SecureString> имеет строковый тип, предоставляющий мер безопасности. Предпринимается попытка не хранились конфиденциальные строк в памяти процесса в виде обычного текста.  (Тем не менее, ограничения, см. в разделе [насколько безопасен SecureString?](#HowSecure) разделе.) Значение экземпляра <xref:System.Security.SecureString> автоматически защищены при помощи механизм, который поддерживается используемой платформой при инициализации экземпляра или изменения значения. Приложение может отображать неизменяемый экземпляр и предотвратить его дальнейшее изменение путем вызова <xref:System.Security.SecureString.MakeReadOnly%2A> метод.  
  
 Максимальная длина <xref:System.Security.SecureString> экземпляра составляет 65 536 символов.  
  
> [!IMPORTANT]
>  Этот тип реализует <xref:System.IDisposable> интерфейс. Когда вы закончите, используя экземпляр типа, следует освободить его прямо или косвенно. Чтобы удалить тип напрямую, вызовите его <xref:System.IDisposable.Dispose%2A> метод в `try` / `catch` блока. Чтобы избавиться от его косвенно, используйте языковой конструкции, такие как `using` (в C#) или `Using` (в Visual Basic). Дополнительные сведения см. в разделе «С помощью объекта, реализует IDisposable» <xref:System.IDisposable> разделу интерфейса.  
  
 <xref:System.Security.SecureString> Класс и его члены не являются видимыми для модели COM Дополнительные сведения см. в разделе <xref:System.Runtime.InteropServices.ComVisibleAttribute>.  
  
 Содержание  
  
 [Строка vs. SecureString](#vsString)   
 [SecureString операций](#Ops)   
 [SecureString и взаимодействия](#interop)   
 [Насколько хорошо защищен SecureString?](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a>Строка или SecureString  
 Экземпляр <xref:System.String?displayProperty=nameWithType> класс является неизменяемым и, если больше не нужен, не запланировано программным способом для сборки мусора; то есть экземпляр доступен только для чтения после его создания, и невозможно предсказать, когда экземпляр будет удаляется из памяти компьютера. Так как <xref:System.String?displayProperty=nameWithType> экземпляры являются неизменяемыми, операции, которые могут изменить существующий экземпляр фактически создать копию его для управления. Следовательно Если <xref:System.String> объект содержит конфиденциальные сведения, например пароль, номер кредитной карты или персональные данные, есть риск, данные могут стать доступными после их использования, поскольку приложение не может удалить данные из памяти компьютера .  
  
 Объект <xref:System.Security.SecureString> объект подобен <xref:System.String> объекта в том, что он имеет значение text. Тем не менее значение <xref:System.Security.SecureString> объекта закреплен в памяти, могут использовать механизм защиты, такие как шифрование, предоставляемые операционной системы, можно изменять, пока приложение помечает его как доступное только для чтения и могут быть удалены из памяти компьютера с приложением, вызывающим метод <xref:System.Security.SecureString.Dispose%2A> метод или сборщиком мусора .NET Framework.  
  
 Описание ограничения <xref:System.Security.SecureString> , представлена в разделе [насколько безопасен SecureString?](#HowSecure) раздел.  
  
 [К началу](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a>SecureString операций  
 <xref:System.Security.SecureString> Класс содержит элементы, которые позволяют выполнять следующее:  
  
 Создать экземпляр <xref:System.Security.SecureString> объекта  
 Вы создаете экземпляры <xref:System.Security.SecureString> объекта, вызывая его конструктор без параметров.  
  
 Добавление символов для <xref:System.Security.SecureString> объекта  
 Можно добавить один символ за раз, чтобы <xref:System.Security.SecureString> , вызвав его <xref:System.Security.SecureString.AppendChar%2A> или <xref:System.Security.SecureString.InsertAt%2A> метод.  
  
> [!IMPORTANT]
>  Объект <xref:System.Security.SecureString> объект никогда не должен быть создан из <xref:System.String>, так как конфиденциальные данные уже регулируется памяти сохраняемости последствия неизменяемый <xref:System.String> класса. Лучший способ создания <xref:System.Security.SecureString> объект является из неуправляемого источника символа во время, такие как <xref:System.Console.ReadKey%2A?displayProperty=nameWithType> метод.  
  
 Удалите символы из <xref:System.Security.SecureString> объекта  
 Вы можете заменить отдельный символ, вызвав <xref:System.Security.SecureString.SetAt%2A> метод, удалить отдельный символ, вызвав <xref:System.Security.SecureString.RemoveAt%2A> метода или удалите все символы из <xref:System.Security.SecureString> экземпляра путем вызова <xref:System.Security.SecureString.Clear%2A> метод.  
  
 Сделать <xref:System.Security.SecureString> объект только для чтения  
 После определения строки, <xref:System.Security.SecureString> представляет объект, вызвать его <xref:System.Security.SecureString.MakeReadOnly%2A> метод, образуя из строки только для чтения.  
  
 Получить сведения <xref:System.Security.SecureString> объекта  
 <xref:System.Security.SecureString> Класс имеет только два члены, которые предоставляют сведения о строке: его <xref:System.Security.SecureString.Length%2A> свойство, которое указывает количество единиц кода в кодировке UTF16 в строку; и <xref:System.Security.SecureString.IsReadOnly%2A>, метод, который указывает, является ли экземпляр только для чтения.  
  
 Освободить память, выделенную для <xref:System.Security.SecureString> экземпляра  
 Так как <xref:System.Security.SecureString> реализует <xref:System.IDisposable> интерфейс, освобождения его памяти путем вызова <xref:System.Security.SecureString.Dispose%2A> метод.  
  
 <xref:System.Security.SecureString> Класс не имеет членов, которые проверяют, сравнения или преобразуйте значение параметра <xref:System.Security.SecureString>. Отсутствие таких членов защищает значение экземпляра от случайного или злонамеренного раскрытия. Используйте соответствующие члены <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> класс, например <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> метода, чтобы управлять значение <xref:System.Security.SecureString> объекта.  
  
 Библиотеки классов .NET Framework, широко используемые <xref:System.Security.SecureString> экземпляров одним из следующих способов:  
  
-   Чтобы предоставить сведения о пароле к процессу с помощью <xref:System.Diagnostics.ProcessStartInfo> структуры или путем вызова перегрузки <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> метод, который имеет параметр типа <xref:System.Security.SecureString>.  
  
-   Для предоставления сведения о пароле сети путем вызова <xref:System.Net.NetworkCredential> конструктора класса, который имеет параметр типа <xref:System.Security.SecureString> или с помощью <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> свойство.  
  
-   Для предоставления сведений пароль для проверки подлинности SQL Server путем вызова <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> конструктор или получении значения <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> свойство.  
  
-   Чтобы передать строку в неуправляемый код. Дополнительные сведения см. в разделе [SecureString и взаимодействия](#interop) раздел.  
  
 [К началу](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a>SecureString и взаимодействия  
 Поскольку операционная система не поддерживает непосредственно <xref:System.Security.SecureString>, необходимо преобразовать значение <xref:System.Security.SecureString> объект к типу требуемую строку перед передачей их собственного метода.  <xref:System.Runtime.InteropServices.Marshal> Класс имеет пять методов, которые это сделать:  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>, который преобразует <xref:System.Security.SecureString> строковое значение для двоичную строку (BSTR), распознаваемые COM.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> и <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>, какие копии <xref:System.Security.SecureString> строковое значение в строку ANSI в неуправляемой памяти.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> и <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>, какие копии <xref:System.Security.SecureString> строковое значение для строки в Юникоде в неуправляемой памяти.  
  
 Каждый из этих методов создает строку открытого текста в неуправляемой памяти. Он отвечает разработчик обнуляется и освободить эту память, как только оно не требуется. Каждый из методов выделения строки преобразования и памяти имеет соответствующий метод для обнуляется и освободить выделенную память:  
  
|Метод распределения и преобразования|Ноль и free-метод|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [К началу](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a>Насколько хорошо защищен SecureString?  
 При создании должным образом, <xref:System.Security.SecureString> экземпляра обеспечивает большую степень защиты данных, чем <xref:System.String>. При создании строки из источника символ во время <xref:System.String> создает несколько промежуточных в памяти, а <xref:System.Security.SecureString> создает только один экземпляр.  Сбор мусора в <xref:System.String> объектов является недетерминированным. Кроме того, так как его память не закреплен, сборщик мусора будет сделать дополнительные копии <xref:System.String> значений при перемещении и сжатие памяти. Напротив, памяти, выделенной для <xref:System.Security.SecureString> закрепляется объекта, а также что память может освобождаться путем вызова <xref:System.Security.SecureString.Dispose%2A> метод.  
  
 Несмотря на то, что данные, хранящиеся в <xref:System.Security.SecureString> экземпляр является более безопасной, чем данные, хранящиеся в <xref:System.String> экземпляра, имеют значительные ограничения на безопасной <xref:System.Security.SecureString> экземпляр. Сюда входит следующее.  
  
 Platform  
 В операционной системе Windows, а содержимое <xref:System.Security.SecureString> массив внутренних символов экземпляра шифруются. Тем не менее ли из-за отсутствия API или проблемы управления ключами, шифрование не поддерживается на всех платформах. Из-за этой зависимости платформы <xref:System.Security.SecureString> внутреннего хранилища на платформе, отличных от Windows, не шифруются. Другие функции используются на этих платформах для дополнительной защиты.
  
 Длительность  
 Даже если <xref:System.Security.SecureString> реализуется возможность воспользоваться преимуществами шифрования, назначенные в виде обычного текста <xref:System.Security.SecureString> экземпляр может быть доступен в разные моменты времени:  
  
-   Поскольку Windows не предоставляет реализацию защищенной строки на уровне операционной системы, в .NET Framework по-прежнему имеется для преобразования значения защищенной строки в представление в виде обычного текста для его использования.  
  
-   Каждый раз, когда значение защищенной строки изменяется методами, такие как <xref:System.Security.SecureString.AppendChar%2A> или <xref:System.Security.SecureString.RemoveAt%2A>, он должен быть расшифрован (которое преобразуется обратно в обычный текст), изменения и снова зашифровываются.  
  
-   Если защищенная строка используется в вызове взаимодействия, оно должно быть преобразовано в строку ANSI, строки Юникода или двоичную строку (BSTR). Дополнительные сведения см. в разделе [SecureString и взаимодействия](#interop) раздел.  
  
 Интервал времени, для которого <xref:System.Security.SecureString> экземпляра значение предоставляется просто укорачивается сравнению с <xref:System.String> класса.  
  
 Сравнение использования  
 Как правило <xref:System.Security.SecureString> класс определяет механизм хранения для строковых значений, которые должны быть защищены или хранить в тайне. Тем не менее, за пределами самой .NET Framework поддерживает механизм использования <xref:System.Security.SecureString>. Это означает, что защищенная строка необходимо преобразовать в удобный для использования формат (обычно виде открытого текста), можно распознать по своей цели, а что расшифровки и преобразование должно находиться в пространстве пользователя.  
  
 Всего <xref:System.Security.SecureString> надежнее, чем <xref:System.String> так, как он ограничивает возможность раскрытия конфиденциальных строковых данных. Тем не менее эти строки, по-прежнему могут быть открыты для любого процесса или операцию, которая имеет доступ к необработанные памяти, например вредоносных процесса, выполняющегося на главном компьютере, дамп процесса или файл подкачки для просмотра пользователем. Вместо использования <xref:System.Security.SecureString> защиты паролей, рекомендуемой альтернативой является использование непрозрачный дескриптор для учетных данных, хранящихся вне процесса.  
  
 [К началу](#top)  
  
   
  
## Examples  
 Следующий пример демонстрирует, как использовать <xref:System.Security.SecureString> для защиты пароля пользователя для использования в качестве учетных данных для запуска нового процесса.  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.SecureString" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.SecureString" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере используется значение по умолчанию (или без параметров) конструктор для создания нового <xref:System.Security.SecureString> объекта. Затем он вызывает <xref:System.Security.SecureString.AppendChar%2A> метод, чтобы добавить к нему массив символов.  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 В следующем примере создается <xref:System.Security.SecureString> объекта из значения <xref:System.String> объекта.  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка при защите значения этого экземпляра или снятии с него защиты.</exception>
        <exception cref="T:System.NotSupportedException">Эта операция не поддерживается этой платформой.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberSignature Language="F#" Value="new System.Security.SecureString : nativeptr&lt;char&gt; * int -&gt; System.Security.SecureString" Usage="new System.Security.SecureString (value, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Указатель на массив объектов <see cref="T:System.Char" />.</param>
        <param name="length">Число элементов массива <paramref name="value" />, включаемых в новый экземпляр.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Security.SecureString" /> из подмассива объектов <see cref="T:System.Char" />.  
  
Этот конструктор несовместим с CLS. CLS-совместимая альтернатива — <see cref="M:System.Security.SecureString.#ctor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот конструктор инициализирует новый <xref:System.Security.SecureString> объектом количество символов в `value` определяется `length`; значение экземпляра шифруется.  
  
 В C# этот конструктор определен только в контексте небезопасного кода.  
  
   
  
## Examples  
 В следующем примере создается новый <xref:System.Security.SecureString> объект путем передачи его конструктору указатель на массив символов.  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" /> меньше нуля или больше 65 536.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка при защите значения этой защищенной строки или снятии с него защиты.</exception>
        <exception cref="T:System.NotSupportedException">Эта операция не поддерживается этой платформой.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Требует полного доверия для непосредственного вызывающего объекта. Этот член не может использоваться частично доверенным или прозрачным кодом.</permission>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberSignature Language="F#" Value="member this.AppendChar : char -&gt; unit" Usage="secureString.AppendChar c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">Знак, добавляемый к защищенной строке.</param>
        <summary>Добавляет знак в конец текущей защищенной строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если реализация использует механизм защиты, такие как шифрование, значение этой защищенной строки, если таковое имеется, не защищен; `c` добавляется; затем новое значение защищенной строки повторной защиты.  
  
   
  
## Examples  
 В следующем примере показано, как <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, и <xref:System.Security.SecureString.Clear%2A> методы изменяют значение <xref:System.Security.SecureString> объекта.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 В следующем примере показано, как <xref:System.Security.SecureString.AppendChar%2A> и <xref:System.Security.SecureString.RemoveAt%2A> методы могут использоваться для сбора символов в пароле.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Защищенная строка уже удалена.</exception>
        <exception cref="T:System.InvalidOperationException">Данная защищенная строка доступна только для чтения.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">При выполнении этой операции длина защищенной строки превысит 65 536 символов.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка при защите значения этой защищенной строки или снятии с него защиты.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="secureString.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет значение текущей защищенной строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обнуляется памяти компьютера, который содержит значение этой защищенной строки, то длина значения этой защищенной строки, равным нулю.  
  
   
  
## Examples  
 В следующем примере показано, как <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, и <xref:System.Security.SecureString.Clear%2A> методы изменяют значение <xref:System.Security.SecureString> объекта.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Защищенная строка уже удалена.</exception>
        <exception cref="T:System.InvalidOperationException">Данная защищенная строка доступна только для чтения.</exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Security.SecureString" Usage="secureString.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает копию текущей защищенной строки.</summary>
        <returns>Копия этой защищенной строки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если экземпляр <xref:System.Security.SecureString> будет помечен как доступный только для чтения, копия этого экземпляра не будет только для чтения.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Защищенная строка уже удалена.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка при защите значения этой защищенной строки или снятии с него защиты.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="secureString.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает все ресурсы, используемые текущим объектом <see cref="T:System.Security.SecureString" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString.Dispose%2A> Метод записывает двоичных нулей на выделенную память, содержащий значение данного объекта <xref:System.Security.SecureString> объекта, а затем освобождает выделенную память.  
  
 Дополнительные сведения см. в разделе [Сборка мусора](~/docs/standard/garbage-collection/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.InsertAt : int * char -&gt; unit" Usage="secureString.InsertAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Индекс позиции вставки параметра <paramref name="c" />.</param>
        <param name="c">Вставляемый знак.</param>
        <summary>Вставляет знак в заданную индексом позицию защищенной строки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Индекс (с нуля); Первый символ в этой защищенной строки индекс равен нулю.  
  
 Если реализация использует механизм защиты, такие как шифрование, значение защищенной строки, если таковое имеется, не защищен; `c` вставляется в указанной позиции индекса; затем новое значение повторной защиты. <xref:System.Security.SecureString.InsertAt%2A> Метод позволяет получить те же результаты, что <xref:System.Security.SecureString.AppendChar%2A> метод, который вставляет символ в конце защищенной строки, если `index` параметр <xref:System.Security.SecureString.InsertAt%2A> присваивается длину этого экземпляра.  
  
   
  
## Examples  
 В следующем примере показано, как <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, и <xref:System.Security.SecureString.Clear%2A> методы изменяют значение <xref:System.Security.SecureString> объекта.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Защищенная строка уже удалена.</exception>
        <exception cref="T:System.InvalidOperationException">Данная защищенная строка доступна только для чтения.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="index" /> менее нуля или более длины защищенной строки.  
  
-или- 
При выполнении этой операции длина защищенной строки превысит 65 536 символов.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка при защите значения этой защищенной строки или снятии с него защиты.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : unit -&gt; bool" Usage="secureString.IsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Указывает, что защищенная строка доступна только для чтения.</summary>
        <returns>Значение <see langword="true" />, если защищенная строка доступна только для чтения; в противном случае — <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 После возникновения <xref:System.Security.SecureString> помечен только для чтения <xref:System.Security.SecureString.MakeReadOnly%2A> метод, любая попытка изменить значение этого экземпляра вызывает <xref:System.InvalidOperationException>. Используйте <xref:System.Security.SecureString.IsReadOnly%2A> тестируемого метода ли <xref:System.Security.SecureString> доступен только для чтения, прежде чем пытаться изменить его.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Защищенная строка уже удалена.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Security.SecureString.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает количество символов в текущей защищенной строке.</summary>
        <value>Количество объектов <see cref="T:System.Char" /> в этой защищенной строке.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString.Length%2A> Свойство возвращает количество <xref:System.Char> объектов в данном экземпляре, не число символов Юникода. Символ Юникода могут быть представлены в более чем одной <xref:System.Char> объекта.  
  
 Максимальная длина <xref:System.Security.SecureString> экземпляра составляет 65 536 символов.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Защищенная строка уже удалена.</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberSignature Language="F#" Value="member this.MakeReadOnly : unit -&gt; unit" Usage="secureString.MakeReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Делает текстовое значение этой защищенной строки доступным только для чтения.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Инициализировать текстовое значение экземпляра <xref:System.Security.SecureString> класса <xref:System.Security.SecureString.%23ctor%2A> конструкторов и измените значение с <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, и <xref:System.Security.SecureString.AppendChar%2A> методы.  
  
 После окончательного изменения были внесены, используйте <xref:System.Security.SecureString.MakeReadOnly%2A> способ сделать неизменяемым значение экземпляра (только для чтения). Дополнительно после значение помечен как доступный только для чтения, любая попытка его изменить вызывает <xref:System.InvalidOperationException>.  
  
 Результат вызова <xref:System.Security.SecureString.MakeReadOnly%2A> необратимо поскольку <xref:System.Security.SecureString> класс предоставляет отсутствуют средства, чтобы вновь сделать изменяемые защищенной строки. Используйте <xref:System.Security.SecureString.IsReadOnly%2A> для проверки экземпляра <xref:System.Security.SecureString> доступен только для чтения.  
  
   
  
## Examples  
 В следующем примере показано, как <xref:System.Security.SecureString.AppendChar%2A> и <xref:System.Security.SecureString.RemoveAt%2A> методы могут использоваться для сбора символов в пароле. После сбора пароля, оно становится доступным только для чтения.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Защищенная строка уже удалена.</exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="secureString.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Индекс знака в защищенной строке.</param>
        <summary>Удаляет из защищенной строки знак, расположенный по указанному индексу.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Индекс (с нуля); Первый символ в этот экземпляр является нулевой позиции индекса.  
  
 Если реализация использует механизм защиты, такие как шифрование, значение этой защищенной строки, если таковое имеется, не защищен; символ в указанной позиции индекса удаляется; новое значение, то повторной защиты.  
  
   
  
## Examples  
 В следующем примере показано, как <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, и <xref:System.Security.SecureString.Clear%2A> методы изменяют значение <xref:System.Security.SecureString> объекта.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 В следующем примере показано, как <xref:System.Security.SecureString.AppendChar%2A> и <xref:System.Security.SecureString.RemoveAt%2A> методы могут использоваться для сбора символов в пароле.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Защищенная строка уже удалена.</exception>
        <exception cref="T:System.InvalidOperationException">Данная защищенная строка доступна только для чтения.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="index" /> меньше нуля или больше или равно длине данной защищенной строки.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка при защите значения этой защищенной строки или снятии с него защиты.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * char -&gt; unit" Usage="secureString.SetAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Индекс имеющегося знака в защищенной строке.</param>
        <param name="c">Знак, заменяющий имеющийся знак.</param>
        <summary>Заменяет расположенный по указанному индексу знак другим знаком.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Индекс (с нуля); Первый символ в этот экземпляр является нулевой позиции индекса.  
  
 Если реализация использует механизм защиты, такие как шифрование, значение защищенной строки, если таковое имеется, не защищен; `c` будет назначен указанному положению индекса; затем новое значение повторной защиты.  
  
   
  
## Examples  
 В следующем примере показано, как <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, и <xref:System.Security.SecureString.Clear%2A> методы изменяют значение <xref:System.Security.SecureString> объекта.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Защищенная строка уже удалена.</exception>
        <exception cref="T:System.InvalidOperationException">Данная защищенная строка доступна только для чтения.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение <paramref name="index" /> меньше нуля или больше или равно длине данной защищенной строки.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Произошла ошибка при защите значения этой защищенной строки или снятии с него защиты.</exception>
      </Docs>
    </Member>
  </Members>
</Type>