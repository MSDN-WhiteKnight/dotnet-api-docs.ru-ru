<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d66c61830c60670687228ad8681be7fa396883aa" /><Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="11/17/2018" /><Meta Name="ms.locfileid" Value="51880366" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Тип данных в источнике данных.</typeparam>
    <summary>Предоставляет функциональные возможности для оценки запросов по определенным источникам данных в случае, если тип данных известен.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Linq.IQueryable%601> Интерфейс предназначен для реализации поставщиков запросов.  
  
 Этот интерфейс наследует <xref:System.Collections.Generic.IEnumerable%601> интерфейса таким образом, если оно представляет запрос, можно перечислить результаты этого запроса. Перечисление заставляет дерева выражения, связанного с <xref:System.Linq.IQueryable%601> объект для выполнения. Запросы, не возвращающие перечисляемые результаты выполняются при <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> вызывается метод.  
  
 Определение «выполнения дерева выражения» относится только к поставщик запросов. Например оно может включать трансляцию дерева выражения на язык запросов, соответствующий для источника данных.  
  
 <xref:System.Linq.IQueryable%601> Интерфейс позволяет запросов быть полиморфными. То есть так как запрос к `IQueryable` источник данных представляется в виде дерева выражений, он может выполняться для различных типов источников данных.  
  
 `static` (`Shared` В Visual Basic) методы, определенные в классе <xref:System.Linq.Queryable> (за исключением <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>, и <xref:System.Linq.Queryable.ThenByDescending%2A>) расширяют объекты типов, реализующих <xref:System.Linq.IQueryable%601> интерфейс.  
  
 Дополнительные сведения о создании собственного поставщика LINQ см. в разделе [LINQ: Создание поставщика IQueryable](https://go.microsoft.com/fwlink/?LinkID=112370) в блогах MSDN.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>