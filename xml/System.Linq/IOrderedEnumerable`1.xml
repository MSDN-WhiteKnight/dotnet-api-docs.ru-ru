<Type Name="IOrderedEnumerable&lt;TElement&gt;" FullName="System.Linq.IOrderedEnumerable&lt;TElement&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2ad3787766b462b8b901625b8afc979782109e1e" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58694245" /></Metadata><TypeSignature Language="C#" Value="public interface IOrderedEnumerable&lt;TElement&gt; : System.Collections.Generic.IEnumerable&lt;TElement&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOrderedEnumerable`1&lt;TElement&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!TElement&gt;, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IOrderedEnumerable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOrderedEnumerable(Of TElement)&#xA;Implements IEnumerable(Of TElement)" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename TElement&gt;&#xA;public interface class IOrderedEnumerable : System::Collections::Generic::IEnumerable&lt;TElement&gt;" />
  <TypeSignature Language="F#" Value="type IOrderedEnumerable&lt;'Element&gt; = interface&#xA;    interface seq&lt;'Element&gt;&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="TElement" />
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;TElement&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="TElement">Тип элементов последовательности.</typeparam>
    <summary>Представляет отсортированную последовательность.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот тип является перечислимым, поскольку он наследует от <xref:System.Collections.Generic.IEnumerable%601>.  
  
 Методы расширения <xref:System.Linq.Enumerable.ThenBy%2A> и <xref:System.Linq.Enumerable.ThenByDescending%2A> работают с объектами типа <xref:System.Linq.IOrderedEnumerable%601>. Объект типа <xref:System.Linq.IOrderedEnumerable%601> можно получить путем вызова одного из методов основная сортировка, <xref:System.Linq.Enumerable.OrderBy%2A> или <xref:System.Linq.Enumerable.OrderByDescending%2A>, которые возвращают <xref:System.Linq.IOrderedEnumerable%601>. <xref:System.Linq.Enumerable.ThenBy%2A> и <xref:System.Linq.Enumerable.ThenByDescending%2A>, методы подчиненных сортировки, в свою очередь, также возвращают объект типа <xref:System.Linq.IOrderedEnumerable%601>. Такой подход позволяет для любого числа последовательных вызовов <xref:System.Linq.Enumerable.ThenBy%2A> или <xref:System.Linq.Enumerable.ThenByDescending%2A>, где каждый вызов выполняет подчиненных упорядочение на отсортированные данные, возвращенные из предыдущего вызова.  
  
   
  
## Examples  
 Следующий пример демонстрирует выполнение основного и дополнительного, упорядочение на массив строк. Также показано, что полученный в результате <xref:System.Linq.IOrderedEnumerable%601> является перечислимым.  
  
 [!code-csharp[System.Linq.IOrderedEnumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/CS/IOrderedEnumerable.cs#1)]
 [!code-vb[System.Linq.IOrderedEnumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/VB/IOrderedEnumerable.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CreateOrderedEnumerable&lt;TKey&gt;">
      <MemberSignature Language="C#" Value="public System.Linq.IOrderedEnumerable&lt;TElement&gt; CreateOrderedEnumerable&lt;TKey&gt; (Func&lt;TElement,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer, bool descending);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.IOrderedEnumerable`1&lt;!TElement&gt; CreateOrderedEnumerable&lt;TKey&gt;(class System.Func`2&lt;!TElement, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer, bool descending) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable``1(System.Func{`0,``0},System.Collections.Generic.IComparer{``0},System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function CreateOrderedEnumerable(Of TKey) (keySelector As Func(Of TElement, TKey), comparer As IComparer(Of TKey), descending As Boolean) As IOrderedEnumerable(Of TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TKey&gt;&#xA; System::Linq::IOrderedEnumerable&lt;TElement&gt; ^ CreateOrderedEnumerable(Func&lt;TElement, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer, bool descending);" />
      <MemberSignature Language="F#" Value="abstract member CreateOrderedEnumerable : Func&lt;'Element, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; * bool -&gt; System.Linq.IOrderedEnumerable&lt;'Element&gt;" Usage="iOrderedEnumerable.CreateOrderedEnumerable (keySelector, comparer, descending)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="keySelector" Type="System.Func&lt;TElement,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
        <Parameter Name="descending" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <typeparam name="TKey">Тип ключа, созданного функцией <paramref name="keySelector" />.</typeparam>
        <param name="keySelector">Функция <see cref="T:System.Func`2" />, используемая для извлечения ключа для каждого элемента.</param>
        <param name="comparer">Компаратор <see cref="T:System.Collections.Generic.IComparer`1" />, используемый для сравнения ключей при формировании возвращаемой последовательности.</param>
        <param name="descending"><see langword="true" />, если элементы требуется сортировать в порядке убывания; <see langword="false" />, чтобы сортировать элементы в порядке возрастания.</param>
        <summary>Выполняет дополнительное упорядочение элементов объекта <see cref="T:System.Linq.IOrderedEnumerable`1" /> по ключу.</summary>
        <returns>Объект <see cref="T:System.Linq.IOrderedEnumerable`1" />, элементы которого отсортированы по ключу.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Функциональные возможности, предоставляемые этим методом, который обеспечивается при <xref:System.Linq.Enumerable.ThenBy%2A> или <xref:System.Linq.Enumerable.ThenByDescending%2A>, в зависимости от ли `descending` — `true` или `false`. Они оба выполнения подчиненных упорядочение уже упорядоченную последовательность типа <xref:System.Linq.IOrderedEnumerable%601>.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется использование <xref:System.Linq.IOrderedEnumerable`1.CreateOrderedEnumerable*> провести вторичную сортировку <xref:System.Linq.IOrderedEnumerable%601>.  
  
 [!code-csharp[System.Linq.IOrderedEnumerable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/CS/IOrderedEnumerable.cs#2)]
 [!code-vb[System.Linq.IOrderedEnumerable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.IOrderedEnumerable/VB/IOrderedEnumerable.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>