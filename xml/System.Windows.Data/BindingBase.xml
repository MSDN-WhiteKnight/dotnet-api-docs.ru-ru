<Type Name="BindingBase" FullName="System.Windows.Data.BindingBase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a621138e6b1f285d48a5acfbe22eee6c9f9487dd" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56361155" /></Metadata><TypeSignature Language="C#" Value="public abstract class BindingBase : System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract BindingBase extends System.Windows.Markup.MarkupExtension" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Data.BindingBase" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class BindingBase&#xA;Inherits MarkupExtension" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingBase abstract : System::Windows::Markup::MarkupExtension" />
  <TypeSignature Language="F#" Value="type BindingBase = class&#xA;    inherit MarkupExtension" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Markup.MarkupExtension</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Windows.Localizability(System.Windows.LocalizationCategory.None, Modifiability=System.Windows.Modifiability.Unmodifiable, Readability=System.Windows.Readability.Unreadable)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Windows.Markup.MarkupExtensionReturnType(typeof(System.Object))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Определяет общие характеристики классов <see cref="T:System.Windows.Data.Binding" />, <see cref="T:System.Windows.Data.PriorityBinding" />и <see cref="T:System.Windows.Data.MultiBinding" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Так как <xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=nameWithType> метод запечатан, класс пользовательской привязки, производный от <xref:System.Windows.Data.BindingBase> не будет правильно функционировать как [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] расширение разметки.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BindingGroupName">
      <MemberSignature Language="C#" Value="public string BindingGroupName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BindingGroupName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.BindingGroupName" />
      <MemberSignature Language="VB.NET" Value="Public Property BindingGroupName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ BindingGroupName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.BindingGroupName : string with get, set" Usage="System.Windows.Data.BindingBase.BindingGroupName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает имя группы <see cref="T:System.Windows.Data.BindingGroup" />, к которой принадлежит данная привязка.</summary>
        <value>Имя группы <see cref="T:System.Windows.Data.BindingGroup" />, к которой принадлежит данная привязка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> не задано, эта привязка принадлежит <xref:System.Windows.Data.BindingGroup> только если источник привязки и <xref:System.Windows.FrameworkElement.DataContext%2A> родительского элемента, имеющего <xref:System.Windows.Data.BindingGroup> имеют тот же объект.  
  
 Если <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> устанавливается в значение, эта привязка принадлежит <xref:System.Windows.Data.BindingGroup> при соблюдении следующих условий:  
  
-   <xref:System.Windows.Data.BindingGroup.Name%2A> Из <xref:System.Windows.Data.BindingGroup> и <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> равны.  
  
-   <xref:System.Windows.Data.BindingGroup> Принадлежит родительского элемента привязки целевого элемента.  
  
 Если <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> присваивается `null`, привязка не является частью <xref:System.Windows.Data.BindingGroup>.  
  
 Можно включить привязки, в которых источник, который отличается от <xref:System.Windows.FrameworkElement.DataContext%2A> родительского элемента, имеющего <xref:System.Windows.Data.BindingGroup> , задав <xref:System.Windows.Data.BindingGroup.Name%2A> из <xref:System.Windows.Data.BindingGroup> и <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> свойство привязки, то же значение.  Вы можете исключить привязки, в которых один и тот же источник как <xref:System.Windows.FrameworkElement.DataContext%2A> родительского элемента, имеющего <xref:System.Windows.Data.BindingGroup> , задав <xref:System.Windows.Data.BindingGroup.Name%2A> из <xref:System.Windows.Data.BindingGroup> и <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> свойство привязки разные значения.  
  
   
  
## Examples  
 Следующие примеры являются частью приложения, которое проверяет, ли пользователь задать свойства двух объектов одинаковые значения. В первом примере создается два <xref:System.Windows.Controls.TextBox> элементов управления, каждый из которых является привязан к другому источнику данных: Привязки первого <xref:System.Windows.Controls.TextBox> является частью <xref:System.Windows.Data.BindingGroup> поскольку <xref:System.Windows.Controls.TextBox> наследует <xref:System.Windows.FrameworkElement.DataContext%2A> и <xref:System.Windows.Data.BindingGroup> от своего родительского элемента <xref:System.Windows.Controls.StackPanel>  
  
 Привязка на второй <xref:System.Windows.Controls.TextBox> является частью <xref:System.Windows.Data.BindingGroup> поскольку <xref:System.Windows.Data.BindingGroup.Name%2A> из <xref:System.Windows.Data.BindingGroup> и <xref:System.Windows.Data.BindingBase.BindingGroupName%2A> из <xref:System.Windows.Data.Binding> устанавливается `bindingGroup`.  
  
 [!code-xaml[BindingGroupSnippets#BindingGroupName](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#bindinggroupname)]  
[!code-xaml[BindingGroupSnippets#ValidationAdornerSite](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#validationadornersite)]  
  
 В следующем примере показан <xref:System.Windows.Controls.ValidationRule> , используемый в предыдущем примере.  В <xref:System.Windows.Controls.ValidationRule.Validate%2A> метод, в примере показано получение каждого исходного объекта из <xref:System.Windows.Data.BindingGroup> и проверяет, равны ли свойства объектов.  
  
 [!code-csharp[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml.cs#bindinggroupnamevalidationrule)]
 [!code-vb[BindingGroupSnippets#BindingGroupNameValidationRule](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BindingGroupSnippets/visualbasic/window3.xaml.vb#bindinggroupnamevalidationrule)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Delay">
      <MemberSignature Language="C#" Value="public int Delay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Delay" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.Delay" />
      <MemberSignature Language="VB.NET" Value="Public Property Delay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Delay { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Delay : int with get, set" Usage="System.Windows.Data.BindingBase.Delay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает время (в миллисекундах) ожидания перед обновлением источника привязки после изменения значения в целевом объекте.</summary>
        <value>Количество времени в миллисекундах для ожидания перед обновлением источника привязки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 При использовании привязки для обновления источника привязки, при каждом изменении значения свойства на целевом объекте, задаются <xref:System.Windows.Data.Binding.Mode%2A> свойства <xref:System.Windows.Data.BindingMode.TwoWay> и <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> для <xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged>.  В этом случае можно использовать <xref:System.Windows.Data.BindingBase.Delay%2A> свойство, чтобы указать, следует ли задержки между при изменении целевой объект и при обновлении источника.  Это полезно в тех случаях, когда вы хотите дать пользователям возможность менять свойства для объекта источника, но вы не хотите каждого изменения немедленно будет зафиксировано в источнике.  Например предположим, что у вас есть текстовое поле, двустороннее данные, привязанные к свойству объекта данных.  Когда пользователь изменяет значение в текстовом поле, источник обновляется.  Чтобы реализовать этот сценарий, необходимо задать <xref:System.Windows.Data.Binding.Mode%2A> свойство <xref:System.Windows.Data.Binding> для <xref:System.Windows.Data.BindingMode.TwoWay> и <xref:System.Windows.Data.Binding.UpdateSourceTrigger%2A> для <xref:System.Windows.Data.UpdateSourceTrigger.PropertyChanged>.  Чтобы избежать обновления исходного объекта с каждым нажатием клавиши, задайте <xref:System.Windows.Data.BindingBase.Delay%2A> свойство оправданное значение привязки для обновления только в том случае, после этого времени прошло с момента пользователь остановил ввода.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FallbackValue">
      <MemberSignature Language="C#" Value="public object FallbackValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object FallbackValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.FallbackValue" />
      <MemberSignature Language="VB.NET" Value="Public Property FallbackValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ FallbackValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FallbackValue : obj with get, set" Usage="System.Windows.Data.BindingBase.FallbackValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, которое следует использовать, когда привязка не может вернуть значение.</summary>
        <value>Значение по умолчанию — <see cref="F:System.Windows.DependencyProperty.UnsetValue" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Привязка успешно возвращает значение, если:  
  
1.  Путь к источнику привязки разрешает успешно.  
  
2.  Преобразователь значений, если таковой имеется, способен преобразовать полученное значение.  
  
3.  Полученное значение является допустимым для свойства привязки целевой (target).  
  
 Если 1 и 2 возвращают <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=nameWithType>, свойство цели присваивается значение <xref:System.Windows.Data.BindingBase.FallbackValue%2A>, если он доступен. Если не <xref:System.Windows.Data.BindingBase.FallbackValue%2A>, используется значение по умолчанию целевого свойства.  
  
 Значение <xref:System.Windows.DependencyProperty.UnsetValue?displayProperty=nameWithType> не считается успешной возвращаемое значение.  
  
<a name="xamlTextUsage_FallbackValue"></a>   
## <a name="xaml-text-usage"></a>Использование текста XAML  
  
```  
<object FallbackValue="fallbackValue" />  
```  
  
 **- или -**  
  
```  
<object>  
  <object.FallbackValue>  
    fallbackValue  
    </object.FallbackValue>  
</object>  
```  
  
<a name="xamlValues_FallbackValue"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *fallbackValue*  
 Значение атрибута или объект элемента того же типа, что целевое свойство. См. сведения об использовании XAML документации этого типа. Этот тип может или могут не поддерживать синтаксис атрибутов для его значения, или может или могут не поддерживать синтаксис объектных элементов (для которого требуется конструктор по умолчанию для данного типа). Тип свойства объекта, поэтому влияет на используемого синтаксиса для значения <xref:System.Windows.Data.BindingBase.FallbackValue%2A> свойство.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Data.IValueConverter.Convert(System.Object,System.Type,System.Object,System.Globalization.CultureInfo)" />
      </Docs>
    </Member>
    <Member MemberName="ProvideValue">
      <MemberSignature Language="C#" Value="public override sealed object ProvideValue (IServiceProvider serviceProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ProvideValue(class System.IServiceProvider serviceProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingBase.ProvideValue(System.IServiceProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Function ProvideValue (serviceProvider As IServiceProvider) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ProvideValue(IServiceProvider ^ serviceProvider);" />
      <MemberSignature Language="F#" Value="override this.ProvideValue : IServiceProvider -&gt; obj" Usage="bindingBase.ProvideValue serviceProvider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceProvider" Type="System.IServiceProvider" />
      </Parameters>
      <Docs>
        <param name="serviceProvider">Объект, способный предоставлять службы для расширения разметки. Может иметь значение <see langword="null" />.</param>
        <summary>Возвращает объект, который следует задать для свойства, в котором применяются эта привязка и это расширение.</summary>
        <returns>Значение, задаваемое для целевого свойства привязки.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Эта реализация поддерживает следующий базовый синтаксис для привязки через [!INCLUDE[TLA#tla_xaml](~/includes/tlasharptla-xaml-md.md)] всех предоставляемых практические производные классы (<xref:System.Windows.Data.Binding>, <xref:System.Windows.Data.PriorityBinding>, и <xref:System.Windows.Data.MultiBinding>).  
  
 <xref:System.Windows.Data.BindingBase> Реализации класса этот метод должен вернуть объект выражения, являющийся результатом привязки. Привязка свойства работает, обращаясь к данной <xref:System.Windows.DependencyProperty> на заданный <xref:System.Windows.DependencyObject>. Эти два фрагмента информации передаются, запрашивая <xref:System.Windows.Markup.IProvideValueTarget> реализации на `serviceProvider`, который [!INCLUDE[TLA2#tla_winclient](~/includes/tla2sharptla-winclient-md.md)] [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] чтения делает доступными во время синтаксического разбора привязки. Эта реализация базового класса отвечает за поиск является допустимым <xref:System.Windows.DependencyProperty> и <xref:System.Windows.DependencyObject>. Если они находятся, фактическая реализация возврата выражения привязки переходит к различные производные классы, как должна реализоваться вызов внутреннего абстрактного метода базового класса. В противном случае модуль возвращает сам объект привязки. Возвращение самой привязке приводит ошибки несоответствия типов, но это не должно происходить в обычных условиях.  
  
> [!IMPORTANT]
>  Так как синтаксис для привязки через [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] реализованное в этот метод зависит от реализации внутренних переопределение и поскольку <xref:System.Windows.Data.BindingBase.ProvideValue%2A?displayProperty=nameWithType> сам является запечатанным, класс пользовательской привязки, производный от <xref:System.Windows.Data.BindingBase> не будет правильно функционировать как [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] расширение разметки.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeFallbackValue">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeFallbackValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeFallbackValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingBase.ShouldSerializeFallbackValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeFallbackValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeFallbackValue();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeFallbackValue : unit -&gt; bool" Usage="bindingBase.ShouldSerializeFallbackValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает значение, определяющее, должны ли процессы сериализации выполнять сериализацию действующего значения свойства <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> по экземплярам данного класса.</summary>
        <returns>Значение <see langword="true" />, если значение свойства <see cref="P:System.Windows.Data.BindingBase.FallbackValue" /> подлежит сериализации, в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSerializeTargetNullValue">
      <MemberSignature Language="C#" Value="public bool ShouldSerializeTargetNullValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ShouldSerializeTargetNullValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Data.BindingBase.ShouldSerializeTargetNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ShouldSerializeTargetNullValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool ShouldSerializeTargetNullValue();" />
      <MemberSignature Language="F#" Value="member this.ShouldSerializeTargetNullValue : unit -&gt; bool" Usage="bindingBase.ShouldSerializeTargetNullValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает значение, которое указывает, должно ли свойство <see cref="P:System.Windows.Data.BindingBase.TargetNullValue" /> быть сериализовано.</summary>
        <returns>Значение <see langword="true" />, если свойство<see cref="P:System.Windows.Data.BindingBase.TargetNullValue" /> должно сериализоваться; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringFormat">
      <MemberSignature Language="C#" Value="public string StringFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StringFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.StringFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property StringFormat As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StringFormat { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StringFormat : string with get, set" Usage="System.Windows.Data.BindingBase.StringFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает строку, указывающую способ форматирования привязки при отображении связанного значения в виде строки.</summary>
        <value>Строка, указывающая способ форматирования привязки при отображении связанного значения в виде строки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Data.BindingBase.StringFormat%2A> может быть составным, предварительно определенных или пользовательских строковом формате. Дополнительные сведения о форматах строки см. в разделе [типы форматирования](~/docs/standard/base-types/formatting-types.md).  
  
 Если задать <xref:System.Windows.Data.Binding.Converter%2A> и <xref:System.Windows.Data.BindingBase.StringFormat%2A> свойства, преобразователь применяется к значению в первую очередь, а затем <xref:System.Windows.Data.BindingBase.StringFormat%2A> применяется.  
  
 При задании <xref:System.Windows.Data.BindingBase.StringFormat%2A> на <xref:System.Windows.Data.Binding> формат составную строку, можно указать только один параметр.  
  
 При использовании <xref:System.Windows.Data.MultiBinding>, <xref:System.Windows.Data.BindingBase.StringFormat%2A> свойство применяется, только если задано на <xref:System.Windows.Data.MultiBinding>.  Значение <xref:System.Windows.Data.BindingBase.StringFormat%2A> , для которой включено на всех дочерних <xref:System.Windows.Data.Binding> объектов учитывается.  Число параметров в формате составную строку, не может превышать количество дочерних <xref:System.Windows.Data.Binding> объекты в <xref:System.Windows.Data.MultiBinding>.  
  
 При использовании <xref:System.Windows.Data.PriorityBinding>, можно задать <xref:System.Windows.Data.BindingBase.StringFormat%2A> на <xref:System.Windows.Data.PriorityBinding>, на дочерние объекты привязки, или оба.  Если <xref:System.Windows.Data.BindingBase.StringFormat%2A> набор дочерних элементов, то есть привязка применяется, что используется значение.  Если <xref:System.Windows.Data.BindingBase.StringFormat%2A> не задано для дочерней привязки, который применяется, <xref:System.Windows.Data.BindingBase.StringFormat%2A> из <xref:System.Windows.Data.PriorityBinding> применяется, если он задан.  
  
   
  
## Examples  
 В следующем примере используется <xref:System.Windows.Data.BindingBase.StringFormat%2A> свойства для преобразования `Price`, который является <xref:System.Double>, чтобы строка, представляющая денежная единица.  
  
 [!code-xaml[ContentStringSnippets#Binding](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentStringSnippets/CSharp/Window1.xaml#binding)]  
  
 В следующем примере используется <xref:System.Windows.Data.BindingBase.StringFormat%2A> свойство <xref:System.Windows.Data.MultiBinding> для создания строки, содержащей `Description` и `Price` каждого элемента в <xref:System.Windows.Controls.ListBox>.  
  
 [!code-xaml[ContentStringSnippets#MultiBinding](~/samples/snippets/csharp/VS_Snippets_Wpf/ContentStringSnippets/CSharp/Window1.xaml#multibinding)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetNullValue">
      <MemberSignature Language="C#" Value="public object TargetNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object TargetNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Data.BindingBase.TargetNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property TargetNullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ TargetNullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.TargetNullValue : obj with get, set" Usage="System.Windows.Data.BindingBase.TargetNullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или задает значение, используемое в целевом элементе, если значение источника равно <see langword="null" />.</summary>
        <value>Значение, используемое в целевом элементе, если значение источника равно <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
<a name="xamlTextUsage_TargetNullValue"></a>   
## <a name="xaml-text-usage"></a>Использование текста XAML  
  
```  
<object TargetNullValue="nullValue" />  
```  
  
 **- или -**  
  
```  
<object>  
  <object.TargetNullValue>  
    nullValue  
    </object.TargetNullValue>  
</object>  
```  
  
<a name="xamlValues_TargetNullValue"></a>   
## <a name="xaml-values"></a>Значения XAML  
 *nullValue*  
 Значение атрибута или объект элемента того же типа, что целевое свойство. См. сведения об использовании XAML документации этого типа. Этот тип может или могут не поддерживать синтаксис атрибутов для его значения, или может или могут не поддерживать синтаксис объектных элементов (для которого требуется конструктор по умолчанию для данного типа).  
  
   
  
## Examples  
 Следующий пример связывает <xref:System.Windows.Controls.TextBox> к свойству объекта.  Если свойство `null`, <xref:System.Windows.Controls.TextBox> отображает «Пожалуйста, введите строку.»  
  
 [!code-xaml[BindingGroupSnippets#TargetNullValue](~/samples/snippets/csharp/VS_Snippets_Wpf/BindingGroupSnippets/CSharp/Window3.xaml#targetnullvalue)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>