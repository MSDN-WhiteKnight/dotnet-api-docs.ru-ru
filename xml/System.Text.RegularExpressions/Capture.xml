<Type Name="Capture" FullName="System.Text.RegularExpressions.Capture">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ebdd330498b2c685e0206d9b2b5cfb3efb50c537" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58682124" /></Metadata><TypeSignature Language="C#" Value="public class Capture" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit Capture extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.Capture" />
  <TypeSignature Language="VB.NET" Value="Public Class Capture" />
  <TypeSignature Language="C++ CLI" Value="public ref class Capture" />
  <TypeSignature Language="F#" Value="type Capture = class" />
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет результаты из одной успешной записи части выражения.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Объект <xref:System.Text.RegularExpressions.Capture> является постоянным и не имеет открытого конструктора. Экземпляры возвращаются с помощью <xref:System.Text.RegularExpressions.CaptureCollection> объекта, который возвращается методом `Match.Captures` и <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> свойства. Тем не менее `Match.Captures` свойстве содержатся сведения о том же соответствии, что <xref:System.Text.RegularExpressions.Match> объекта.  
  
 Если квантификатор не применяются к захватываемой группе, <xref:System.Text.RegularExpressions.Group.Captures%2A?displayProperty=nameWithType> возвращает <xref:System.Text.RegularExpressions.CaptureCollection> с одним <xref:System.Text.RegularExpressions.Capture> объект, предоставляющий сведения о то же выделение, что <xref:System.Text.RegularExpressions.Group> объекта. Если к захватываемой группе применяется квантификатор `Group.Index`, `Group.Length`, и `Group.Value` свойства предоставляют сведения только о последней захваченной группы, в то время как <xref:System.Text.RegularExpressions.Capture> объекты в <xref:System.Text.RegularExpressions.CaptureCollection> предоставляют сведения о всех выражения записывает. Иллюстрация приведена в примере.  
  
   
  
## Examples  
 В следующем примере определяется регулярное выражение, которое сопоставляет фразы, содержащие знаки препинания, за исключением точки (».»).  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 Шаблон регулярного выражения `((\w+)[\s.])+` определяется, как показано в следующей таблице. Обратите внимание, что в это регулярное выражение квантификатор (+) применяется ко всему регулярному выражению.  
  
|Шаблон|Описание|  
|-------------|-----------------|  
|`(\w+)`|Совпадение с одним или несколькими символами слова. Это вторая группа записи.|  
|`[\s.])`|Соответствует пробелу или периода (».»).|  
|`((\w+)[\s.])`|Сопоставляется один или несколько словообразующих символов, за которым следует знак пробела или периода (».»). Это первая группа записи.|  
|`((\w+)[\s.])+`|Соответствует один или несколько вхождений символа слова или символы, за которым следует знак пробела или периода (».»).|  
  
 В этом примере входная строка состоит из двух предложений. Как показывает вывод, первое предложение состоит из одного слова, поэтому <xref:System.Text.RegularExpressions.CaptureCollection> объект имеет один <xref:System.Text.RegularExpressions.Capture> объект, который представляет ту же запись пакетов, как <xref:System.Text.RegularExpressions.Group> объект. Во втором предложении состоит из нескольких слов, поэтому <xref:System.Text.RegularExpressions.Group> объекты содержат только сведения о последней сопоставленная часть выражения. Группа 1, которая представляет первой записи, содержит последнее слово в предложении с периодом закрытия. Группа 2, которая представляет второй записи, содержит последнее слово в предложении. Тем не менее <xref:System.Text.RegularExpressions.Capture> объектов в группе <xref:System.Text.RegularExpressions.CaptureCollection> объект записи каждого соответствия части выражения. <xref:System.Text.RegularExpressions.Capture> Объектов в коллекции первой захватываемой группе захватов, содержат сведения о каждой записанного слова и знак пробела или периода. <xref:System.Text.RegularExpressions.Capture> Объектов в коллекции второй захватываемой группе захватов, содержат сведения о каждом записанного слова.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Text.RegularExpressions.CaptureCollection" />
  </Docs>
  <Members>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Index" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Index : int" Usage="System.Text.RegularExpressions.Capture.Index" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Позиция в исходной строке, в которой обнаружен первый символ записанной подстроки.</summary>
        <value>Начальная позиция с отсчетом с нуля в исходной строке, в которой обнаружена записанная подстрока.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Text.RegularExpressions.Capture.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает длину записанной подстроки.</summary>
        <value>Длина записанной подстроки.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.Capture.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="capture.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Извлекает записанную подстроку из входной строки путем вызова свойства <see cref="P:System.Text.RegularExpressions.Capture.Value" />.</summary>
        <returns>Подстрока, записанная по совпадению.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `ToString` — Это фактически внутренний вызов <xref:System.Text.RegularExpressions.Capture.Value%2A> свойство.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.Capture.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Text.RegularExpressions.Capture.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает записанную подстроку из входной строки.</summary>
        <value>Подстрока, записанная по совпадению.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если в вызове <xref:System.Text.RegularExpressions.Regex.Match%2A?displayProperty=nameWithType> или <xref:System.Text.RegularExpressions.Match.NextMatch%2A?displayProperty=nameWithType> метод не может найти совпадение, значение возвращаемого `Match.Value` свойство <xref:System.String.Empty?displayProperty=nameWithType>. Если обработчик регулярных выражений не удалось сопоставить захватываемой группы. значение возвращаемого `Group.Value` свойство <xref:System.String.Empty?displayProperty=nameWithType>. См. во втором примере для иллюстрации.  
  
   
  
## Examples  
 В следующем примере определяется регулярное выражение, которое сопоставляет фразы, содержащие знаки препинания, за исключением точки (».»). `Match.Value` Свойство отображающее результирующую строку, который состоит из соответствующих предложения, для каждого совпадения. `Group.Value` Свойство отображающее результирующую строку для каждой записи группы; он состоит из последней строки, охваченные этой захватываемой группы. <xref:System.Text.RegularExpressions.Capture.Value%2A?displayProperty=nameWithType> Свойство отображающее результирующую строку для каждой записи.  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Class#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.class/vb/example1.vb#1)]  
  
 Шаблон регулярного выражения `((\w+)[\s.])+` определяется, как показано в следующей таблице. Обратите внимание, что в это регулярное выражение квантификатор (+) применяется ко всему регулярному выражению.  
  
|Шаблон|Описание|  
|-------------|-----------------|  
|`(\w+)`|Совпадение с одним или несколькими символами слова. Это вторая группа записи.|  
|`[\s.])`|Соответствует пробелу или периода (».»).|  
|`((\w+)[\s.])`|Сопоставляется один или несколько словообразующих символов, за которым следует знак пробела или периода (».»). Это первая группа записи.|  
|`((\w+)[\s.])+`|Соответствует один или несколько вхождений символа слова или символы, за которым следует знак пробела или периода (».»).|  
  
 В этом примере входная строка состоит из двух предложений. Как показывает вывод, первое предложение состоит из одного слова, поэтому <xref:System.Text.RegularExpressions.CaptureCollection> объект имеет один <xref:System.Text.RegularExpressions.Capture> объект, который представляет ту же запись пакетов, как <xref:System.Text.RegularExpressions.Group> объект. Во втором предложении состоит из нескольких слов, поэтому <xref:System.Text.RegularExpressions.Group> объекты содержат только сведения о последней сопоставленная часть выражения. Группа 1, которая представляет первой записи, содержит последнее слово в предложении с периодом закрытия. Группа 2, которая представляет второй записи, содержит последнее слово в предложении. Тем не менее <xref:System.Text.RegularExpressions.Capture> объектов в группе <xref:System.Text.RegularExpressions.CaptureCollection> объект записи каждого соответствия части выражения. <xref:System.Text.RegularExpressions.Capture> Объектов в коллекции первой захватываемой группе захватов, содержат сведения о каждой записанного слова и знак пробела или периода. <xref:System.Text.RegularExpressions.Capture> Объектов в коллекции второй захватываемой группе захватов, содержат сведения о каждом записанного слова.  
  
 В следующем примере используется шаблон регулярного выражения `^([a-z]+)(\d+)*\.([a-z]+(\d)*)$`, чтобы искать номер продукта, состоит из двух частей, разделенных точкой. Обе части состоять из букв, следуют необязательные номера. Так как первая входная строка не соответствует шаблону, а значение возвращаемого <xref:System.Text.RegularExpressions.Match?displayProperty=nameWithType> объекта `Value` свойство <xref:System.String.Empty?displayProperty=nameWithType>. Аналогичным образом, если шаблон регулярного выражения не может сопоставить захватываемой группы, значение соответствующего <xref:System.Text.RegularExpressions.Group> объекта `Value` свойство <xref:System.String.Empty?displayProperty=nameWithType>.  
  
 [!code-csharp[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/cs/value1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.Capture.Value#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.capture.value/vb/value1.vb#1)]  
  
 Шаблон регулярного выражения определяется, как показано в следующей таблице:  
  
|Шаблон|Описание|  
|-------------|-----------------|  
|`^`|Начало совпадения в начале строки.|  
|`([a-z]+)`|Соответствовать один или несколько вхождений любого символа от до z. Поскольку обработчик регулярных выражений передается <xref:System.Text.RegularExpressions.RegexOptions.IgnoreCase?displayProperty=nameWithType> , это сравнение представляет собой имя без учета регистра. Это первая группа записи.|  
|`(\d+)?`|Совпадение с нулем или одним вхождением один или несколько десятичных цифр. Это вторая группа записи.|  
|`\.`|Соответствует литеральный символ точки.|  
|`([a-z]+`|Соответствовать один или несколько вхождений любого символа от до z. При сравнении регистр не учитывается.|  
|`(\d)*`|Соответствует нулю или нескольким десятичным числам. Одна цифра сопоставленная является четвертой захватываемой группы.|  
|`([a-z]+(\d)*)`|Соответствовать один или несколько букв от до z, следуют ноль, один или несколько десятичных цифр. Это четвертая группа записи.|  
|`$`|В заключение совпадения в конце строки.|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>