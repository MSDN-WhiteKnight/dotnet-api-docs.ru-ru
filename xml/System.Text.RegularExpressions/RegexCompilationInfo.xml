<Type Name="RegexCompilationInfo" FullName="System.Text.RegularExpressions.RegexCompilationInfo">
  <Metadata><Meta Name="ms.openlocfilehash" Value="77167d377303668fef518b19940f6a992292d4cc" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57958212" /></Metadata><TypeSignature Language="C#" Value="public class RegexCompilationInfo" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit RegexCompilationInfo extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Text.RegularExpressions.RegexCompilationInfo" />
  <TypeSignature Language="VB.NET" Value="Public Class RegexCompilationInfo" />
  <TypeSignature Language="C++ CLI" Value="public ref class RegexCompilationInfo" />
  <TypeSignature Language="F#" Value="type RegexCompilationInfo = class" />
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Text.RegularExpressions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Serializable</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет сведения о регулярном выражении, используемые для компиляции регулярного выражения в отдельную сборку.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Массив <xref:System.Text.RegularExpressions.RegexCompilationInfo> объектов передается <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> метод, чтобы предоставить сведения о каждой регулярного выражения для включения в сборку. Каждое скомпилированное регулярное выражение, которое включено в сборку, представляется в виде класс, производный от <xref:System.Text.RegularExpressions.Regex>. Свойства <xref:System.Text.RegularExpressions.RegexCompilationInfo> определение типа, имя класса регулярного выражения, его полное имя (то есть, его пространство имен и имя его типа), шаблон регулярного выражения, дополнительные параметры (например, является ли регулярное выражение без учета регистра) и интервалом времени ожидания, которое указывает, как долго обработчик регулярных выражений должен искать совпадение.  
  
 Можно создать экземпляр <xref:System.Text.RegularExpressions.RegexCompilationInfo> объекта, вызывая его конструктор перегруженный класс.  
  
 ]]></format>
    </remarks>
    <altmember cref="Overload:System.Text.RegularExpressions.Regex.CompileToAssembly" />
    <related type="Article" href="~/docs/standard/base-types/compilation-and-reuse-in-regular-expressions.md">Компиляция и многократное использование</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />.</summary>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">Элементы языка регулярных выражений</related>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fullnamespace" Type="System.String" />
        <Parameter Name="ispublic" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="pattern">Регулярное выражение для компилирования.</param>
        <param name="options">Параметры регулярного выражения для использования при компилировании регулярного выражения.</param>
        <param name="name">Имя типа, представляющего скомпилированное регулярное выражение.</param>
        <param name="fullnamespace">Пространство имен, к которому принадлежит новый тип.</param>
        <param name="ispublic">Значение <see langword="true" />, чтобы сделать скомпилированное регулярное выражение видимым для всех, иначе значение <see langword="false" />.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />, содержащего сведения о регулярном выражении, которое должно быть включено в сборку.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый параметр <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> конструктор напрямую соответствует идентификатору свойство <xref:System.Text.RegularExpressions.RegexCompilationInfo> класса. Поскольку все свойства доступны для чтения и записи, их значения могут также назначаться напрямую.  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Метод создает сборку, содержащую скомпилированные регулярные выражения. Таким образом, не следует указывать <xref:System.Text.RegularExpressions.RegexOptions.Compiled> как одно из значений из `options`.  
  
 Если `ispublic` является `true`, класс скомпилированное регулярное выражение является объявлены открытыми. То есть он может быть создан из кода, который выполняется в любой сборке. Если `ispublic` — `false`, предоставляется класс скомпилированное регулярное выражение `internal` (в C#) или `Friend` (в Visual Basic) специальных возможностей. То есть он может быть создан только из кода, который выполняется в той же сборке, что и класс регулярного выражения.  
  
   
  
## Examples  
 Следующий пример создает и использует скомпилированное регулярное выражение в два этапа.  
  
 На первом шаге Скомпилируйте и выполните приведенный ниже код. <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%2A> Скомпилированного регулярного выражения определяет конструктор, в примере кода. Результат выполнения кода — сборка с именем "FishRegex.dll", который содержит тип скомпилированное регулярное выражение с именем `FishRegex`.  
  
 [!code-csharp[sys.txt.rgxCompInfo#1](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/genFishRegex.cs#1)]
 [!code-vb[sys.txt.rgxCompInfo#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/genFishRegex.vb#1)]  
  
 На втором шаге скомпилировать в следующем примере кода, используя ссылку на "FishRegex.dll" и затем выполнить полученный исполняемый файл. Исполняемый файл соответствует целевой строке, используя `FishRegex` введите, а также отображает сопоставление, группы, группа захвата и индекс совпадения в целевой строке.  
  
 [!code-csharp[sys.txt.rgxCompInfo#2](~/samples/snippets/csharp/VS_Snippets_CLR/sys.txt.rgxCompInfo/cs/useFishRegex.cs#2)]
 [!code-vb[sys.txt.rgxCompInfo#2](~/samples/snippets/visualbasic/VS_Snippets_CLR/sys.txt.rgxCompInfo/vb/useFishRegex.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> — <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> — <see langword="null" />.  
  
-или- 
 <paramref name="name" /> — <see langword="null" />.  
  
-или- 
 <paramref name="fullnamespace" /> — <see langword="null" />.</exception>
        <block subset="none" type="usage"><para>Этот конструктор создает скомпилированное регулярное выражение, используется значение времени ожидания по умолчанию домена приложения, в котором она создается. Если значение времени ожидания определяется для домена приложения, скомпилированное регулярное выражение использует значение <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, который препятствует операции поиска совпадения с шаблоном истечения времени ожидания. Рекомендуемые конструктор для создания скомпилированного регулярного выражения является <see cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />, который позволяет установить интервал времени ожидания.</para></block>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegexCompilationInfo (string pattern, System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string pattern, valuetype System.Text.RegularExpressions.RegexOptions options, string name, string fullnamespace, bool ispublic, valuetype System.TimeSpan matchTimeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (pattern As String, options As RegexOptions, name As String, fullnamespace As String, ispublic As Boolean, matchTimeout As TimeSpan)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; RegexCompilationInfo(System::String ^ pattern, System::Text::RegularExpressions::RegexOptions options, System::String ^ name, System::String ^ fullnamespace, bool ispublic, TimeSpan matchTimeout);" />
      <MemberSignature Language="F#" Value="new System.Text.RegularExpressions.RegexCompilationInfo : string * System.Text.RegularExpressions.RegexOptions * string * string * bool * TimeSpan -&gt; System.Text.RegularExpressions.RegexCompilationInfo" Usage="new System.Text.RegularExpressions.RegexCompilationInfo (pattern, options, name, fullnamespace, ispublic, matchTimeout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="pattern" Type="System.String" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="options" Type="System.Text.RegularExpressions.RegexOptions" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="name" Type="System.String" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="fullnamespace" Type="System.String" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="ispublic" Type="System.Boolean" Index="4" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="matchTimeout" Type="System.TimeSpan" Index="5" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="pattern">Регулярное выражение для компилирования.</param>
        <param name="options">Параметры регулярного выражения для использования при компилировании регулярного выражения.</param>
        <param name="name">Имя типа, представляющего скомпилированное регулярное выражение.</param>
        <param name="fullnamespace">Пространство имен, к которому принадлежит новый тип.</param>
        <param name="ispublic">Значение <see langword="true" />, чтобы сделать скомпилированное регулярное выражение видимым для всех, иначе значение <see langword="false" />.</param>
        <param name="matchTimeout">Интервал времени ожидания по умолчанию для регулярного выражения.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Text.RegularExpressions.RegexCompilationInfo" />, содержащего сведения о регулярном выражении с указанным значение времени ожидания, которое должно быть включено в сборку.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый параметр <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%29> конструктор напрямую соответствует идентификатору свойство <xref:System.Text.RegularExpressions.RegexCompilationInfo> класса. Поскольку все свойства доступны для чтения и записи, их значения могут также назначаться напрямую.  
  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Метод создает сборку, содержащую скомпилированные регулярные выражения. Таким образом, не следует указывать <xref:System.Text.RegularExpressions.RegexOptions.Compiled> как одно из значений из `options`.  
  
 Если `ispublic` является `true`, класс скомпилированное регулярное выражение является объявлены открытыми. То есть он может быть создан из кода, который выполняется в любой сборке. Если `ispublic` — `false`, предоставляется класс скомпилированное регулярное выражение `internal` (в C#) или `Friend` (в Visual Basic) специальных возможностей. То есть он может быть создан только из кода, который выполняется в той же сборке, что и класс регулярного выражения.  
  
 `matchTimeout` Параметр определяет интервал времени ожидания по умолчанию для скомпилированного регулярного выражения. Это значение представляет приблизительное количество времени, которое объект скомпилированное регулярное выражение будет выполняться одной операции сопоставления, прежде чем истечет время ожидания, и обработчик регулярных выражений создает <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> исключения во время его следующей проверки времени . Дополнительные сведения о значение времени ожидания, см. в разделе <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> свойство.  
  
> [!IMPORTANT]
>  Мы рекомендуем всегда указывать значение времени ожидания по умолчанию для скомпилированного регулярного выражения. Библиотека регулярных выражений можно переопределить это значение времени ожидания, передав <xref:System.TimeSpan> значение, представляющее новый интервал времени ожидания в этом перегруженном конструкторе.  
  
   
  
## Examples  
 В следующем примере определяется один скомпилированное регулярное выражение с именем `DuplicateChars` , определяющий два или несколько вхождений тот же символ во входной строке. Скомпилированное регулярное выражение использует интервал ожидания по умолчанию 2 секунды. При выполнении примера, он создает библиотеку классов с именем RegexLib.dll, содержащий скомпилированное регулярное выражение.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 Шаблон регулярного выражения `(\w)\1+` определяется, как показано в следующей таблице.  
  
|Шаблон|Описание|  
|-------------|-----------------|  
|`(\w)`|Соответствие любому словообразующему символу и его назначение первой захватываемой группе.|  
|`\1+`|Сопоставление одного или нескольких вхождений значение первой захватываемой группы.|  
  
 В следующем примере используется `DuplicatedChars` регулярное выражение для обозначения повторяющихся символов в массиве строк. При вызове метода `DuplicatedChars` конструктор, он изменяет интервал времени ожидания 5 секунд.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="name" /> — <see cref="F:System.String.Empty" />.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="pattern" /> — <see langword="null" />.  
  
-или- 
 <paramref name="name" /> — <see langword="null" />.  
  
-или- 
 <paramref name="fullnamespace" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Значение параметра <paramref name="matchTimeout" /> отрицательное, равно нулю или больше, чем приблизительно 24 дня.</exception>
        <altmember cref="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее на то, обладает ли скомпилированное регулярное выражение общей видимостью.</summary>
        <value>Значение <see langword="true" />, если регулярное выражение обладает общей видимостью, иначе значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если <xref:System.Text.RegularExpressions.RegexCompilationInfo.IsPublic%2A> свойство `false`, определения текущим экземпляром класса регулярного выражения могут быть созданы только код, выполняющийся в сборку, содержащую класс. Тем не менее так как <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A?displayProperty=nameWithType> метод генерирует сборку, содержащую скомпилированные регулярные выражения и не допускает дополнительный код для добавления, как правило, нет причин для присвоения этому свойству значение `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchTimeout">
      <MemberSignature Language="C#" Value="public TimeSpan MatchTimeout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan MatchTimeout" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberSignature Language="VB.NET" Value="Public Property MatchTimeout As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan MatchTimeout { TimeSpan get(); void set(TimeSpan value); };" />
      <MemberSignature Language="F#" Value="member this.MatchTimeout : TimeSpan with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает интервал времени ожидания по умолчанию регулярного выражения.</summary>
        <value>Максимальный интервал времени по умолчанию, который может пройти в операции сравнения с шаблоном, прежде чем возникнет исключение <see cref="T:System.Text.RegularExpressions.RegexMatchTimeoutException" />, или <see cref="F:System.Text.RegularExpressions.Regex.InfiniteMatchTimeout" />, если контроль времени ожидания отключен.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout%2A> Свойство определяет интервал времени ожидания по умолчанию для скомпилированного регулярного выражения. Это значение представляет приблизительное количество времени, которое скомпилированное регулярное выражение будет выполняться одной операции сопоставления, прежде чем истечет время ожидания, и обработчик регулярных выражений создает <xref:System.Text.RegularExpressions.RegexMatchTimeoutException> исключения во время его следующей проверке истечения времени.  
  
> [!IMPORTANT]
>  Мы рекомендуем всегда указывать значение времени ожидания по умолчанию для скомпилированного регулярного выражения. Библиотека регулярных выражений можно переопределить это значение времени ожидания, передав <xref:System.TimeSpan> значение, представляющее новый интервал времени ожидания для конструктора класса скомпилированное регулярное выражение.  
  
 Можно назначить значение времени ожидания по умолчанию <xref:System.Text.RegularExpressions.RegexCompilationInfo> объекта в любой из следующих способов:  
  
-   Путем вызова <xref:System.AppDomain.SetData%2A?displayProperty=nameWithType> с указанием строковым представлением <xref:System.TimeSpan> значение для свойства «REGEX_DEFAULT_MATCH_TIMEOUT».  
  
-   Путем вызова <xref:System.Text.RegularExpressions.RegexCompilationInfo.%23ctor%28System.String%2CSystem.Text.RegularExpressions.RegexOptions%2CSystem.String%2CSystem.String%2CSystem.Boolean%2CSystem.TimeSpan%29> конструктор и указав значение для `matchTimeout` параметра.  
  
-   Установив значение этого свойства.  
  
 Чтобы задать интервал времени ожидания разумным, учитывайте следующие факторы:  
  
-   Длина и сложность шаблон регулярного выражения. Длинные и более сложные регулярные выражения требуется больше времени, чем короче и проще, из них.  
  
-   Загрузки ожидаемый компьютеров. Обработка занимает больше времени, в системах с высокой загрузкой ЦП и памяти.  
  
   
  
## Examples  
 В следующем примере определяется один скомпилированное регулярное выражение с именем `DuplicateChars` , определяющий два или несколько вхождений тот же символ во входной строке. Скомпилированное регулярное выражение использует интервал ожидания по умолчанию 2 секунды. При выполнении примера, он создает библиотеку классов с именем RegexLib.dll, содержащий скомпилированное регулярное выражение.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1.cs#1)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1.vb#1)]  
  
 Шаблон регулярного выражения `(\w)\1+` определяется, как показано в следующей таблице.  
  
|Шаблон|Описание|  
|-------------|-----------------|  
|`(\w)`|Соответствие любому словообразующему символу и его назначение первой захватываемой группе.|  
|`\1+`|Сопоставление одного или нескольких вхождений значение первой захватываемой группы.|  
  
 В следующем примере используется `DuplicatedChars` регулярное выражение для обозначения повторяющихся символов в массиве строк. При вызове метода `DuplicatedChars` конструктор, он изменяет интервал времени ожидания 5 секунд.  
  
 [!code-csharp[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/cs/example1a.cs#2)]
 [!code-vb[System.Text.RegularExpressions.RegexCompilationInfo.MatchTimeout#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.text.regularexpressions.regexcompilationinfo.matchtimeout/vb/example1a.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Text.RegularExpressions.RegexCompilationInfo.#ctor(System.String,System.Text.RegularExpressions.RegexOptions,System.String,System.String,System.Boolean,System.TimeSpan)" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя типа, представляющего скомпилированное регулярное выражение.</summary>
        <value>Имя нового типа.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo> Класс используется для определения скомпилированное регулярное выражение, которое представляется как класс, производный от <xref:System.Text.RegularExpressions.Regex>. <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> Свойство определяет имя класса типа регулярного выражения и <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> и <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> вместе определяют его полное имя.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значением этого свойства является <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Значением для этого свойства является пустая строка.</exception>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает пространство имен, к которому принадлежит новый тип.</summary>
        <value>Пространство имен нового типа.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo> Класс используется для определения скомпилированное регулярное выражение, которое представляется как класс, производный от <xref:System.Text.RegularExpressions.Regex>. <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> Свойство определяет пространство имен, содержащее тип скомпилированное регулярное выражение и <xref:System.Text.RegularExpressions.RegexCompilationInfo.Namespace%2A> и <xref:System.Text.RegularExpressions.RegexCompilationInfo.Name%2A> вместе определяют его полное имя.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значением этого свойства является <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="public System.Text.RegularExpressions.RegexOptions Options { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Text.RegularExpressions.RegexOptions Options" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberSignature Language="VB.NET" Value="Public Property Options As RegexOptions" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::RegularExpressions::RegexOptions Options { System::Text::RegularExpressions::RegexOptions get(); void set(System::Text::RegularExpressions::RegexOptions value); };" />
      <MemberSignature Language="F#" Value="member this.Options : System.Text.RegularExpressions.RegexOptions with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Text.RegularExpressions.RegexOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает параметры для использования при компилировании регулярного выражения.</summary>
        <value>Побитовое сочетание значений перечисления.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> Метод создает сборку, содержащую скомпилированные регулярные выражения. Таким образом, нет необходимости указывать <xref:System.Text.RegularExpressions.RegexOptions.Compiled> как одно из значений этого свойства. Если он имеется, <xref:System.Text.RegularExpressions.RegexOptions.Compiled> параметр игнорируется.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pattern">
      <MemberSignature Language="C#" Value="public string Pattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Pattern" />
      <MemberSignature Language="DocId" Value="P:System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberSignature Language="VB.NET" Value="Public Property Pattern As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Pattern { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Pattern : string with get, set" Usage="System.Text.RegularExpressions.RegexCompilationInfo.Pattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Text.RegularExpressions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает регулярное выражение для компилирования.</summary>
        <value>Регулярное выражение для компилирования.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> Свойство может содержать любое допустимое регулярное выражение. Если значение <xref:System.Text.RegularExpressions.RegexCompilationInfo.Pattern%2A> свойство не является синтаксически правильно регулярное выражение, вызов <xref:System.Text.RegularExpressions.Regex.CompileToAssembly%2A> вызывает метод <xref:System.ArgumentException>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значением этого свойства является <see langword="null" />.</exception>
        <related type="Article" href="~/docs/standard/base-types/regular-expressions.md">Регулярные выражения в .NET Framework</related>
        <related type="Article" href="~/docs/standard/base-types/regular-expression-language-quick-reference.md">Элементы языка регулярных выражений</related>
      </Docs>
    </Member>
  </Members>
</Type>