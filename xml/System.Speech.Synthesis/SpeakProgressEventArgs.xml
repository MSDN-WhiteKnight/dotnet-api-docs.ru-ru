<Type Name="SpeakProgressEventArgs" FullName="System.Speech.Synthesis.SpeakProgressEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5ad1b44ffb76626304234c6c3814b274fa5c085a" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58691461" /></Metadata><TypeSignature Language="C#" Value="public class SpeakProgressEventArgs : System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SpeakProgressEventArgs extends System.Speech.Synthesis.PromptEventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Speech.Synthesis.SpeakProgressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class SpeakProgressEventArgs&#xA;Inherits PromptEventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpeakProgressEventArgs : System::Speech::Synthesis::PromptEventArgs" />
  <TypeSignature Language="F#" Value="type SpeakProgressEventArgs = class&#xA;    inherit PromptEventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Speech</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Speech.Synthesis.PromptEventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Возвращает данные из события <see cref="E:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Экземпляр <xref:System.Speech.Synthesis.SpeakProgressEventArgs> создается, когда <xref:System.Speech.Synthesis.SpeechSynthesizer> объекта вызывает <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> событий. <xref:System.Speech.Synthesis.SpeechSynthesizer> Генерирующий данное событие для каждого нового слова, он говорит, введите в командной строке с помощью любого из <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakAsync%2A>, <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsml%2A>, или <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakSsmlAsync%2A> методы.  
  
 Возвращаемые данные основана на речи синтеза Markup Language (SSML), создающий код. Значения, возвращаемые для <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> включают пробелы и символы и содержимое тегов SSML, создаваемые в коде.  
  
   
  
## Examples  
 В следующем примере демонстрируется сведения, которые можно получить <xref:System.Speech.Synthesis.SpeakProgressEventArgs>. Обратите внимание как <xref:System.Speech.Synthesis.PromptBuilder.StartParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.EndParagraph%2A>, <xref:System.Speech.Synthesis.PromptBuilder.StartSentence%2A>, и <xref:System.Speech.Synthesis.PromptBuilder.EndSentence%2A> методы изменяют <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> путем их добавления  **\<p >**,  **\</p >**,  **\<s >**, и  **\</s >** тегов, чтобы созданный SSML. Кроме того существуют две записи в выходных данных для «30%», один для каждого слова в произнести этой строки чисел (30%). <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> И <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> одинаковы для каждой записи и представления символов «30%. Тем не менее <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> изменяется, отражая произношения слов «тридцать» и «percent», <xref:System.Speech.Synthesis.SpeechSynthesizer>.  
  
```csharp  
using System;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToWaveFile(@"C:\test\weather.wav");  
  
        // Create a SoundPlayer instance to play the output audio file.  
        System.Media.SoundPlayer m_SoundPlayer =  
          new System.Media.SoundPlayer(@"C:\test\weather.wav");  
  
        // Build a prompt containing a paragraph and two sentences.  
        PromptBuilder builder = new PromptBuilder(  
          new System.Globalization.CultureInfo("en-US"));  
        builder.StartParagraph();  
        builder.StartSentence();  
        builder.AppendText(  
          "The weather forecast for today is partly cloudy with some sun breaks.");  
        builder.EndSentence();  
        builder.StartSentence();  
        builder.AppendText(  
          "Tonight's weather will be cloudy with a 30% chance of showers.");  
        builder.EndSentence();  
        builder.EndParagraph();  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
        m_SoundPlayer.Play();  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("CharPos: {0}   CharCount: {1}   AudioPos: {2}    \"{3}\"",  
        e.CharacterPosition, e.CharacterCount, e.AudioPosition, e.Text);  
    }  
  }  
}  
  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AudioPosition">
      <MemberSignature Language="C#" Value="public TimeSpan AudioPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.TimeSpan AudioPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AudioPosition As TimeSpan" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property TimeSpan AudioPosition { TimeSpan get(); };" />
      <MemberSignature Language="F#" Value="member this.AudioPosition : TimeSpan" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.TimeSpan</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает положение события в аудио.</summary>
        <value>Возвращает позицию события в звуковом выводном потоке.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Нормализует числа для слов, которые соответствуют как будут звучать номер. Например синтезатор говорит номер «4003» как «три тысячи четыре». Он выдает <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> событий для каждого из слов и возвращает <xref:System.Speech.Synthesis.SpeakProgressEventArgs.AudioPosition%2A> для каждого слова.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterCount">
      <MemberSignature Language="C#" Value="public int CharacterCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterCount" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterCount : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает количество символов в слове, которое было произнесено непосредственно перед возникновением события.</summary>
        <value>Возвращает количество символов в слове, которое было произнесено непосредственно перед возникновением события.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Нормализует числа для слов, которые соответствуют как будут звучать номер. Например синтезатор говорит номер «4003» как «три тысячи четыре». Он выдает <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> событий для каждого произнесенного слова. Тем не менее <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterCount%2A> одинаков для каждой из трех слов. В этом случае это число символов в число «4003» в тексте командной строке четыре.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterPosition">
      <MemberSignature Language="C#" Value="public int CharacterPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CharacterPosition" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CharacterPosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int CharacterPosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.CharacterPosition : int" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает число символов и и пробелов с начала запроса до позиции перед первой буквой только что произнесенного слова.</summary>
        <value>Возвращает число символов и и пробелов с начала запроса до позиции перед первой буквой только что произнесенного слова.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> Содержит число символов в XML-теги, включая их включающего скобки. При использовании любой из <xref:System.Speech.Synthesis.PromptBuilder.AppendText%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithAlias%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithHint%2A>, <xref:System.Speech.Synthesis.PromptBuilder.AppendSsmlMarkup%2A>, или <xref:System.Speech.Synthesis.PromptBuilder.AppendTextWithPronunciation%2A> методы, его содержимое добавляется на запрос SSML, который включает в себя Открытие и закрытие `speak` элементов. Открытие `speak` элемент добавляет смещение 82 символов и пробелов, <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> всех слов и буквы в строке. Например, в приведенном ниже фрагменте <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> первого слова «this», используется 82.  
  
```csharp  
builder.AppendText("This is a test");  
Synthesizer.Speak(builder);  
```  
  
 В приведенном выше примере <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> слово «test» — 92. В следующем фрагменте <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> слова «test» составляет 23 символов более поздней версии (115), так как открытие  **\<prosody шаг = «высокий» >** тег, предшествующем содержит 23 символы и пробелы (два escape символы "\\", не учитываются).  
  
```csharp  
builder.AppendSsmlMarkup("This is a <prosody pitch=\"high\"> test </prosody>.");   
Synthesizer.Speak(builder);  
```  
  
 Если вы используете <xref:System.Speech.Synthesis.PromptBuilder.AppendSsml%2A> методы для добавления содержимого в командной строке, указав файл, открывающий `xml` объявления и `speak` элементы в файле, не используется или не учитываются. Первый символ в файле после открывающего `speak` тег будет в позиции 82 в случае первого содержимого в командной строке.  
  
 В отличие от этого, строковый параметр <xref:System.Speech.Synthesis.SpeechSynthesizer.Speak%2A> метод адреса не добавляются в запрос SSML перед произносимое. Таким образом <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> первого слова «this», в следующем фрагменте равно нулю.  
  
```csharp  
Synthesizer.Speak("This is a test.");  
```  
  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Нормализует числа для слов, которые соответствуют как будут звучать номер. Например синтезатор говорит номер «4003» как «три тысячи четыре». Он выдает <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> событий для каждого из трех слов. Тем не менее <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> одинаков для каждой из трех слов. Представляет позицию перед первым символом числа «4003» в тексте запроса.  
  
   
  
## Examples  
 В следующем примере создается <xref:System.Speech.Synthesis.PromptBuilder> и добавляет SSML содержимое XML-файл с помощью <xref:System.Xml.XmlReader>. В примере показан вывод речи для воспроизведения WAV-файл. Содержимое XML-файл, содержащий разметку SSML отображается ниже в примере кода.  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create a path to the file that contains SSML.  
        string weatherFile = Path.GetFullPath("c:\\test\\Weather.ssml");  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
  
        if (File.Exists(weatherFile))  
        {  
          XmlReader reader = XmlReader.Create(weatherFile);  
          builder.AppendSsml(reader);  
          reader.Close();  
        }  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress: {0} {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
  
```  
  
```xml  
<!-- The following are the contents of the file Weather.ssml.   
Note that because of the <p> tag and the space that follows it,   
that the character position of the first word "The" will be 86. -->  
  
<?xml version="1.0" encoding="ISO-8859-1"?>  
<speak version="1.0"  
 xmlns="http://www.w3.org/2001/10/synthesis"  
 xml:lang="en-US">  
  
  <p> The weather forecast for today is partly cloudy with   
some sun breaks. </p>  
  
  <break strength="medium" />  
  
  <p> Tonight's weather will be cloudy with a 30% chance of   
showers. </p>  
  
</speak>  
  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Text : string" Usage="System.Speech.Synthesis.SpeakProgressEventArgs.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Speech</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>текст, который был только что произнесен, когда было создано событие.</summary>
        <value>Возвращает текст, который был только что произнесен, когда было создано событие.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Speech.Synthesis.SpeechSynthesizer> Нормализует числа для слов, которые соответствуют как будут звучать номер. Например синтезатор говорит номер «4003» как «три тысячи четыре». Он выдает <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> событий для каждого произнесенного слова. Тем не менее <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> одинаков для каждой из трех слов. Представляет собой текст «4003» в командной строке.  
  
   
  
## Examples  
 В следующем примере показано, как <xref:System.Speech.Synthesis.SpeechSynthesizer.SpeakProgress> отчеты о событиях <xref:System.Speech.Synthesis.SpeakProgressEventArgs.CharacterPosition%2A> и <xref:System.Speech.Synthesis.SpeakProgressEventArgs.Text%2A> свойства для строк, которые содержат числа.  
  
```csharp  
using System;  
using System.Xml;  
using System.IO;  
using System.Speech.Synthesis;  
  
namespace SampleSynthesis  
{  
  class Program  
  {  
    static void Main(string[] args)  
    {  
  
      // Initialize a new instance of the SpeechSynthesizer.  
      using (SpeechSynthesizer synth = new SpeechSynthesizer())  
      {  
  
        // Configure the audio output.   
        synth.SetOutputToDefaultAudioDevice();  
  
        // Create an XML Reader from the file, create a PromptBuilder and   
        // append the XmlReader.  
        PromptBuilder builder = new PromptBuilder();  
        builder.AppendText("4003");  
  
        // Add a handler for the SpeakProgress event.  
        synth.SpeakProgress +=  
          new EventHandler<SpeakProgressEventArgs>(synth_SpeakProgress);  
  
        // Speak the prompt and play back the output file.  
        synth.Speak(builder);  
      }  
  
      Console.WriteLine();  
      Console.WriteLine("Press any key to exit...");  
      Console.ReadKey();  
    }  
  
    // Write each word and its character position to the console.  
    static void synth_SpeakProgress(object sender, SpeakProgressEventArgs e)  
    {  
      Console.WriteLine("Speak progress -    Character position:  {0}    Text:  {1}",  
        e.CharacterPosition, e.Text);  
    }  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>