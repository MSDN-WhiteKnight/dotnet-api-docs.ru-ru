<Type Name="ExponentialEase" FullName="System.Windows.Media.Animation.ExponentialEase">
  <Metadata><Meta Name="ms.openlocfilehash" Value="90a5fd71cdc80de18351b4cbee452e20bf72e6d9" /><Meta Name="ms.sourcegitcommit" Value="42a3c35677e9d87eeb503607ae50c9d39827d414" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="12/17/2018" /><Meta Name="ms.locfileid" Value="53474090" /></Metadata><TypeSignature Language="C#" Value="public class ExponentialEase : System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExponentialEase extends System.Windows.Media.Animation.EasingFunctionBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.Animation.ExponentialEase" />
  <TypeSignature Language="VB.NET" Value="Public Class ExponentialEase&#xA;Inherits EasingFunctionBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExponentialEase : System::Windows::Media::Animation::EasingFunctionBase" />
  <TypeSignature Language="F#" Value="type ExponentialEase = class&#xA;    inherit EasingFunctionBase" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.Animation.EasingFunctionBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Представляет функцию плавности, создающую анимацию, в которой ускорение и замедление задается с помощью экспоненциальной формулы.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вы можете управлять ли анимация ускоряется, замедляется или другого, указав <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>. Приведенный ниже график показывает различные значения <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A> где *f*(*t*) обозначает ход анимации и *t* представляет время.  
  
 ![Графы exponentialease при различных значениях easingmode. ] (~/add/media/exponentialease-graph.png "Графы exponentialease при различных значениях easingmode.")  
  
 Формула, используемая для этой функции заключается в следующем.  
  
 ![Математическая формула для ExponentialEase](~/add/media/exponentialease-formula.png "математическая формула для ExponentialEase")  
  
 С помощью формулы, выше, приведенный ниже график показывает влияние несколько разных значений <xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A> свойство:  
  
 ![Экспоненциальные графы Ease для трех значений показателя степени](~/add/media/expo-easeproperty.png "Экспоненциальные графы Ease для трех значений показателя степени")  
  
 Существует несколько других функций плавности помимо <xref:System.Windows.Media.Animation.ExponentialEase>.
Помимо использования функций плавности, входящих в среду выполнения, можно создать собственные функции плавности путем наследования от <xref:System.Windows.Media.Animation.EasingFunctionBase>.  
  
## <a name="xaml-object-element-usage"></a>Использование элемента объекта XAML  
  
```xaml
<ExponentialEase .../>  
```  
  
   
  
## Examples  
 В следующем примере применяется <xref:System.Windows.Media.Animation.ExponentialEase> функцию для реалистичной анимации <xref:System.Windows.Media.Animation.DoubleAnimation> для создания decelerating анимации.  
  
 [!code-xaml[ExponentialEase#ExponentialEase](~/samples/snippets/csharp/VS_Snippets_Wpf/exponentialease/CS/window1.xaml#exponentialease)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExponentialEase ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ExponentialEase();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Windows.Media.Animation.ExponentialEase" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="exponentialEase.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает новый экземпляр производного класса <see cref="T:System.Windows.Freezable" />. При создании производного класса вы должны переопределить этот метод.</summary>
        <returns>Новый экземпляр.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Классы анимации косвенно наследовать от <xref:System.Windows.Freezable>. По этой причине необходимо переопределить <xref:System.Windows.Media.Animation.BackEase.CreateInstanceCore%2A> метод для создания пользовательской анимации объекта.  
  
   
  
## Examples  
 Пример типичной реализации <xref:System.Windows.Freezable.CreateInstanceCore%2A>.  
  
 [!code-csharp[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/csharp/VS_Snippets_Wpf/freezablesample_procedural/CSharp/freezablesample.cs#createinstancecoreexample)]
 [!code-vb[freezablesample_procedural#CreateInstanceCoreExample](~/samples/snippets/visualbasic/VS_Snippets_Wpf/freezablesample_procedural/visualbasic/freezablesample.vb#createinstancecoreexample)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EaseInCore">
      <MemberSignature Language="C#" Value="protected override double EaseInCore (double normalizedTime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance float64 EaseInCore(float64 normalizedTime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.Animation.ExponentialEase.EaseInCore(System.Double)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function EaseInCore (normalizedTime As Double) As Double" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override double EaseInCore(double normalizedTime);" />
      <MemberSignature Language="F#" Value="override this.EaseInCore : double -&gt; double" Usage="exponentialEase.EaseInCore normalizedTime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normalizedTime" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="normalizedTime">Нормализованное время (ход выполнения) анимации.</param>
        <summary>Предоставляет часть логики функции для реалистичной анимации, которую можно переопределить для создания режима <see cref="F:System.Windows.Media.Animation.EasingMode.EaseIn" /> настраиваемой функции для реалистичной анимации.</summary>
        <returns>Значение типа double, представляющее преобразованный ход выполнения.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод преобразует Нормированное время для управления скоростью анимации для <xref:System.Windows.Media.Animation.EasingMode.EaseIn> вариант <xref:System.Windows.Media.Animation.EasingFunctionBase.EasingMode%2A>.  
  
 Необходимо только указать функции плавности для <xref:System.Windows.Media.Animation.EasingMode.EaseIn> прописные, так как реализация <xref:System.Windows.Media.Animation.EasingFunctionBase.Ease%2A> метод преобразования `normalizedTime` для <xref:System.Windows.Media.Animation.EasingMode.EaseOut> и <xref:System.Windows.Media.Animation.EasingMode.EaseInOut> случаев.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Exponent">
      <MemberSignature Language="C#" Value="public double Exponent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Exponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.Animation.ExponentialEase.Exponent" />
      <MemberSignature Language="VB.NET" Value="Public Property Exponent As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double Exponent { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.Exponent : double with get, set" Usage="System.Windows.Media.Animation.ExponentialEase.Exponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает экспоненту, используемую для определения интерполяции анимации.</summary>
        <value>Экспонента, используемая для определения интерполяции анимации. Значение по умолчанию — 2.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [!INCLUDE[DP_ID_field_label](~/includes/dp-id-field-label-md.md)] <xref:System.Windows.Media.Animation.ExponentialEase.ExponentProperty>  
  
 Формула, используемая с <xref:System.Windows.Media.Animation.ExponentialEase> представляет собой следующее.  
  
 ![Математическая формула для ExponentialEase](~/add/media/exponentialease-formula.png "математическая формула для ExponentialEase")  
  
 С помощью указанной выше формуле, приведенный ниже график показывает влияние несколько разных значений <xref:System.Windows.Media.Animation.ExponentialEase.Exponent%2A> свойство:  
  
 ![Экспоненциальные графы Ease для трех значений показателя степени](~/add/media/expo-easeproperty.png "Экспоненциальные графы Ease для трех значений показателя степени")  
  
<a name="xamlAttributeUsage_Exponent"></a>   
## <a name="xaml-attribute-usage"></a>Использование атрибута XAML  
  
```  
<object Exponent="double" .../>  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExponentProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty ExponentProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty ExponentProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.Animation.ExponentialEase.ExponentProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly ExponentProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ ExponentProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable ExponentProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.Animation.ExponentialEase.ExponentProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет свойство зависимостей <see cref="P:System.Windows.Media.Animation.ExponentialEase.Exponent" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>