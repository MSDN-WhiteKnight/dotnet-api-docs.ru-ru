<Type Name="IVsaCodeItem" FullName="Microsoft.Vsa.IVsaCodeItem">
  <Metadata><Meta Name="ms.openlocfilehash" Value="74ba0baff0b9d3068b698095aeed607c2dada128" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55393446" /></Metadata><TypeSignature Language="C#" Value="public interface IVsaCodeItem : Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IVsaCodeItem implements class Microsoft.Vsa.IVsaItem" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Vsa.IVsaCodeItem" />
  <TypeSignature Language="VB.NET" Value="Public Interface IVsaCodeItem&#xA;Implements IVsaItem" />
  <TypeSignature Language="C++ CLI" Value="public interface class IVsaCodeItem : Microsoft::Vsa::IVsaItem" />
  <TypeSignature Language="F#" Value="type IVsaCodeItem = interface&#xA;    interface IVsaItem" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Vsa</AssemblyName>
    <AssemblyVersion>7.0.5000.0</AssemblyVersion>
    <AssemblyVersion>8.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Microsoft.Vsa.IVsaItem</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Obsolete("Use of this type is not recommended because it is being deprecated in Visual Studio 2005; there will be no replacement for this feature. Please see the ICodeCompiler documentation for additional help.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("E0C0FFE7-7eea-4ee5-b7e4-0080c7eb0b74")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Представляет элемент кода, компилируемого обработчиком сценариев.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[

## Remarks  
Заданный элемент кода может содержать классы, модули или другие исходного текста.

Разрешения не требуются для вызова любых элементов интерфейса IVsaCodeItem не требуется разрешений.

Обработчик сценариев реализует этот интерфейс для добавления элементов кода.

]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddEventSource">
      <MemberSignature Language="C#" Value="public void AddEventSource (string eventSourceName, string eventSourceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddEventSource(string eventSourceName, string eventSourceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AddEventSource(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddEventSource (eventSourceName As String, eventSourceType As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddEventSource(System::String ^ eventSourceName, System::String ^ eventSourceType);" />
      <MemberSignature Language="F#" Value="abstract member AddEventSource : string * string -&gt; unit" Usage="iVsaCodeItem.AddEventSource (eventSourceName, eventSourceType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
        <Parameter Name="eventSourceType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Программное имя источника события.</param>
        <param name="eventSourceType">Имя типа источника события.</param>
        <summary>Добавляет источник события в элемент кода. Элемент кода использует источник события для подключения события к именованному источнику события посредством вызова метода IVsaSite.GetEventSourceInstance, реализуемого ведущим приложением.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Обработчик скриптов использует сведения, предоставленные методом AddEventSource для подключения события к именованному источнику события. Источники событий получаются путем вызова метода IVsaSite.GetEventSourceInstance, реализуемого ведущим. Метод AddEventSource создает класс, который обрабатывает события, вызванные предоставленым узлом объектом.

> [!NOTE]
> Обработчик сценариев JScript .NET не поддерживает этот метод. В случаях, когда обработчик JScript .NET необходимо подключить событие это необходимо сделать с помощью глобального элемента. Вместо источников событий, обработчик JScript .NET использует AppGlobal типов элементов. Дополнительные сведения см.


В элементе кода можно получить доступ к объект источника события по имени, и после обращения можно написать обработчики событий для объекта. Тип источника событий передается в виде строки, а не как объект типа для облегчения реализации источников событий по неуправляемым основным приложениям.

Компилятор использует параметр eventSourceType для привязки к методам, предоставляемым типом. Позже он также используется, когда обработчик скриптов вызывает метод IVsaSite.GetEventSourceInstance, чтобы запросить экземпляр типа объекта.

Дополнительные сведения о механизмах подключения событий для обработчика сценариев см. в разделе метода IVsaSite.GetEventSourceInstance.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendSourceText">
      <MemberSignature Language="C#" Value="public void AppendSourceText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AppendSourceText(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.AppendSourceText(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendSourceText (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendSourceText(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member AppendSourceText : string -&gt; unit" Usage="iVsaCodeItem.AppendSourceText text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Текст, который необходимо добавить к элементу кода.</param>
        <summary>Добавляет заданный текст в конец элемента кода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Добавленный исходный текст не проходит проверку. По этой причине ошибки, если таковые имеются, обнаружатся при следующем вызове метода IVsaEngine.Compile.

Добавленный исходный текст предоставляется в виде одной строки. Следует необходимости форматирования строки, необходимо указать это самостоятельно.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CodeDOM">
      <MemberSignature Language="C#" Value="public System.CodeDom.CodeObject CodeDOM { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.CodeDom.CodeObject CodeDOM" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CodeDOM As CodeObject" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::CodeDom::CodeObject ^ CodeDOM { System::CodeDom::CodeObject ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CodeDOM : System.CodeDom.CodeObject" Usage="Microsoft.Vsa.IVsaCodeItem.CodeDOM" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.CodeDom.CodeObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает модель DOM кода (CodeDOM), представленную в элементе кода.</summary>
        <value>CodeDOM для элемента кода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Свойство CodeDOM обычно создается как часть шага компиляции обработчика сценариев, поэтому он не действует только до после вызова метода IVsaEngine.Compile. Возможно, некоторые реализации VSA может предоставить CodeDOM динамически, без необходимости явного шага компиляции, но узлы нельзя полагаться на это поведение. Некоторые обработчики сценариев, например, обработчик сценариев JScript .NET, не поддерживают это поведение.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEventSource">
      <MemberSignature Language="C#" Value="public void RemoveEventSource (string eventSourceName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveEventSource(string eventSourceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Vsa.IVsaCodeItem.RemoveEventSource(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveEventSource (eventSourceName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveEventSource(System::String ^ eventSourceName);" />
      <MemberSignature Language="F#" Value="abstract member RemoveEventSource : string -&gt; unit" Usage="iVsaCodeItem.RemoveEventSource eventSourceName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventSourceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventSourceName">Программное имя удаляемого источника события.</param>
        <summary>Удаляет заданный источник события из элемента кода.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Удаление источника события не приводит к удалению базовых обработчик событий из исходного текста. Вместо этого события больше не вызывают уведомления для обработчика событий. Таким образом вы получите ошибку компилятора, если удалить источник событий, но основная функция остается в исходном коде.

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceText">
      <MemberSignature Language="C#" Value="public string SourceText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SourceText" />
      <MemberSignature Language="DocId" Value="P:Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberSignature Language="VB.NET" Value="Public Property SourceText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SourceText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SourceText : string with get, set" Usage="Microsoft.Vsa.IVsaCodeItem.SourceText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Vsa</AssemblyName>
        <AssemblyVersion>7.0.5000.0</AssemblyVersion>
        <AssemblyVersion>8.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Задает или возвращает текст указанного элемента кода, включая автоматически созданный код (если он имеется).</summary>
        <value>Исходный текст элемента кода.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  
Когда это свойство задано, текст не проходит проверку. По этой причине ошибки, если таковые имеются, обнаружатся при следующем вызове метода IVsaEngine.Compile.

Возвращает исходный текст в одной большой строки, включая символы форматирования, например каретки возвращает свойство SourceText.

Чтобы получить это свойство ядро необходимо не был закрыт. Не был закрыт, чтобы задать это свойство в модуле, а ядро не должна быть запущена.

]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>