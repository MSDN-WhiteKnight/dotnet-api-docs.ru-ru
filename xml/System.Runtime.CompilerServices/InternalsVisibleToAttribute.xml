<Type Name="InternalsVisibleToAttribute" FullName="System.Runtime.CompilerServices.InternalsVisibleToAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="74b4ad010e7aacda9354d35c92864c58b90a0987" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58703496" /></Metadata><TypeSignature Language="C#" Value="public sealed class InternalsVisibleToAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit InternalsVisibleToAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class InternalsVisibleToAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class InternalsVisibleToAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type InternalsVisibleToAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Assembly, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Задает, что типы, видимые обычно только в пределах текущей сборки, являются видимыми для заданной сборки.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, типы и члены, практически `internal` или `private protected` области (в C#) и `Friend` и `Private Protected` области (в Visual Basic) отображаются только в сборке, в котором они определены. <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> Атрибут делает их также видимым типам в указанной сборке, которая называется дружественной сборки. Это относится только к `internal` (`Friend` в VB) или `private protected`(`Private Protected` в VB) методы, но не `private` те, которые.
  
 Атрибут применяется на уровне сборки. Это означает, что он может быть включено в начале файла исходного кода, или он может быть включено в файл AssemblyInfo в проекте Visual Studio. Атрибут используется для указания одного дружественной сборки, можно получить доступ к внутренним типам и членам текущей сборки. Несколько дружественных сборок можно определить двумя способами. Они могут отображаться как отдельные атрибуты уровня сборки, как показано в следующем примере.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple1.cs#3)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple1.vb#3)]  
  
 Они также могут отображаться с помощью отдельных <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> теги, но один `assembly` ключевое слово, как показано следующем примере.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/multiple2.cs#4)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/multiple2.vb#4)]  
  
 Дружественная сборка идентифицируется по <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> конструктор. В текущей сборке и дружественной сборки должны быть без знака или обе сборки должны быть подписаны строгим именем.  
  
 Если обе сборки без знака, `assemblyName` аргумент состоит из имени дружественной сборки, указан без расширения имени пути или файловом каталога.  
  
 Если обе сборки должны быть подписаны строгим именем, аргумент <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> конструктор должен состоять из имени сборки без его каталог путь или расширение имени файла, а также полного открытого ключа (и не маркер открытого ключа). Для получения полного открытого ключа сборки со строгими именами, см. в разделе [Получение полного открытого ключа](#Key) разделе этой статьи. Дополнительные сведения об использовании <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> со сборками со строгими именами, см. в разделе <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> конструктор.  
  
 Не указывайте значения для <xref:System.Reflection.AssemblyName.CultureInfo%2A>, <xref:System.Reflection.AssemblyName.Version%2A>, или <xref:System.Reflection.AssemblyName.ProcessorArchitecture%2A> поле в аргументе; компиляторы Visual Basic, C# и C++ помечено как ошибку компилятора. При использовании компилятора, не обрабатывает его как ошибку (такие как [ассемблера IL (ILAsm.exe)](~/docs/framework/tools/ilasm-exe-il-assembler.md)) и сборки со строгими именами, <xref:System.MethodAccessException> исключение создается при первом обращении к заданной дружественной сборки сборка, содержащая <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> атрибута.  
  
 Дополнительные сведения об использовании этого атрибута см. в разделах:  
  
-   [Дружественные сборки (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Дружественные сборки](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
<a name="Key"></a>   
## <a name="getting-the-full-public-key"></a>Получение полного открытого ключа  
 Можно использовать [средство строгих имен (Sn.exe)](~/docs/framework/tools/sn-exe-strong-name-tool.md) для получения полного открытого ключа из файла со строгим именем ключа (SNK). Чтобы сделать это, выполните следующие действия:  
  
1.  Извлеките открытый ключ из файла ключа со строгим именем в отдельный файл:  
  
     **Sn -p***snk_file* *outfile*   
  
2.  Для отображения полного открытого ключа на консоль:  
  
     **Sn - tp***outfile*  
  
3.  Скопируйте и вставьте значение полного открытого ключа в исходном коде.  
  
## <a name="compiling-the-friend-assembly-with-c"></a>Компиляция дружественной сборки с помощью C#  
 Если вы используете компилятор C# для компиляции дружественной сборки, необходимо явно указать имя выходного файла (.exe или .dll) с помощью **/out** параметр компилятора. Это необходимо потому, что компилятор еще не создал имя сборки, формируемой во время привязки к внешним ссылкам. **/Out** параметр компилятора является необязательным для компилятора Visual Basic и соответствующих **-out** или **-o** не следует использовать параметр компилятора при компиляции friend сборки с F# компилятора.  
  
## <a name="compiling-the-friend-assembly-with-c"></a>Компиляция дружественной сборки с помощью C++  
 В C++, чтобы сделать внутренние элементы, включаемые <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> атрибут доступным для дружественной сборки, необходимо использовать `as_friend` атрибут в директиве C++. Дополнительные сведения см. в разделе [дружественные сборки (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd).  
  
   
  
## Examples  
 **Подписанные сборки**  
  
 В следующем примере используется <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> атрибутов, чтобы сделать `internal` метод с именем `AppendDirectorySeparator` в подписанную сборку, видимым в другую сборку со знаком. Он определяет `FileUtilities` класс, включающий внутренний `AppendDirectorySeparator` метод. <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> Атрибут применяется к сборки, содержащей `FileUtilities` класса. Этот атрибут позволяет сборке с именем `Friend1` для доступа к внутреннему элементу.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 Если следующий пример компилируется в сборку со строгим именем с именем `Friend1`, `Example.Main` метод в `Friend1` смогут успешно вызывать `FileUtilities.AppendDirectorySeparator` метод, несмотря на то, что метод является внутренним для `Assembly1` сборки. Обратите внимание, что в C# при компиляции из командной строки, необходимо использовать **/out** параметр компилятора, чтобы убедиться, что имя дружественной сборки доступен, когда компилятор выполняет привязку к внешним ссылкам.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 **Сборки без подписи**  
  
 В следующем примере используется <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> атрибутов, чтобы сделать `internal` членом неподписанную видимым в другую сборку без подписи сборки. Атрибут гарантирует, что `internal` `StringLib.IsFirstLetterUpperCase` метод в сборке с именем `UtilityLib` является видимым для кода в сборке с именем `Friend2`.  Ниже приведен исходный код для UtilityLib.dll:  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 Следующий пример предоставляет исходный код для `Friend2` сборки. Обратите внимание, что в C# при компиляции из командной строки, необходимо использовать **/out** параметр компилятора, чтобы убедиться, что имя дружественной сборки доступен, когда компилятор выполняет привязку к внешним ссылкам.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public InternalsVisibleToAttribute (string assemblyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string assemblyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.CompilerServices.InternalsVisibleToAttribute.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (assemblyName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; InternalsVisibleToAttribute(System::String ^ assemblyName);" />
      <MemberSignature Language="F#" Value="new System.Runtime.CompilerServices.InternalsVisibleToAttribute : string -&gt; System.Runtime.CompilerServices.InternalsVisibleToAttribute" Usage="new System.Runtime.CompilerServices.InternalsVisibleToAttribute assemblyName" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assemblyName">Имя дружественной сборки.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Runtime.CompilerServices.InternalsVisibleToAttribute" /> с именем заданной дружественной сборки.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute.%23ctor%2A> Конструктора определяет дружественной сборки, который является сборкой, которая имеет доступ к внутренней и частные защищенные типы и члены текущей сборки.  
  
 В текущей сборке и дружественной сборки должны быть без знака, или они должны быть подписаны строгим именем. (Дополнительные сведения о сборках со строгими именами см. в разделе [Создание и использование сборок со строгими именами](~/docs/framework/app-domains/create-and-use-strong-named-assemblies.md).) Если оба значения являются числа без знака, `assemblyName` аргумент состоит из имени дружественной сборки, указан без пути или файловом расширения каталога. Если они подписаны, `assemblyName` состоит из имени дружественной сборки без его каталог путь или расширение имени файла, вместе с его полного открытого ключа (но не его токен открытого ключа). Другие компоненты строгого имени, например те, которые предоставляют язык и региональные параметры, версии или сведения об архитектуре процессора, не может указываться в `assemblyName` аргумент.  
  
> [!IMPORTANT]
>  Если вы используете компилятор C# для компиляции дружественной сборки, необходимо явно указать имя выходного файла (.exe или .dll) с помощью **/out** параметр компилятора. Это необходимо потому, что компилятор еще не создал имя сборки, формируемой во время привязки к внешним ссылкам. **/Out** параметр компилятора является необязательным для компилятора Visual Basic и соответствующих **-out** или **-o** не следует использовать параметр компилятора при компиляции friend сборки с F# компилятора.  
  
 Можно использовать [Sn.exe (средство строгих имен)](~/docs/framework/tools/sn-exe-strong-name-tool.md) для получения полного открытого ключа из файла со строгим именем ключа (SNK). Чтобы сделать это, выполните следующие действия:  
  
1.  Извлеките открытый ключ из файла ключа со строгим именем в отдельный файл:  
  
     **Sn -p***snk_file* *outfile*   
  
2.  Для отображения полного открытого ключа на консоль:  
  
     **Sn - tp***outfile*  
  
3.  Скопируйте и вставьте значение полного открытого ключа в исходном коде.  
  
 Дополнительные сведения об использовании <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> атрибут, см. в следующих разделах:  
  
-   [Дружественные сборки (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Дружественные сборки](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
   
  
## Examples  
 **Подписанные сборки**  
  
 В следующем примере используется <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> атрибутов, чтобы сделать `internal` метод с именем `AppendDirectorySeparator` в подписанную сборку, видимым в другую сборку со знаком. Он определяет `FileUtilities` класс, включающий внутренний `AppendDirectorySeparator` метод. <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> Атрибут применяется к сборки, содержащей `FileUtilities` класса. Этот атрибут позволяет сборке с именем `Friend1` для доступа к внутреннему элементу.  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/assembly1.cs#1)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/assembly1.vb#1)]  
  
 Если следующий пример компилируется в сборку со строгим именем с именем `Friend1`, смогут успешно вызывать `FileUtilities.AppendDirectorySeparator` метод, несмотря на то, что метод является внутренним для `Assembly1` сборки. Обратите внимание, что в C# при компиляции из командной строки, необходимо использовать **/out** параметр компилятора, чтобы убедиться, что имя дружественной сборки доступен, когда компилятор выполняет привязку к внешним ссылкам.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend1.cpp#2)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend1.cs#2)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend1.vb#2)]  
  
 В следующем примере используется <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> атрибутов, чтобы сделать `internal` членом неподписанную видимым в другую сборку без подписи сборки. Атрибут гарантирует, что `internal` `StringLib.IsFirstLetterUpperCase` метод в сборке с именем `UtilityLib` является видимым для кода в сборке с именем `Friend2`.  Ниже приведен исходный код для UtilityLib.dll:  
  
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/utilitylib.cs#5)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/utilitylib.vb#5)]  
  
 **Сборки без подписи**  
  
 Следующий пример предоставляет исходный код для `Friend2` сборки. Обратите внимание, что в C# при компиляции из командной строки, необходимо использовать **/out** параметр компилятора, чтобы убедиться, что имя дружественной сборки доступен, когда компилятор выполняет привязку к внешним ссылкам.  
  
 [!code-cpp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cpp/friend2.cpp#6)]
 [!code-csharp[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/cs/friend2.cs#6)]
 [!code-vb[System.Runtime.CompilerServices.InternalsVisibleToAttribute#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.compilerservices.internalsvisibletoattribute/vb/friend2.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllInternalsVisible">
      <MemberSignature Language="C#" Value="public bool AllInternalsVisible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllInternalsVisible" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberSignature Language="VB.NET" Value="Public Property AllInternalsVisible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllInternalsVisible { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllInternalsVisible : bool with get, set" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AllInternalsVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Это свойство не реализовано.</summary>
        <value>Это свойство не возвращает значение.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyName">
      <MemberSignature Language="C#" Value="public string AssemblyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyName : string" Usage="System.Runtime.CompilerServices.InternalsVisibleToAttribute.AssemblyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает имя дружественной сборки, для которой будут сделаны доступными все типы и члены типов, помеченные ключевым словом <see langword="internal" />.</summary>
        <value>Строка, представляющая имя дружественной сборки.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения об использовании <xref:System.Runtime.CompilerServices.InternalsVisibleToAttribute> атрибут, см. в следующих разделах:  
  
-   [Дружественные сборки (C++)](https://msdn.microsoft.com/library/8d55fee0-b7c2-4fbe-a23b-dfe424dc71cd)  
  
-   [Дружественные сборки](https://msdn.microsoft.com/library/df0c70ea-2c2a-4bdc-9526-df951ad2d055)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>