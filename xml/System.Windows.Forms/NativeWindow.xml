<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1f08773771fb4a10a7de82ed774e9bbcb32dbf4e" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/25/2018" /><Meta Name="ms.locfileid" Value="39979291" /></Metadata><TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Обеспечивает низкоуровневую инкапсуляцию дескриптора окна и процедуры окна.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот класс автоматически управляет созданием и класса окна регистрации.  
  
 Окно не под сбор мусора, когда оно связано с дескриптором окна. Чтобы обеспечить правильную сборку мусора, дескрипторы должны быть либо уничтожены вручную с помощью <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> или освобожден посредством <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> Был вызван при обработке сообщения WM_NCDESTROY. Это означает, что существуют случаи, в который, будучи не нужно вручную вызвать <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, но рекомендуется сделать это.  
  
 <xref:System.Windows.Forms.NativeWindow> Класс предоставляет следующие свойства и методы управления дескрипторами: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, и <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется перехват сообщений окна операционной системы в процедуре окна и создание окна с определенной операционной системой имя класса окна. В примере создается два класса, которые наследуют <xref:System.Windows.Forms.NativeWindow> этого.  
  
 `MyNativeWindowListener` Класс подключается в процедуре окна формы, переданные в конструктор и переопределяет <xref:System.Windows.Forms.NativeWindow.WndProc%2A> метод для перехвата `WM_ACTIVATEAPP` сообщения окна. Класс демонстрирует использование <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> и <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> методы для определения дескриптор окна <xref:System.Windows.Forms.NativeWindow> будет использовать. Дескриптор назначается в зависимости от <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> и <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> события. Когда `WM_ACTIVATEAPP` оконное сообщение поступает, класс вызывает `form1.ApplicationActivated` метод.  
  
 `MyNativeWindow` Класс создает новое окно с <xref:System.Windows.Forms.CreateParams.ClassName%2A> присвоено `BUTTON`. Класс демонстрирует использование <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> метод и переопределение <xref:System.Windows.Forms.NativeWindow.WndProc%2A> метод для перехвата сообщений окна, которые получены.  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">для непосредственного вызывающего на вызов неуправляемого кода. Связанное перечисление: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Инициализирует экземпляр класса <see cref="T:System.Windows.Forms.NativeWindow" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это значение по умолчанию <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> конструктор, предоставляемого компилятором. <xref:System.Windows.Forms.NativeWindow> Класс также имеет статический конструктор, который инициализирует обработчики сообщений домена приложения и хэш-таблицы.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Дескриптор, назначаемый данному окну.</param>
        <summary>Назначает дескриптор данному окну.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> перехватывает окно сообщения, отправляемые `handle` параметра. Используйте <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> для сброса процедуру дескриптор окна в процедуре окна по умолчанию.  
  
 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> Вызовы методов <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> метод, чтобы указать, что значение <xref:System.Windows.Forms.NativeWindow.Handle%2A> свойство изменилось.  
  
> [!NOTE]
>  Дескриптор для назначения не может быть в процессе другое приложение.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется перехват сообщений окна операционной системы в процедуре окна. В примере создается класс, наследуемый от <xref:System.Windows.Forms.NativeWindow> для выполнения этой задачи.  
  
 `MyNativeWindowListener` Класс подключается в процедуре окна формы, переданные в конструктор и переопределяет <xref:System.Windows.Forms.NativeWindow.WndProc%2A> метод перехватывает `WM_ACTIVATEAPP` сообщения окна. Класс демонстрирует использование <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> и <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> методы для определения окна обработки <xref:System.Windows.Forms.NativeWindow> будет использовать. Дескриптор назначается в зависимости от <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> и <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> события. Когда `WM_ACTIVATEAPP` оконное сообщение поступает, класс вызывает `form1.ApplicationActivated` метод.  
  
 Этот код является выдержкой из примера, приведенного в <xref:System.Windows.Forms.NativeWindow> Общие сведения о классе. Для краткости изложения код не отображается. См. в разделе <xref:System.Windows.Forms.NativeWindow> для кода.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Этому окну уже назначен дескриптор.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Не удается извлечь процедуру окна для связанного собственного окна.</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">Структура <see cref="T:System.Windows.Forms.CreateParams" />, задающая параметры создания для данного окна.</param>
        <summary>Создает окно и его дескриптор, используя указанные параметры создания.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `cp` Определяет значения, которые передаются в машинном коде Win32 `CreateWindowEx` метод для создания окна и его дескриптор.  
  
 Когда <xref:System.Windows.Forms.CreateParams.ClassName%2A> поле не `null`, наследует дескриптор только что созданный из указанного класса. Например если <xref:System.Windows.Forms.CreateParams.ClassName%2A> присваивается `BUTTON`, вновь созданное окно основан на Win32 `BUTTON` класс окна. <xref:System.Windows.Forms.CreateParams.Param%2A> Свойство <xref:System.Windows.Forms.CreateParams.ClassName%2A> объект должен быть `null` или ссылку на экземпляр класса, который был объявлен как структура.  
  
 Этот код является выдержкой из примера, приведенного в <xref:System.Windows.Forms.NativeWindow> Общие сведения о классе. Для краткости изложения код не отображается. См. в разделе <xref:System.Windows.Forms.NativeWindow> для кода.  
  
> [!NOTE]
>  Предоставленное имя класса регистрируется с операционной системой.  
  
   
  
## Examples  
 В следующем примере кода показано создание окна с определенной операционной системой имя класса окна. В примере создается класс, наследуемый от <xref:System.Windows.Forms.NativeWindow> для выполнения этой задачи.  
  
 `MyNativeWindow` Класс создает новое окно с <xref:System.Windows.Forms.CreateParams.ClassName%2A> присвоено `BUTTON`. При этом создается окно кнопки Win32. Расположение и размер кнопки имеет значение, а также указанные дополнительные стили окна. Класс демонстрирует использование <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> метод и переопределение <xref:System.Windows.Forms.NativeWindow.WndProc%2A> метод для перехвата сообщений окна, которые получены. Несмотря на то, что в примере выполняется поиск сообщения WM_ACTIVATEAPP, его можно заменить в реальной программе сообщения окна, специфичные для созданного типа.  
  
> [!NOTE]
>  Некоторые типы элементов управления отправляют свои оконные сообщения для родительского окна, а не в окно. См. в разделе Platform SDK Windows, Дополнительные сведения.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">При попытке создать собственное окно закончились ресурсы операционной системы.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Не удается создать указанное окно с помощью собственного интерфейса Win32 API.</exception>
        <exception cref="T:System.InvalidOperationException">Дескриптор текущего собственного окна уже назначен; в пояснении свойство <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> не равно <see cref="F:System.IntPtr.Zero" />.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">для создания окна верхнего уровня. Это разрешение необходимо только в том случае, если стиль окна не является дочерним, или если окно имеет родительский элемент. Связанное перечисление: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Обрабатываемое в данный момент сообщение.</param>
        <summary>Вызывает процедуру окна по умолчанию, связанную с этим окном.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило, вызывается только <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> метод при перехвате сообщений окна и хотите процедуру окна по умолчанию для обработки сообщения. <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> не следует вызывать для отправки сообщения окна для окна. вызов Win32 `SendMessage` вместо этого функцию.  
  
 Это ошибка для вызова <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> при <xref:System.Windows.Forms.NativeWindow.Handle%2A> свойства равно 0.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Переопределите этот метод в производном классе для реализации универсального обработку настраиваемых сообщений для определенного собственного окна или .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />. Настраиваемая обработка может выполняться до, после или вместо вызова реализации базового класса этот метод, который выполняет обработку стандартное сообщение.  В противоположность этому, Добавление настраиваемых обработка сообщений для приложения может быть выполнен через <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> метод <see cref="T:System.Windows.Forms.Application" /> класса.</para></block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Уничтожает окно и его дескриптор.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод уничтожает окно, связанное с <xref:System.Windows.Forms.NativeWindow.Handle%2A>, задает <xref:System.Windows.Forms.NativeWindow.Handle%2A> свойство 0, а также вызовы <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> метода в соответствии с изменениями. Как правило, вызывается только <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> после с помощью собственного окна.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow> Класс автоматически уничтожит соответствующее окно и освобождения ресурсов в ответ на сообщение WM_DESTROY.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает ресурсы, связанные с данным окном.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.Finalize%2A> Метод удаляет Win32 производный класс, связанный с текущим <xref:System.Windows.Forms.NativeWindow> экземпляра, освобождает дескриптор и отправляет сообщения WM_CLOSE соответствующее окно.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Дескриптор окна.</param>
        <summary>Извлекает окно, связанное с указанным дескриптором.</summary>
        <returns>Класс <see cref="T:System.Windows.Forms.NativeWindow" />, связанный с указанным дескриптором. Если дескриптор не связан ни с каким окном, этот метод возвращает <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы получаете дескриптор из другого метода, используйте этот метод для извлечения окно, связанное с дескриптором. Дескриптор уже принадлежит другой <xref:System.Windows.Forms.NativeWindow> в текущем обработки; в противном случае — значение `null` возвращается.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает дескриптор данного окна.</summary>
        <value>В случае успеха объект <see cref="T:System.IntPtr" />, представляющий дескриптор для связанного собственного окна Win32; в противном случае — 0, если нет дескриптора, связанного с окном.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод при вызове методов Windows API, требующими дескриптор окна или элемента управления.  
  
   
  
## Examples  
 В следующем примере кода показано создание окна с определенной операционной системой имя класса окна. В примере создается класс, наследуемый от <xref:System.Windows.Forms.NativeWindow> для выполнения этой задачи. В этом примере показано переопределение <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> метод получить уведомление при <xref:System.Windows.Forms.NativeWindow.Handle%2A> изменения.  
  
 `MyNativeWindow` Класс создает новое окно с <xref:System.Windows.Forms.CreateParams.ClassName%2A> значение кнопки. При этом создается окно кнопки Win32. Расположение и размер кнопки имеет значение, а также указанные дополнительные стили окна. Класс демонстрирует использование <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> метод и переопределение <xref:System.Windows.Forms.NativeWindow.WndProc%2A> метод для перехвата сообщений окна, которые получены. Несмотря на то, что в примере выполняется поиск сообщения WM_ACTIVATEAPP, это может быть заменено в реальной программе сообщения окна, специфичные для созданного типа.  
  
> [!NOTE]
>  Некоторые типы элементов управления отправляют свои оконные сообщения для родительского окна, а не в окно. См. в разделе Platform SDK Windows, Дополнительные сведения.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Задает метод уведомления, вызываемый при изменении дескриптора окна.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается при значение <xref:System.Windows.Forms.NativeWindow.Handle%2A> свойство изменилось.  
  
   
  
## Examples  
 В следующем примере кода показано создание окна с определенной операционной системой имя класса окна. В примере создается класс, наследуемый от <xref:System.Windows.Forms.NativeWindow> для выполнения этой задачи. В этом примере показано переопределение <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> метод получить уведомление при <xref:System.Windows.Forms.NativeWindow.Handle%2A> изменения.  
  
 `MyNativeWindow` Класс создает новое окно с <xref:System.Windows.Forms.CreateParams.ClassName%2A> присвоено `BUTTON`. При этом создается окно кнопки Win32. Расположение и размер кнопки имеет значение, а также указанные дополнительные стили окна. Класс демонстрирует использование <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> метод и переопределение <xref:System.Windows.Forms.NativeWindow.WndProc%2A> метод для перехвата сообщений окна, которые получены. Несмотря на то, что в примере выполняется поиск сообщения WM_ACTIVATEAPP, его можно заменить в реальной программе сообщения окна, специфичные для созданного типа.  
  
 Этот код является выдержкой из примера, приведенного в <xref:System.Windows.Forms.NativeWindow> Общие сведения о классе. Для краткости изложения код не отображается. См. в разделе <xref:System.Windows.Forms.NativeWindow> для кода.  
  
> [!NOTE]
>  Некоторые типы элементов управления отправляют свои оконные сообщения для родительского окна, а не в окно. См. в разделе Platform SDK Windows, Дополнительные сведения.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Переопределите этот метод для отслеживания изменений, внесенных в дескриптор окна.</para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">Объект <see cref="T:System.Exception" />, задающий необработанное исключение потока.</param>
        <summary>Будучи переопределен в производном классе, управляет необработанным исключением потока.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Как правило <xref:System.Windows.Forms.Application.OnThreadException%2A> обрабатывает исключения потока.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Освобождает дескриптор, связанный с данным окном.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод не уничтожает дескриптор окна. Вместо этого он задает процедуру окна дескриптора и процедуру окна по умолчанию. Он задает <xref:System.Windows.Forms.NativeWindow.Handle%2A> свойство равным 0 и вызывает <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> в соответствии с изменениями.  
  
 Окно автоматически вызывает этот метод, собственного сообщение Win32 WM_NCDESTROY, о том, что Windows уничтожила дескриптор.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется перехват сообщений окна операционной системы в процедуре окна. В примере создается класс, наследуемый от <xref:System.Windows.Forms.NativeWindow> для выполнения этой задачи.  
  
 `MyNativeWindowListener` Класс подключается в процедуре окна формы, переданные в конструктор и переопределяет <xref:System.Windows.Forms.NativeWindow.WndProc%2A> метод перехватывает `WM_ACTIVATEAPP` сообщения окна. Класс демонстрирует использование <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> и <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> методы для определения дескриптор окна <xref:System.Windows.Forms.NativeWindow> будет использовать. Дескриптор назначается в зависимости от <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> и <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> события. Когда `WM_ACTIVATEAPP` оконное сообщение поступает, класс вызывает `form1.ApplicationActivated` метод.  
  
 Этот код является выдержкой из примера, приведенного в <xref:System.Windows.Forms.NativeWindow> Общие сведения о классе. Для краткости изложения код не отображается. См. в разделе <xref:System.Windows.Forms.NativeWindow> для кода.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Объект <see cref="T:System.Windows.Forms.Message" />, связанный с текущим сообщением Windows.</param>
        <summary>Вызывает процедуру окна по умолчанию, связанную с этим окном.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод вызывается при отправке сообщения окна дескриптор окна.  
  
   
  
## Examples  
 В следующем примере кода демонстрируется перехват сообщений окна операционной системы в процедуре окна. В примере создается класс, наследуемый от <xref:System.Windows.Forms.NativeWindow> для выполнения этой задачи.  
  
 `MyNativeWindowListener` Класс подключается в процедуре окна формы, переданные в конструктор и переопределяет <xref:System.Windows.Forms.NativeWindow.WndProc%2A> метод для перехвата `WM_ACTIVATEAPP` сообщения окна. Класс демонстрирует использование <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> и <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> методы для определения дескриптор окна <xref:System.Windows.Forms.NativeWindow> будет использовать. Дескриптор назначается в зависимости от <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> и <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> события. Когда `WM_ACTIVATEAPP` оконное сообщение поступает, класс вызывает `form1.ApplicationActivated` метод.  
  
 Этот код является выдержкой из примера, приведенного в <xref:System.Windows.Forms.NativeWindow> Общие сведения о классе. Для краткости изложения код не отображается. См. в разделе <xref:System.Windows.Forms.NativeWindow> для кода.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Переопределите этот метод для реализации специфической обработки сообщений. Вызовите <c>базовый. WndProc</c> для необработанных сообщений.</para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>