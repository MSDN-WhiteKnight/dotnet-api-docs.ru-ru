<Type Name="IArgumentProvider" FullName="System.Linq.Expressions.IArgumentProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c1987bffe3d2cba01471534c9b3fac3e0c152c07" /><Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="08/24/2018" /><Meta Name="ms.locfileid" Value="36555652" /></Metadata><TypeSignature Language="C#" Value="public interface IArgumentProvider" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IArgumentProvider" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Expressions.IArgumentProvider" />
  <TypeSignature Language="VB.NET" Value="Public Interface IArgumentProvider" />
  <TypeSignature Language="C++ CLI" Value="public interface class IArgumentProvider" />
  <TypeSignature Language="F#" Value="type IArgumentProvider = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Предоставляет внутренний интерфейс для доступа к аргументам нескольких узлов дерева (DynamicExpression, ElementInit, MethodCallExpression, InvocationExpression, NewExpression и InexExpression).  Не следует использовать этот API.  Он является открытым только из-за рефакторинга DLL и существует только для внутренней оптимизации производительности.  
  
Благодаря этому доступны два способа оптимизации, которые уменьшают размер деревьев выражений.  Первый способ позволяет узлам дерева удерживаться в IList&lt;T&gt; вместо ReadOnlyCollection.  IList&lt;T&gt; экономит выделение ReadOnlyCollection для каждого узла.  Второй способ включает создание специализированных подклассов, которые могут захватывать определенное число аргументов (например, Block2, Block3, Block4).  Таким образом, для этих узлов не требуется выделять ReadOnlyCollection и массив для хранения их элементов, что экономит по 32 байта на каждый узел.  
  
Узлы дерева выражения по-прежнему предоставляют исходные свойства ReadOnlyCollections LINQ.  Это достигается повторным использованием поля для хранения массива или элемента, который обычно хранятся в массиве.  
  
В случае массива коллекции типизируется в IList&lt;T&gt; вместо ReadOnlyCollection&lt;T&gt;.  Когда узел изначально создается, он является массивом.  Компилятор при доступе к членам использует этот интерфейс.  Доступ к элементам массива повышает уровень массива до ReadOnlyCollection.  
  
В случае объекта первый аргумент хранится в поле, типизированном в объект.  Когда узел изначально создается, это поле содержит выражение.  Компилятор обращается к аргументам через этот интерфейс, и метод доступа для первого аргумента использует Expression.ReturnObject для возврата объекта, который обрабатывает случай выражения (Expression) или ReadOnlyCollection.  Когда пользователь обращается к ReadOnlyCollection, поле объекта обновляется для хранения непосредственно в ReadOnlyCollection.  
  
Важно, что выражения всегда возвращают один и тот же объект ReadOnlyCollection.  В противном случае обход дерева перезаписи будет нарушен.  Это критическое изменение LINQ v1 для возврата разных ReadOnlyCollection из того же узла Expression.  В настоящее время пользователи могут использовать удостоверение объекта, чтобы сообщать, изменился ли узел.  Хранение ReadOnlyCollection в перегруженном поле позволяет сократить использование памяти и обеспечивает совместимость для открытого API-интерфейса.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ArgumentCount">
      <MemberSignature Language="C#" Value="public int ArgumentCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ArgumentCount" />
      <MemberSignature Language="DocId" Value="P:System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ArgumentCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ArgumentCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ArgumentCount : int" Usage="System.Linq.Expressions.IArgumentProvider.ArgumentCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает число аргументов для узла дерева выражения.  Не следует использовать этот тип.  Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
        <value>Число аргументов для узла дерева выражения как <see cref="T:System.Int32" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArgument">
      <MemberSignature Language="C#" Value="public System.Linq.Expressions.Expression GetArgument (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Linq.Expressions.Expression GetArgument(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Expressions.IArgumentProvider.GetArgument(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArgument (index As Integer) As Expression" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Linq::Expressions::Expression ^ GetArgument(int index);" />
      <MemberSignature Language="F#" Value="abstract member GetArgument : int -&gt; System.Linq.Expressions.Expression" Usage="iArgumentProvider.GetArgument index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq.Expressions</AssemblyName>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.Expressions.Expression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Индекс аргумента.</param>
        <summary>Возвращает аргумент в индексе, создавая исключение, если индекс вне допустимых границ.  Не следует использовать этот тип.  Он является открытым только из-за рефакторинга сборки и используется внутренне для оптимизации производительности.</summary>
        <returns>Аргумент в индексе, вызываемый, если индекс находится вне допустимых границ, как <see cref="T:System.Linq.Expressions.Expression" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>