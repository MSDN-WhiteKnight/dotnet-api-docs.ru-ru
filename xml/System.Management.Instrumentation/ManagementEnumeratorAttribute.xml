<Type Name="ManagementEnumeratorAttribute" FullName="System.Management.Instrumentation.ManagementEnumeratorAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="155b812af0383b54069c11303ebe46ba43571903" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55344085" /></Metadata><TypeSignature Language="C#" Value="public sealed class ManagementEnumeratorAttribute : System.Management.Instrumentation.ManagementNewInstanceAttribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ManagementEnumeratorAttribute extends System.Management.Instrumentation.ManagementNewInstanceAttribute" />
  <TypeSignature Language="DocId" Value="T:System.Management.Instrumentation.ManagementEnumeratorAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ManagementEnumeratorAttribute&#xA;Inherits ManagementNewInstanceAttribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class ManagementEnumeratorAttribute sealed : System::Management::Instrumentation::ManagementNewInstanceAttribute" />
  <TypeSignature Language="F#" Value="type ManagementEnumeratorAttribute = class&#xA;    inherit ManagementNewInstanceAttribute" />
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Management.Instrumentation.ManagementNewInstanceAttribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Constructor | System.AttributeTargets.Method, AllowMultiple=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Атрибут ManagementEnumerator помечает метод, который возвращает все экземпляры класса WMI.  
  
Примечание. Работа над библиотеками .NET инструментария WMI завершена. В дальнейшем не предвидится никаких разработок, улучшений или обновлений в отношении не связанных с безопасностью проблем, влияющих на эти библиотеки. Для разработки новых приложений следует использовать [интерфейсы API MI](https://msdn.microsoft.com/library/jj152383%28v=vs.80%29.aspx).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод должен быть открытым и статическим. Он должен возвращать коллекцию всех экземпляров класса WMI. Коллекция может быть любой типом, приводимым к <xref:System.Collections.IEnumerable>.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать атрибут перечислителя, чтобы пометить метод, который используется для перечисления экземпляров класса. В этом случае используется метод Enumerate <xref:System.Diagnostics.Process> класса для извлечения всех процессов, запущенных на компьютере.  
  
```csharp  
[ManagementEnumerator]  
public static IEnumerable Enumerate()  
{  
   Process[] rgProcesses = Process.GetProcesses();  
   for (int i = 0; i < rgProcesses.Length; i++)  
   {  
      yield return new ProcessProvider(rgProcesses[i]);  
   }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ManagementEnumeratorAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Management.Instrumentation.ManagementEnumeratorAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ManagementEnumeratorAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Management.Instrumentation.ManagementEnumeratorAttribute" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schema">
      <MemberSignature Language="C#" Value="public Type Schema { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type Schema" />
      <MemberSignature Language="DocId" Value="P:System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema" />
      <MemberSignature Language="VB.NET" Value="Public Property Schema As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ Schema { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Schema : Type with get, set" Usage="System.Management.Instrumentation.ManagementEnumeratorAttribute.Schema" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает или устанавливает значение, определяющее тип вывода, который возвращает метод, помеченный атрибутом ManagementEnumerator.</summary>
        <value>Значение <see cref="T:System.Type" /> указывает тип вывода, который возвращает метод, помеченный атрибутом <see cref="T:System.Management.Instrumentation.ManagementEnumeratorAttribute" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если возвращаемый тип является <xref:System.Object?displayProperty=nameWithType>, а затем выходные данные должны рассматриваться как значение типа <xref:System.Object?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>