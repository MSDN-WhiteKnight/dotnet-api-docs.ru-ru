<Type Name="PrintQueue" FullName="System.Printing.PrintQueue">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fdb30ed3979852def8ee8259ef4255ce55198cbd" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57929014" /></Metadata><TypeSignature Language="C#" Value="public class PrintQueue : System.Printing.PrintSystemObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi PrintQueue extends System.Printing.PrintSystemObject" />
  <TypeSignature Language="DocId" Value="T:System.Printing.PrintQueue" />
  <TypeSignature Language="VB.NET" Value="Public Class PrintQueue&#xA;Inherits PrintSystemObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class PrintQueue : System::Printing::PrintSystemObject" />
  <TypeSignature Language="F#" Value="type PrintQueue = class&#xA;    inherit PrintSystemObject" />
  <AssemblyInfo>
    <AssemblyName>System.Printing</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Printing.PrintSystemObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Управляет принтерами и заданиями печати.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Некоторые свойства <xref:System.Printing.PrintQueue> объекта представляют характеристики утилиты очереди печати, которая работает на компьютере, а другие — функции или состояния самого принтера. Например <xref:System.Printing.PrintQueue.NumberOfJobs%2A> характерен для очереди печати, но <xref:System.Printing.PrintQueue.Location%2A> является свойством принтера. Многие свойства принтера, например ли вмешательство пользователя, должны быть переданы при помощи <xref:System.Printing.PrintQueue.Refresh%2A> метод из самого принтера для <xref:System.Printing.PrintQueue> объекта. Это следует сделать до соответствующего свойства (<xref:System.Printing.PrintQueue.NeedUserIntervention%2A>) считываются с помощью программы. Аналогичным образом, в том случае, когда программа изменения значения одного или нескольких свойств <xref:System.Printing.PrintQueue> объекта, изменения должны быть записаны утилиту очереди печати на компьютере. Это сделать с помощью <xref:System.Printing.PrintQueue.Commit%2A> метод.  
  
> [!CAUTION]
>  Классы в <xref:System.Printing> пространства имен не поддерживаются для использования в службе Windows или приложения ASP.NET или службе. Попытка использования этих классов из одного из этих типов приложений может привести к непредвиденным проблемам, например неодинаково службы исключения производительности и времени выполнения.  
  
 Если вы хотите напечатать из приложения Windows Forms, см. в разделе <xref:System.Drawing.Printing> пространства имен.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Printing.PrintServer" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Printing.PrintQueue" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="printServer">Сервер печати для размещения очереди печати.</param>
        <param name="printQueueName">Имя очереди печати.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Printing.PrintQueue" />, используя указанный <see cref="T:System.Printing.PrintServer" /> и имя очереди.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> конструкторы, которые не включают <xref:System.Printing.PrintSystemDesiredAccess> параметр по умолчанию для <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> доступа.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, int printSchemaVersion);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * int -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, printSchemaVersion)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="printServer">Сервер печати, на котором размещается очередь печати.</param>
        <param name="printQueueName">Имя очереди печати.</param>
        <param name="printSchemaVersion">Используемая версия схемы печати.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Printing.PrintQueue" />, используя указанный <see cref="T:System.Printing.PrintServer" />, имя очереди и версию схемы печати.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> конструкторы, которые не включают <xref:System.Printing.PrintSystemDesiredAccess> параметр по умолчанию для <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> доступа.  
  
 [Print Schema](https://go.microsoft.com/fwlink/?LinkId=186397) версии выпущены с Windows Vista является «1».  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::Printing::PrintQueueIndexedProperty&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * System.Printing.PrintQueueIndexedProperty[] -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
      </Parameters>
      <Docs>
        <param name="printServer">Сервер печати, на котором размещается очередь печати.</param>
        <param name="printQueueName">Имя очереди печати.</param>
        <param name="propertyFilter">Массив значений типа <see cref="T:System.Printing.PrintQueueIndexedProperty" />, в котором указаны значения свойств для инициализации.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Printing.PrintQueue" />, используя указанный <see cref="T:System.Printing.PrintServer" />, имя очереди и массив инициализируемых значений <see cref="T:System.Printing.PrintQueueIndexedProperty" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> конструкторы, которые не включают <xref:System.Printing.PrintSystemDesiredAccess> параметр по умолчанию для <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> доступа.  
  
 Использование конструктора с `propertyFilter` параметр улучшает производительность.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Сервер печати, на котором размещается очередь печати.</param>
        <param name="printQueueName">Имя очереди печати.</param>
        <param name="desiredAccess">Одно из значений <see cref="T:System.Printing.PrintSystemDesiredAccess" />, указывающее тип доступа к очереди печати, необходимый программе.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Printing.PrintQueue" />, используя указанный <see cref="T:System.Printing.PrintServer" />, имя очереди и необходимый тип доступа.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintQueueException">Значение <paramref name="desiredAccess" /> можно применить только к объекту <see cref="T:System.Printing.PrintServer" />, а не <see cref="T:System.Printing.PrintQueue" />. Например, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::String ^&gt; ^ propertyFilter);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * string[] -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="printServer">Сервер печати, на котором размещается очередь печати.</param>
        <param name="printQueueName">Имя очереди печати.</param>
        <param name="propertyFilter">Массив имен свойств для инициализации.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Printing.PrintQueue" />, используя указанный <see cref="T:System.Printing.PrintServer" />, имя очереди и массив имен инициализируемых свойств.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> конструкторы, которые не включают <xref:System.Printing.PrintSystemDesiredAccess> параметр по умолчанию для <xref:System.Printing.PrintSystemDesiredAccess.UsePrinter> доступа.  
  
 Использование конструктора с `propertyFilter` параметр улучшает производительность.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, int printSchemaVersion, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, int32 printSchemaVersion, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Int32,System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, int printSchemaVersion, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * int * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, printSchemaVersion, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="printSchemaVersion" Type="System.Int32" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Сервер печати, на котором размещается очередь печати.</param>
        <param name="printQueueName">Имя очереди печати.</param>
        <param name="printSchemaVersion">Используемая версия схемы печати.</param>
        <param name="desiredAccess">Одно из значений <see cref="T:System.Printing.PrintSystemDesiredAccess" />, указывающее тип доступа к очереди печати, необходимый программе.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Printing.PrintQueue" />, используя указанный <see cref="T:System.Printing.PrintServer" />, имя очереди, версию схемы печати и необходимый тип доступа.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Print Schema](https://go.microsoft.com/fwlink/?LinkId=186397) версии выпущены с Windows Vista является «1».  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Значение <paramref name="desiredAccess" /> можно применить только к объекту <see cref="T:System.Printing.PrintServer" />, а не <see cref="T:System.Printing.PrintQueue" />. Например, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, System.Printing.PrintQueueIndexedProperty[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, valuetype System.Printing.PrintQueueIndexedProperty[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.Printing.PrintQueueIndexedProperty[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::Printing::PrintQueueIndexedProperty&gt; ^ propertyFilter, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * System.Printing.PrintQueueIndexedProperty[] * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.Printing.PrintQueueIndexedProperty[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Сервер печати, на котором размещается очередь печати.</param>
        <param name="printQueueName">Имя очереди печати.</param>
        <param name="propertyFilter">Массив значений типа <see cref="T:System.Printing.PrintQueueIndexedProperty" />, в котором указаны свойства для инициализации.</param>
        <param name="desiredAccess">Одно из значений <see cref="T:System.Printing.PrintSystemDesiredAccess" />, указывающее тип доступа к очереди печати, необходимый программе.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Printing.PrintQueue" />, используя указанный <see cref="T:System.Printing.PrintServer" />, имя очереди, массив инициализируемых значений типа <see cref="T:System.Printing.PrintQueueIndexedProperty" /> и необходимый тип доступа.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Использование конструктора с `propertyFilter` параметр улучшает производительность.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Значение <paramref name="desiredAccess" /> можно применить только к объекту <see cref="T:System.Printing.PrintServer" />, а не <see cref="T:System.Printing.PrintQueue" />. Например, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public PrintQueue (System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, System.Printing.PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Printing.PrintServer printServer, string printQueueName, string[] propertyFilter, valuetype System.Printing.PrintSystemDesiredAccess desiredAccess) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.#ctor(System.Printing.PrintServer,System.String,System.String[],System.Printing.PrintSystemDesiredAccess)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; PrintQueue(System::Printing::PrintServer ^ printServer, System::String ^ printQueueName, cli::array &lt;System::String ^&gt; ^ propertyFilter, System::Printing::PrintSystemDesiredAccess desiredAccess);" />
      <MemberSignature Language="F#" Value="new System.Printing.PrintQueue : System.Printing.PrintServer * string * string[] * System.Printing.PrintSystemDesiredAccess -&gt; System.Printing.PrintQueue" Usage="new System.Printing.PrintQueue (printServer, printQueueName, propertyFilter, desiredAccess)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="printServer" Type="System.Printing.PrintServer" />
        <Parameter Name="printQueueName" Type="System.String" />
        <Parameter Name="propertyFilter" Type="System.String[]" />
        <Parameter Name="desiredAccess" Type="System.Printing.PrintSystemDesiredAccess" />
      </Parameters>
      <Docs>
        <param name="printServer">Сервер печати, на котором размещается очередь печати.</param>
        <param name="printQueueName">Имя очереди печати.</param>
        <param name="propertyFilter">Массив имен свойств для инициализации.</param>
        <param name="desiredAccess">Одно из значений <see cref="T:System.Printing.PrintSystemDesiredAccess" />, указывающее тип доступа к очереди печати, необходимый программе.</param>
        <summary>Инициализирует новый экземпляр класса <see cref="T:System.Printing.PrintQueue" />, используя указанный <see cref="T:System.Printing.PrintServer" />, имя очереди, фильтр свойств и необходимый тип доступа.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Использование конструктора с `propertyFilter` параметр улучшает производительность.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Значение <paramref name="desiredAccess" /> можно применить только к объекту <see cref="T:System.Printing.PrintServer" />, а не <see cref="T:System.Printing.PrintQueue" />. Например, <see cref="F:System.Printing.PrintSystemDesiredAccess.AdministrateServer" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddJob">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Вставляет новое задание печати в очередь.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если очередь приостановлена или в состоянии ошибки, задание печати, когда оно достигает начала очереди, так что это печати.  
  
 Другие способы печати в [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] включают <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> метод, который может использоваться с или без открытия диалогового окна, а также многие <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> и <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> методы <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob () As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob();" />
      <MemberSignature Language="F#" Value="member this.AddJob : unit -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Вставляет в очередь новое задание печати (с общим именем), содержимое которого является массивом типа <see cref="T:System.Byte" />.</summary>
        <returns>Объект <see cref="T:System.Printing.PrintSystemJobInfo" />, представляющий задание печати и его состояние.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод для записи сведений об устройстве, файл очереди, который не включен автоматически с [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] диспетчера очереди печати. Конечно, вам нужно знать, является ли файл очереди [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] или [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]. Если вы предпочитаете работать с <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)], можно использовать <xref:System.Printing.PrintQueueStream> класса вместо этого метода.  
  
 После <xref:System.Printing.PrintQueue.AddJob%2A> был вызван метод, необходимо написать <xref:System.Byte> массив <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> свойство <xref:System.Printing.PrintSystemJobInfo> , возвращаемый <xref:System.Printing.PrintQueue.AddJob%2A> или создается без задания печати. Этот массив — это то, что выводится, если принтер работает и не приостановлена.  
  
> [!CAUTION]
>  Если <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> не закрывается с <xref:System.IO.Stream.Close%2A> до окончания потока, в котором <xref:System.Printing.PrintQueue.AddJob%2A> вызывается, а затем <xref:System.InvalidOperationException> возникает, когда заканчивается этот поток, так как поток диспетчера очереди печати не может получить контроль над <xref:System.IO.Stream> объекта.  
  
 В очереди печати [!INCLUDE[TLA#tla_gui](~/includes/tlasharptla-gui-md.md)], задание имеет имя «Документ системы печати». Чтобы присвоить другое имя задания, используйте <xref:System.Printing.PrintQueue.AddJob%28System.String%29> перегрузки.  
  
 Другие способы печати в [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] включают <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> метод, который может использоваться с или без открытия диалогового окна, а также многие <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> и <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> методы <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Printing.PrintQueue.AddJob> для отправки <xref:System.Byte> массива в очередь печати. Этот код работает только с принтерами, которые можно обнаружить и печатать обычный текст. Некоторые из них невозможно.  
  
 [!code-csharp[WriteToSpoolFile#AddUnnamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addunnamedjob)]
 [!code-vb[WriteToSpoolFile#AddUnnamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addunnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob (jobName As String) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob jobName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="jobName">Имя задания печати.</param>
        <summary>Вставляет в очередь новое задание печати, содержимое которого является массивом типа <see cref="T:System.Byte" />.</summary>
        <returns>Объект <see cref="T:System.Printing.PrintSystemJobInfo" />, представляющий задание печати и его состояние.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Используйте этот метод для записи сведений об устройстве, файл очереди, который не включен автоматически с [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)] диспетчера очереди печати. Конечно, вам нужно знать, является ли файл очереди [!INCLUDE[TLA#tla_emf](~/includes/tlasharptla-emf-md.md)] или [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)]. Если вы предпочитаете работать с <xref:System.IO.Stream> [!INCLUDE[TLA#tla_api](~/includes/tlasharptla-api-md.md)], можно использовать <xref:System.Printing.PrintQueueStream> класса вместо этого метода.  
  
 После <xref:System.Printing.PrintQueue.AddJob%2A> был вызван метод, необходимо написать <xref:System.Byte> массив <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> свойство <xref:System.Printing.PrintSystemJobInfo> , возвращаемый <xref:System.Printing.PrintQueue.AddJob%2A> или создается без задания печати. Этот массив — это то, что выводится, если принтер работает и не приостановлена.  
  
> [!CAUTION]
>  Если <xref:System.Printing.PrintSystemJobInfo.JobStream%2A> не закрывается с <xref:System.IO.Stream.Close%2A> до окончания потока, в котором <xref:System.Printing.PrintQueue.AddJob%2A> вызывается, а затем <xref:System.InvalidOperationException> возникает, когда заканчивается этот поток, так как поток диспетчера очереди печати не может получить контроль над <xref:System.IO.Stream> объекта.  
  
 Другие способы печати в [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] включают <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> метод, который может использоваться с или без открытия диалогового окна, а также многие <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> и <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> методы <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Printing.PrintQueue.AddJob%28System.String%29> для считывания файла в <xref:System.Byte> массива и отправка массива в очередь печати. Этот код предполагает, что имеется файл с именем test.txt в корне диска C:. Этот код работает только с принтерами, которые можно обнаружить и печатать обычный текст. Некоторые из них невозможно.  
  
 [!code-csharp[WriteToSpoolFile#AddNamedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/WriteToSpoolFile/CSharp/Program.cs#addnamedjob)]
 [!code-vb[WriteToSpoolFile#AddNamedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/WriteToSpoolFile/visualbasic/program.vb#addnamedjob)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string * System.Printing.PrintTicket -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob (jobName, printTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="jobName">Путь и имя печатаемого документа.</param>
        <param name="printTicket">Параметры задания печати.</param>
        <summary>Вставляет новое задание на печать документа [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] в очередь, задает для него указанное имя и параметры.</summary>
        <returns>Объект <see cref="T:System.Printing.PrintSystemJobInfo" />, представляющий задание печати и его состояние.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в разделе <xref:System.Printing.PrintQueue.AddJob%28System.String%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function AddJob (jobName As String, documentPath As String, fastCopy As Boolean) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::String ^ documentPath, bool fastCopy);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string * string * bool -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob (jobName, documentPath, fastCopy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" />
        <Parameter Name="documentPath" Type="System.String" />
        <Parameter Name="fastCopy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="jobName">Имя задания печати.</param>
        <param name="documentPath">Путь и имя печатаемого документа.</param>
        <param name="fastCopy">Значение <see langword="true" /> для быстрой буферизации без обратной связи при постраничной обработке и без проверки того, чтобы файл имел правильный формат [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]; в противном случае — значение <see langword="false" />.</param>
        <summary>Вставляет в очередь новое задание печати для документа [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)], присваивает ему заданное имя и указывает, должно ли оно проверяться.</summary>
        <returns>Объект <see cref="T:System.Printing.PrintSystemJobInfo" />, представляющий задание печати и его состояние.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если `fastCopy` — `true`, то необходимо указать принтер [Обзор печати](~/docs/framework/wpf/advanced/printing-overview.md). Если это не так, <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> метод вызывает исключение.  
  
 Если `fastCopy` — `false`, то нет необходимости использовать принтер XPSDrv. [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)] Файл, добавляемый в очередь преобразуется в язык описания страниц принтера, например PCL или Postscript. Тем не менее, такого рода печати делает вызов [!INCLUDE[TLA#tla_com](~/includes/tlasharptla-com-md.md)]. Вызов [!INCLUDE[TLA2#tla_com](~/includes/tla2sharptla-com-md.md)] требует, чтобы вызывающий поток однопотокового подразделения (<xref:System.Threading.ApartmentState.STA>) вместо нескольких однопотоковое подразделение (<xref:System.Threading.ApartmentState.MTA>) используется по умолчанию в [!INCLUDE[TLA#tla_net](~/includes/tlasharptla-net-md.md)] 2.0 и более поздних. (Дополнительные сведения о состояниях потоки и подразделения, см. в разделе [управляемые и неуправляемые потоки](https://msdn.microsoft.com/library/db425c20-4b2f-4433-bf96-76071c7881e5), и <xref:System.Threading.ApartmentState>.) Это можно сделать двумя способами:  
  
-   Проще всего добавить <xref:System.STAThreadAttribute> (то есть «`[System.STAThreadAttribute()]`«) непосредственно над первая часть приложения `Main` метод (обычно "`static void Main(string[] args)`«).  
  
-   Если вам нужна вашей `Main` состояние подразделения потока, чтобы быть <xref:System.Threading.ApartmentState.MTA>, можно разместить вызов <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> в отдельном потоке, имеющий состояние подразделения присваивается <xref:System.Threading.ApartmentState.STA> с <xref:System.Threading.Thread.SetApartmentState%2A>. В приведенном ниже примере показан второй метод.  
  
> [!NOTE]
>  Невозможно применить <xref:System.STAThreadAttribute> к любому методу, за исключением `Main` и нельзя использовать <xref:System.Threading.Thread.SetApartmentState%2A> для `Main` потока.  
  
 Другие способы печати в [!INCLUDE[TLA#tla_winclient](~/includes/tlasharptla-winclient-md.md)] включают <xref:System.Windows.Controls.PrintDialog.PrintDocument%2A?displayProperty=nameWithType> метод, который может использоваться с или без открытия диалогового окна, а также многие <xref:System.Windows.Xps.XpsDocumentWriter.Write%2A> и <xref:System.Windows.Xps.XpsDocumentWriter.WriteAsync%2A> методы <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
   
  
## Examples  
 В следующем примере показано, как использовать <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29> выполнить пакетную печать всего [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] файлов в каталоге.  
  
 [!code-csharp[BatchPrintXPSFiles#BatchPrintXPSFiles](~/samples/snippets/csharp/VS_Snippets_Wpf/BatchPrintXPSFiles/CSharp/Program.cs#batchprintxpsfiles)]
 [!code-vb[BatchPrintXPSFiles#BatchPrintXPSFiles](~/samples/snippets/visualbasic/VS_Snippets_Wpf/BatchPrintXPSFiles/visualbasic/program.vb#batchprintxpsfiles)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Threading.ApartmentState" />
        <altmember cref="T:System.STAThreadAttribute" />
        <related type="Article" href="https://msdn.microsoft.com/library/e78b14f1-e487-43cd-9c6d-1a07483f1730">Предоставление клиентам .NET Framework доступа к COM-компонентам</related>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">проверки соответствия isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="AddJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo AddJob (string jobName, string documentPath, bool fastCopy, System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo AddJob(string jobName, string documentPath, bool fastCopy, class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.AddJob(System.String,System.String,System.Boolean,System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ AddJob(System::String ^ jobName, System::String ^ documentPath, bool fastCopy, System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.AddJob : string * string * bool * System.Printing.PrintTicket -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.AddJob (jobName, documentPath, fastCopy, printTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobName" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="documentPath" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="fastCopy" Type="System.Boolean" Index="2" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" Index="3" FrameworkAlternate="netcore-3.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="jobName">Путь и имя печатаемого документа.</param>
        <param name="documentPath">Путь и имя печатаемого документа.</param>
        <param name="fastCopy">Значение <see langword="true" /> для быстрой буферизации без обратной связи при постраничной обработке и без проверки того, чтобы файл имел правильный формат [!INCLUDE[TLA2#tla_xps](~/includes/tla2sharptla-xps-md.md)]; в противном случае — значение <see langword="false" />.</param>
        <param name="printTicket">Параметры задания печати.</param>
        <summary>Вставляет в очередь новое задание печати для документа [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)], присваивает ему заданное имя и параметры и указывает, должно ли оно проверяться.</summary>
        <returns>Объект <see cref="T:System.Printing.PrintSystemJobInfo" />, представляющий задание печати и его состояние.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Дополнительные сведения см. в разделе <xref:System.Printing.PrintQueue.AddJob%28System.String%2CSystem.String%2CSystem.Boolean%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AveragePagesPerMinute">
      <MemberSignature Language="C#" Value="public virtual int AveragePagesPerMinute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AveragePagesPerMinute" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.AveragePagesPerMinute" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property AveragePagesPerMinute As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AveragePagesPerMinute { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AveragePagesPerMinute : int" Usage="System.Printing.PrintQueue.AveragePagesPerMinute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает скорость принтера, измеряемую страницами в минуту.</summary>
        <value>Среднее число страниц, печатаемое принтером в минуту.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClientPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public int ClientPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ClientPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ClientPrintSchemaVersion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ClientPrintSchemaVersion As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int ClientPrintSchemaVersion { int get(); };" />
      <MemberSignature Language="F#" Value="member this.ClientPrintSchemaVersion : int" Usage="System.Printing.PrintQueue.ClientPrintSchemaVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает версию <see href="https://docs.microsoft.com/windows/desktop/printdocs/printschema">схемы печати</see>.</summary>
        <value>Версия [Print Schema](https://go.microsoft.com/fwlink/?LinkId=186397) используется.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 [Print Schema](https://go.microsoft.com/fwlink/?LinkId=186397) версии выпущены с Windows Vista-1.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=186397">Схема печати</related>
      </Docs>
    </Member>
    <Member MemberName="Comment">
      <MemberSignature Language="C#" Value="public virtual string Comment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Comment" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Comment" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Comment As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Comment { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Comment : string with get, set" Usage="System.Printing.PrintQueue.Comment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает комментарий к принтеру.</summary>
        <value>Комментарий к принтеру.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Комментарий является видимым для пользователей в списке Windows и в Windows стандартное диалоговое окно печати. Он может предоставить сведения, не содержит имя принтера, модель или свойства расположения, которые отображаются в тех же расположениях; Например «зарезервировано для заработной платы отдела между 3 pm и 16: 00». ( <xref:System.Printing.PrintQueue.Description%2A> Свойство позволяет хранить сведения, которые пользователи не смогут просматривать, если только приложение делает его видимым.)  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Commit">
      <MemberSignature Language="C#" Value="public override void Commit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Commit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Commit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Commit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Commit();" />
      <MemberSignature Language="F#" Value="override this.Commit : unit -&gt; unit" Usage="printQueue.Commit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Записывает текущие свойства объекта <see cref="T:System.Printing.PrintQueue" /> в действующую очередь печати на сервере печати.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Изменения, которые программа вносит в свойства <xref:System.Printing.PrintQueue> объект вступают в силу фактически пока программа выполняет <xref:System.Printing.PrintQueue.Commit%2A> метод.  
  
 Этого метода требуется, <xref:System.Printing.PrintQueue> создать объект с <xref:System.Printing.PrintSystemDesiredAccess.AdministratePrinter> права.  
  
   
  
## Examples  
 В следующем примере показано, как использование этого метода при слиянии двух билетов на печать.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Не удалось зафиксировать некоторые свойства.</exception>
        <exception cref="T:System.Printing.PrintCommitAttributesException">Не удалось зафиксировать некоторые свойства.  
  
-или- 
Объект <see cref="T:System.Printing.PrintQueue" /> не был создан с достаточными правами.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Refresh" />
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateXpsDocumentWriter">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Создает объект <see cref="T:System.Windows.Xps.XpsDocumentWriter" />.</summary>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">проверки соответствия isXPS</related>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef documentImageableArea As PrintDocumentImageableArea) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintDocumentImageableArea ^ % documentImageableArea);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter :  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter documentImageableArea" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">Ссылка на объект, который содержит размеры области станицы, на которой устройство может печатать. Этот параметр передается неинициализированным, потому что у его типа данных нет открытого конструктора.</param>
        <summary>Создает объект <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, открывает стандартное диалоговое окно печати Windows и возвращает параметр <see langword="ref" /> (<see langword="ByRef" /> в Visual Basic), представляющий сведения об области печати и размерах носителя.</summary>
        <returns>Объект <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, осуществляющий запись данных XPS в поток. Это может быть <see langword="null" />. (Параметр <paramref name="documentImageableArea" /> является <see langword="ref" /> [<see langword="ByRef" /> в Visual Basic] параметром, который инициализируется методом и представляет собой второй возвращаемый элемент.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Многие принтеры должны до одной четвертой дюйма непечатаемое пространства вокруг границы каждой страницы, для захвата для изменения листа и перемещаться принтера. В противном случае тонер запачкает механизм движения бумаги. Область, которая может быть распечатан является «области печати.»  
  
 Тип <xref:System.Printing.PrintDocumentImageableArea> не имеет открытого конструктора. Следовательно переменная `documentImageableArea` должен быть объявлен и назначены `null` и только затем передается в метод. Этот метод отображает <xref:System.Windows.Controls.PrintDialog> требуя ввода данных от пользователя. После того как пользователь выбранного принтера, размер бумаги и ориентацию и закрытия диалогового окна, `documentImageableArea` инициализируются точек на фактический объект и его свойства.  
  
 Если пользователь отменяет или закрывает диалоговое окно, возвращаемое значение не `null`. Как следствие, возвращаемое значение должны быть проверены на наличие `null` приложением.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">проверки соответствия isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (System.Printing.PrintQueue printQueue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintQueue printQueue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintQueue)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintQueue ^ printQueue);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter : System.Printing.PrintQueue -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter printQueue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printQueue" Type="System.Printing.PrintQueue" />
      </Parameters>
      <Docs>
        <param name="printQueue">Очередь для печати документа XPS.</param>
        <summary>Создает объект <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> и связывает его с указанной очередью печати.</summary>
        <returns>Объект <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, осуществляющий запись в поток XPS.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать этот метод для создания <xref:System.Windows.Xps.XpsDocumentWriter>.  
  
 [!code-csharp[XpsPrint#PrintQueueSnip](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsPrint/CSharp/XpsPrintHelper.cs#printqueuesnip)]
 [!code-vb[XpsPrint#PrintQueueSnip](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsPrint/visualbasic/xpsprinthelper.vb#printqueuesnip)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">проверки соответствия isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref double width, ref double height);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(float64&amp; width, float64&amp; height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Double@,System.Double@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef width As Double, ByRef height As Double) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(double % width, double % height);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter :  *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Double" RefType="ref" />
        <Parameter Name="height" Type="System.Double" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="width">Ширина документа XPS.</param>
        <param name="height">Высота документа XPS.</param>
        <summary>Создает объект <see cref="T:System.Windows.Xps.XpsDocumentWriter" /> с указанными размерами.</summary>
        <returns>Объект <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, осуществляющий запись в поток XPS. Это может быть <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод отображает <xref:System.Windows.Controls.PrintDialog> требуя ввода данных от пользователя. Если пользователь отменяет или закрывает диалоговое окно, возвращаемое значение не `null`. Как следствие, возвращаемое значение должны быть проверены на наличие `null` приложением.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">проверки соответствия isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (jobDescription As String, ByRef documentImageableArea As PrintDocumentImageableArea) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::String ^ jobDescription, System::Printing::PrintDocumentImageableArea ^ % documentImageableArea);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter : string *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (jobDescription, documentImageableArea)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">Имя для задания печати. Оно отображается в пользовательском интерфейсе печати Windows.</param>
        <param name="documentImageableArea">Ссылка на объект, который содержит размеры области станицы, на которой устройство может печатать. Этот параметр передается неинициализированным, потому что у его типа данных нет открытого конструктора.</param>
        <summary>Создает объект <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, открывает стандартное диалоговое окно печати Windows (и передает в него описание задания) и возвращает параметр <see langword="ref" /> (<see langword="ByRef" /> в Visual Basic), представляющий сведения об области печати и размерах носителя.</summary>
        <returns>Объект <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, осуществляющий запись данных XPS в поток. Это может быть <see langword="null" />. (Параметр <paramref name="documentImageableArea" /> является <see langword="ref" /> [<see langword="ByRef" /> в Visual Basic] параметром, который инициализируется методом и представляет собой второй возвращаемый элемент.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Многие принтеры должны до одной четвертой дюйма непечатаемое пространства вокруг границы каждой страницы, для захвата для изменения листа и перемещаться принтера. В противном случае тонер запачкает механизм движения бумаги. Область, которая может быть распечатан является «области печати.»  
  
 Тип <xref:System.Printing.PrintDocumentImageableArea> не имеет открытого конструктора. Следовательно переменная `documentImageableArea` должен быть объявлен и назначены `null` и только затем передается в метод. Этот метод отображает <xref:System.Windows.Controls.PrintDialog> требуя ввода данных от пользователя. После того как пользователь выбранного принтера, размер бумаги и ориентацию и закрытия диалогового окна, `documentImageableArea` инициализируются точек на фактический объект и его свойства.  
  
 Если пользователь отменяет или закрывает диалоговое окно, возвращаемое значение не `null`. Как следствие, возвращаемое значение должны быть проверены на наличие `null` приложением.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">проверки соответствия isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection&amp; pageRangeSelection, valuetype System.Windows.Controls.PageRange&amp; pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (ByRef documentImageableArea As PrintDocumentImageableArea, ByRef pageRangeSelection As PageRangeSelection, ByRef pageRange As PageRange) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::Printing::PrintDocumentImageableArea ^ % documentImageableArea, System::Windows::Controls::PageRangeSelection % pageRangeSelection, System::Windows::Controls::PageRange % pageRange);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter :  *  *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (documentImageableArea, pageRangeSelection, pageRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="documentImageableArea">Ссылка на объект, который содержит размеры области станицы, на которой устройство может печатать. Этот параметр передается неинициализированным, потому что у его типа данных нет открытого конструктора.</param>
        <param name="pageRangeSelection">Значение, указывающее, необходимо ли печатать все страницы или только диапазон, заданный пользователем.</param>
        <param name="pageRange">Печатаемый диапазон страниц.</param>
        <summary>Создает объект <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, открывает стандартный диалог печати Windows, передает в него диапазон страниц и описание задания печати и возвращает параметр <see langword="ref" /> (<see langword="ByRef" /> в Visual Basic), представляющий сведения об области печати и размерах носителя.</summary>
        <returns>Объект <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, осуществляющий запись данных XPS в поток. Это может быть <see langword="null" />. (Все параметры <paramref name="documentImageableArea" />, <paramref name="pageRangeSelection" /> и <paramref name="pageRange" /> являются параметрами <see langword="ref" /> [<see langword="ByRef" /> в Visual Basic], которые инициализируются пользователем и возвращаются при закрытии диалогового окна, поэтому каждый из них представляет собой дополнительный возвращаемый элемент.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Многие принтеры должны до одной четвертой дюйма непечатаемое пространства вокруг границы каждой страницы, для захвата для изменения листа и перемещаться принтера. В противном случае тонер запачкает механизм движения бумаги. Область, которая может быть распечатан является «области печати.»  
  
 Тип <xref:System.Printing.PrintDocumentImageableArea> не имеет открытого конструктора. Следовательно переменная `documentImageableArea` должен быть объявлен и назначены `null` и только затем передается в метод. Этот метод отображает <xref:System.Windows.Controls.PrintDialog> требуя ввода данных от пользователя. Пользователь настраивает задание печати в диалоговом окне (включая выбор принтера, размер бумаги, ориентацию и диапазон страниц). При закрытии диалогового окна, `pageRangeSelection` и `pageRange` имеют значения, и `documentImageableArea` на фактический объект, свойства которого инициализируются.  
  
 Если пользователь отменяет или закрывает диалоговое окно, возвращаемое значение не `null`. Как следствие, возвращаемое значение должны быть проверены на наличие `null` приложением.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">проверки соответствия isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CreateXpsDocumentWriter">
      <MemberSignature Language="C#" Value="public static System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter (string jobDescription, ref System.Printing.PrintDocumentImageableArea documentImageableArea, ref System.Windows.Controls.PageRangeSelection pageRangeSelection, ref System.Windows.Controls.PageRange pageRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Xps.XpsDocumentWriter CreateXpsDocumentWriter(string jobDescription, class System.Printing.PrintDocumentImageableArea&amp; documentImageableArea, valuetype System.Windows.Controls.PageRangeSelection&amp; pageRangeSelection, valuetype System.Windows.Controls.PageRange&amp; pageRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.CreateXpsDocumentWriter(System.String,System.Printing.PrintDocumentImageableArea@,System.Windows.Controls.PageRangeSelection@,System.Windows.Controls.PageRange@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateXpsDocumentWriter (jobDescription As String, ByRef documentImageableArea As PrintDocumentImageableArea, ByRef pageRangeSelection As PageRangeSelection, ByRef pageRange As PageRange) As XpsDocumentWriter" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Xps::XpsDocumentWriter ^ CreateXpsDocumentWriter(System::String ^ jobDescription, System::Printing::PrintDocumentImageableArea ^ % documentImageableArea, System::Windows::Controls::PageRangeSelection % pageRangeSelection, System::Windows::Controls::PageRange % pageRange);" />
      <MemberSignature Language="F#" Value="static member CreateXpsDocumentWriter : string *  *  *  -&gt; System.Windows.Xps.XpsDocumentWriter" Usage="System.Printing.PrintQueue.CreateXpsDocumentWriter (jobDescription, documentImageableArea, pageRangeSelection, pageRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Xps.XpsDocumentWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobDescription" Type="System.String" />
        <Parameter Name="documentImageableArea" Type="System.Printing.PrintDocumentImageableArea" RefType="ref" />
        <Parameter Name="pageRangeSelection" Type="System.Windows.Controls.PageRangeSelection" RefType="ref" />
        <Parameter Name="pageRange" Type="System.Windows.Controls.PageRange" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="jobDescription">Имя для задания печати. Оно отображается в пользовательском интерфейсе печати Windows.</param>
        <param name="documentImageableArea">Ссылка на объект, который содержит размеры области станицы, на которой устройство может печатать. Этот параметр передается неинициализированным, потому что у его типа данных нет открытого конструктора.</param>
        <param name="pageRangeSelection">Значение, указывающее, необходимо ли печатать все страницы или только диапазон, заданный пользователем.</param>
        <param name="pageRange">Печатаемый диапазон страниц.</param>
        <summary>Создает объект <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, открывает стандартное диалоговое окно печати Windows, передает в него диапазон страниц и возвращает параметр <see langword="ref" /> (<see langword="ByRef" /> в Visual Basic), представляющий сведения об области печати и размерах носителя.</summary>
        <returns>Объект <see cref="T:System.Windows.Xps.XpsDocumentWriter" />, осуществляющий запись данных XPS в поток. Это может быть <see langword="null" />. (Все параметры <paramref name="documentImageableArea" />, <paramref name="pageRangeSelection" /> и <paramref name="pageRange" /> являются параметрами <see langword="ref" /> [<see langword="ByRef" /> в Visual Basic], которые инициализируются пользователем и возвращаются при закрытии диалогового окна, поэтому каждый из них представляет собой дополнительный возвращаемый элемент.)</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Многие принтеры должны до одной четвертой дюйма непечатаемое пространства вокруг границы каждой страницы, для захвата для изменения листа и перемещаться принтера. В противном случае тонер запачкает механизм движения бумаги. Область, которая может быть распечатан является «области печати.»  
  
 Тип <xref:System.Printing.PrintDocumentImageableArea> не имеет открытого конструктора. Следовательно переменная `documentImageableArea` должен быть объявлен и назначены `null` и только затем передается в метод. Этот метод отображает <xref:System.Windows.Controls.PrintDialog> требуя ввода данных от пользователя. Пользователь настраивает задание печати в диалоговом окне (включая выбор принтера, размер бумаги, ориентацию и диапазон страниц). При закрытии диалогового окна, `pageRangeSelection` и `pageRange` имеют значения, и `documentImageableArea` на фактический объект, свойства которого инициализируются.  
  
 Если пользователь отменяет или закрывает диалоговое окно, возвращаемое значение не `null`. Как следствие, возвращаемое значение должны быть проверены на наличие `null` приложением.  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/bfbb433f-7ab6-417a-90f0-71443d76bcb3">проверки соответствия isXPS</related>
      </Docs>
    </Member>
    <Member MemberName="CurrentJobSettings">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobSettings CurrentJobSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintJobSettings CurrentJobSettings" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.CurrentJobSettings" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CurrentJobSettings As PrintJobSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintJobSettings ^ CurrentJobSettings { System::Printing::PrintJobSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CurrentJobSettings : System.Printing.PrintJobSettings" Usage="System.Printing.PrintQueue.CurrentJobSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает объект, который содержит параметры конфигурации для текущего задания печати.</summary>
        <value>Значение <see cref="T:System.Printing.PrintJobSettings" />, содержащее параметры задания, которое печатается в текущий момент. Эти параметры включают описание задания и ссылку на его <see cref="T:System.Printing.PrintTicket" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Printing.PrintTicket" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket DefaultPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket DefaultPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultPrintTicket As PrintTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintTicket ^ DefaultPrintTicket { System::Printing::PrintTicket ^ get(); void set(System::Printing::PrintTicket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultPrintTicket : System.Printing.PrintTicket with get, set" Usage="System.Printing.PrintQueue.DefaultPrintTicket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает параметры принтера по умолчанию, связанные с данной очередью <see cref="T:System.Printing.PrintQueue" />.</summary>
        <value>Объект <see cref="T:System.Printing.PrintTicket" /> по умолчанию для очереди печати или <see langword="null" />, если в очереди печати произошла ошибка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Значение по умолчанию <xref:System.Printing.PrintTicket> указывает параметры задания печати, таких как <xref:System.Printing.PrintTicket.CopyCount%2A>, <xref:System.Printing.PrintTicket.PageOrientation%2A>, <xref:System.Printing.PrintTicket.Duplexing%2A>, <xref:System.Printing.PrintTicket.Stapling%2A>и другие.  
  
 Каждый <xref:System.Printing.PrintQueue> есть собственный <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A>.  
  
 Во время работы <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> возвращает <xref:System.Printing.PrintTicket>.  Если <xref:System.Printing.PrintQueue> обнаруживает недопустимое состояние, <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> возвращает `null`.  Если <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> возвращает `null`, приложение должно Показать информационное диалоговое окно пользователя, ошибка очереди печати, и что следует перезапустить задание печати с выходными данными, направленных в другую очередь печати.  
  
 Получение или установка <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> не проверяет свойство <xref:System.Printing.PrintTicket>.  <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A> Метод можно использовать для проверки <xref:System.Printing.PrintTicket>.  
  
   
  
## Examples  
 В следующем примере показано, как это свойство используется при тестировании возможностей принтера и настройке задания печати для их использования.  
  
 [!code-cpp[XpsCreate#PrinterCapabilities](~/samples/snippets/cpp/VS_Snippets_Wpf/XpsCreate/CPP/XpsCreate.cpp#printercapabilities)]
 [!code-csharp[XpsCreate#PrinterCapabilities](~/samples/snippets/csharp/VS_Snippets_Wpf/XpsCreate/CSharp/XpsCreate.cs#printercapabilities)]
 [!code-vb[XpsCreate#PrinterCapabilities](~/samples/snippets/visualbasic/VS_Snippets_Wpf/XpsCreate/visualbasic/xpscreate.vb#printercapabilities)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.UserPrintTicket" />
        <altmember cref="P:System.Printing.PrintQueue.DefaultPriority" />
      </Docs>
    </Member>
    <Member MemberName="DefaultPriority">
      <MemberSignature Language="C#" Value="public virtual int DefaultPriority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DefaultPriority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.DefaultPriority" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property DefaultPriority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int DefaultPriority { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultPriority : int with get, set" Usage="System.Printing.PrintQueue.DefaultPriority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает приоритет по умолчанию, который назначается каждому новому зданию печати, добавляемому в очередь.</summary>
        <value>Приоритет по умолчанию для заданий печати, добавляемых в очередь. Возможные значения лежат в диапазоне от 1 до 99. Значение по умолчанию — 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Приоритет задания печати могут изменяться пользователями после того, он вводит очереди печати.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Description">
      <MemberSignature Language="C#" Value="public virtual string Description { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Description" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Description" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Description As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Description { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Description : string" Usage="System.Printing.PrintQueue.Description" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает описание очереди печати.</summary>
        <value>Описание очереди печати.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда создается очередь, описание по умолчанию на три части строку, которая состоит из имени очереди, модели и расположение, разделенных запятыми. Контрастность <xref:System.Printing.PrintQueue.Description%2A> свойство с <xref:System.Printing.PrintQueue.Comment%2A> свойство, которое отображается для пользователей в стандартное диалоговое окно печати и в списке принтеры и факсы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.FullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Printing.PrintQueue.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает полное имя очереди.</summary>
        <value>Полное имя очереди печати.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Для очередей печати на локальный сервер печати, значение этого свойства идентично <xref:System.Printing.PrintQueue.Name%2A>, в противном случае он содержит полное имя UNC (Universal Naming Convention).  
  
 <xref:System.Printing.PrintQueue> Объект также имеет для записи <xref:System.Printing.PrintQueue.Name%2A> и <xref:System.Printing.PrintQueue.ShareName%2A> свойства.  
  
   
  
## Examples  
 В следующем примере показано, как это свойство используется при слиянии двух билетов на печать.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetJob">
      <MemberSignature Language="C#" Value="public System.Printing.PrintSystemJobInfo GetJob (int jobId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintSystemJobInfo GetJob(int32 jobId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetJob(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetJob (jobId As Integer) As PrintSystemJobInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintSystemJobInfo ^ GetJob(int jobId);" />
      <MemberSignature Language="F#" Value="member this.GetJob : int -&gt; System.Printing.PrintSystemJobInfo" Usage="printQueue.GetJob jobId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintSystemJobInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="jobId">Номер задания в очереди.</param>
        <summary>Получает задание печати с заданным идентификатором.</summary>
        <returns>Объект <see cref="T:System.Printing.PrintSystemJobInfo" />, указывающий свойства и состояние задания.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Можно также использовать <xref:System.Printing.PrintSystemJobInfo.Get%2A?displayProperty=nameWithType> метода для той же цели.  
  
   
  
## Examples  
 В следующем примере показано, как для использования этого метода при диагностике проблемы, связанной с заданием печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Printing.PrintSystemJobInfo.Get(System.Printing.PrintQueue,System.Int32)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPrintCapabilities">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Получает объект <see cref="T:System.Printing.PrintCapabilities" />, указывающий возможности принтера или другого устройства, например возможность цветной или двухсторонней печати.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintCapabilities () As PrintCapabilities" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintCapabilities ^ GetPrintCapabilities();" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilities : unit -&gt; System.Printing.PrintCapabilities" Usage="printQueue.GetPrintCapabilities " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Получает объект <see cref="T:System.Printing.PrintCapabilities" />, указывающий возможности принтера.</summary>
        <returns>Объект <see cref="T:System.Printing.PrintCapabilities" />, указывающий, что может и чего не может принтер, например двухстороннее копирование или автоматическое сшивание.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использование этого метода при слиянии двух билетов на печать.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Не удалось извлечь объект <see cref="T:System.Printing.PrintCapabilities" />.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">разрешение на получение возможности принтера. Связанное перечисление: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilities">
      <MemberSignature Language="C#" Value="public System.Printing.PrintCapabilities GetPrintCapabilities (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintCapabilities GetPrintCapabilities(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilities(System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintCapabilities ^ GetPrintCapabilities(System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilities : System.Printing.PrintTicket -&gt; System.Printing.PrintCapabilities" Usage="printQueue.GetPrintCapabilities printTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintCapabilities</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">Билет на печать, на основе которого сообщаются возможности принтера.</param>
        <summary>Получает объект <see cref="T:System.Printing.PrintCapabilities" />, указывающий возможности принтера.</summary>
        <returns>Объект <see cref="T:System.Printing.PrintCapabilities" />, указывающий, что может и чего не может принтер, например двухстороннее копирование или автоматическое сшивание.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintTicket> Параметр используется в качестве основы для которого требуется построить <xref:System.Printing.PrintCapabilities> объекта. Например предположим, что принтер поддерживает только типы носителей A и B из входной лоток 1 и поддерживается только тип носителя C из входного лотка 2. Если `printTicket` параметр указан входной лоток 1, а затем <xref:System.Printing.PrintCapabilities> возвращаемый объект будет включать все три типа носителей, но он будет сообщать о типа C, как «ограниченный». Если `printTicket` параметр указан входной лоток 2, а затем <xref:System.Printing.PrintCapabilities> возвращаемый объект будет включать все три типа носителей, но он будет сообщать о типов A и B, как «ограниченный». См. в разделе [Print Schema](https://go.microsoft.com/fwlink/?LinkId=186397) Дополнительные сведения об ограничениях.  
  
 Если `printTicket` — `null`, <xref:System.Printing.PrintQueue.UserPrintTicket%2A> используется.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Не удалось извлечь объект <see cref="T:System.Printing.PrintCapabilities" />.</exception>
        <exception cref="T:System.ArgumentException">Объект <paramref name="printTicket" /> имеет неправильный формат.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">разрешение на получение возможности принтера. Связанное перечисление: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetPrintCapabilitiesAsXml">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Возвращает объект <see cref="T:System.IO.MemoryStream" />, определяющий возможности принтера в виде XML-потока, компилируемого с помощью [схемы печати](https://go.microsoft.com/fwlink/?LinkId=186397).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Схема XML, используемая называется «PrintCapabilities», часть [Print Schema](https://go.microsoft.com/fwlink/?LinkId=186397) системы.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintCapabilitiesAsXml () As MemoryStream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::MemoryStream ^ GetPrintCapabilitiesAsXml();" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilitiesAsXml : unit -&gt; System.IO.MemoryStream" Usage="printQueue.GetPrintCapabilitiesAsXml " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает объект <see cref="T:System.IO.MemoryStream" />, определяющий возможности принтера в виде XML-потока, компилируемого с помощью [схемы печати](https://go.microsoft.com/fwlink/?LinkId=186397).</summary>
        <returns>Объект <see cref="T:System.IO.MemoryStream" />, определяющий возможности принтера с использованием XML-схемы PrintCapabilities, входящей в состав системы <see href="https://docs.microsoft.com/windows/desktop/printdocs/printschema">схемы печати</see>.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintQueueException">Не удалось получить возможности печати.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">разрешение на получение возможности принтера. Связанное перечисление: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintCapabilitiesAsXml">
      <MemberSignature Language="C#" Value="public System.IO.MemoryStream GetPrintCapabilitiesAsXml (System.Printing.PrintTicket printTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.MemoryStream GetPrintCapabilitiesAsXml(class System.Printing.PrintTicket printTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintCapabilitiesAsXml(System.Printing.PrintTicket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::MemoryStream ^ GetPrintCapabilitiesAsXml(System::Printing::PrintTicket ^ printTicket);" />
      <MemberSignature Language="F#" Value="member this.GetPrintCapabilitiesAsXml : System.Printing.PrintTicket -&gt; System.IO.MemoryStream" Usage="printQueue.GetPrintCapabilitiesAsXml printTicket" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IO.MemoryStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="printTicket">Билет на печать, на основе которого сообщаются возможности принтера.</param>
        <summary>Возвращает объект <see cref="T:System.IO.MemoryStream" />, указывающий возможности принтера в формате XML, компилируемого с помощью [схемы печати](https://go.microsoft.com/fwlink/?LinkId=186397).</summary>
        <returns>Объект <see cref="T:System.IO.MemoryStream" />, определяющий возможности принтера с использованием XML-схемы PrintCapabilities, входящей в состав системы <see href="https://docs.microsoft.com/windows/desktop/printdocs/printschema">схемы печати</see>.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintTicket> Параметр используется в качестве основы, на котором для создания XML с возможностями печати. Например предположим, что принтер поддерживает только типы носителей A и B из входной лоток 1 и поддерживается только тип носителя C из входного лотка 2. Если `printTicket` параметр указан входной лоток 1, то XML, который возвращается с возможностями печати будет включать все три типа носителей, но он будет сообщать о типа C, как «ограниченный». Если `printTicket` параметр указан входной лоток 2, то XML, который возвращается с возможностями печати будет включать все три типа носителей, но он будет сообщать о типов A и B, как «ограниченный». См. в разделе [Print Schema](https://go.microsoft.com/fwlink/?LinkId=186397) Дополнительные сведения об ограничениях.  
  
 Если `printTicket` — `null`, <xref:System.Printing.PrintQueue.UserPrintTicket%2A> используется.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintQueueException">Не удалось получить возможности печати.</exception>
        <exception cref="T:System.ArgumentException">Объект <paramref name="printTicket" /> имеет неправильный формат.</exception>
        <permission cref="T:System.Drawing.Printing.PrintingPermission">разрешение на получение возможности принтера. Связанное перечисление: <see cref="F:System.Drawing.Printing.PrintingPermissionLevel.DefaultPrinting" /></permission>
      </Docs>
    </Member>
    <Member MemberName="GetPrintJobInfoCollection">
      <MemberSignature Language="C#" Value="public System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Printing.PrintJobInfoCollection GetPrintJobInfoCollection() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.GetPrintJobInfoCollection" />
      <MemberSignature Language="VB.NET" Value="Public Function GetPrintJobInfoCollection () As PrintJobInfoCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::PrintJobInfoCollection ^ GetPrintJobInfoCollection();" />
      <MemberSignature Language="F#" Value="member this.GetPrintJobInfoCollection : unit -&gt; System.Printing.PrintJobInfoCollection" Usage="printQueue.GetPrintJobInfoCollection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintJobInfoCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Создает коллекцию, в которой для каждого задания из очереди содержится объект <see cref="T:System.Printing.PrintSystemJobInfo" />.</summary>
        <returns>Коллекция объектов <see cref="T:System.Printing.PrintSystemJobInfo" />. Для каждого задания из очереди имеется один объект.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Приведенный ниже показано, как использовать этот метод при выполнении те же действия для каждого задания в очереди.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#enumeratejobsinqueues)]
 [!code-csharp[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#enumeratejobsinqueues)]
 [!code-vb[DiagnoseProblematicPrintJob#EnumerateJobsInQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#enumeratejobsinqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasPaperProblem">
      <MemberSignature Language="C#" Value="public bool HasPaperProblem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasPaperProblem" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasPaperProblem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasPaperProblem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasPaperProblem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasPaperProblem : bool" Usage="System.Printing.PrintQueue.HasPaperProblem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее наличие на принтере неопределенной проблемы с бумагой.</summary>
        <value>Значение <see langword="true" /> при наличии неопределенной проблемы с бумагой; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 <xref:System.Printing.PrintQueue> Объект также имеет <xref:System.Printing.PrintQueue.IsPaperJammed%2A> и <xref:System.Printing.PrintQueue.IsOutOfPaper%2A> свойства.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasToner">
      <MemberSignature Language="C#" Value="public bool HasToner { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasToner" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HasToner" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasToner As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasToner { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasToner : bool" Usage="System.Printing.PrintQueue.HasToner" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее наличие тонера в принтере.</summary>
        <value>Значение <see langword="true" />, если в текущем принтере есть тонер; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Некоторые производители принтеров могут использовать этот сигнал, чтобы указать, что достаточно количества тонера. Другие могут использовать для обозначения картридж присутствует и правильно вставлена при использовании <xref:System.Printing.PrintQueue.IsTonerLow%2A> для указания количества тонера недостаточно.  
  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HostingPrintServer">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintServer HostingPrintServer { get; protected set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintServer HostingPrintServer" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.HostingPrintServer" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property HostingPrintServer As PrintServer" />
      <MemberSignature Language="C++ CLI" Value="public:  virtual property System::Printing::PrintServer ^ HostingPrintServer {  public:&#xA;System::Printing::PrintServer ^ get(); protected:&#xA; void set(System::Printing::PrintServer ^ value); };" />
      <MemberSignature Language="F#" Value="member this.HostingPrintServer : System.Printing.PrintServer with get, set" Usage="System.Printing.PrintQueue.HostingPrintServer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintServer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает (защищенное свойство) сервер печати, управляющий очередью печати.</summary>
        <value>Имя и другие свойства объекта <see cref="T:System.Printing.PrintServer" />, на котором размещается очередь печати.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство может задаваться только классом, который является производным от <xref:System.Printing.PrintQueue> потому, что метод задания значения этого свойства — `protected`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InPartialTrust">
      <MemberSignature Language="C#" Value="public bool InPartialTrust { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InPartialTrust" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.InPartialTrust" />
      <MemberSignature Language="VB.NET" Value="Public Property InPartialTrust As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool InPartialTrust { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.InPartialTrust : bool with get, set" Usage="System.Printing.PrintQueue.InPartialTrust" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, работает ли очередь в режиме неполного доверия, который является более высоким уровнем доверия.</summary>
        <value>Значение <see langword="true" />, если очередь работает в режиме неполного доверия; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Когда <xref:System.Printing.PrintQueue.InPartialTrust%2A> свойство `true`, программы не удается создать <xref:System.Printing.PrintQueue> , представляющий данный принтер, если пользователь имеет все разрешения печати для принтера.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InternalDispose">
      <MemberSignature Language="C#" Value="protected override sealed void InternalDispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void InternalDispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.InternalDispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides NotOverridable Sub InternalDispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void InternalDispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.InternalDispose : bool -&gt; unit" Usage="printQueue.InternalDispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Значение <see langword="true" /> позволяет освободить управляемые и неуправляемые ресурсы; значение <see langword="false" /> позволяет освободить только неуправляемые ресурсы.</param>
        <summary>Освобождает неуправляемые ресурсы, используемые объектом <see cref="T:System.Printing.PrintQueue" />, а при необходимости освобождает также управляемые ресурсы.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBidiEnabled">
      <MemberSignature Language="C#" Value="public bool IsBidiEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBidiEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBidiEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBidiEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBidiEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBidiEnabled : bool" Usage="System.Printing.PrintQueue.IsBidiEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, включена ли двунаправленная связь с принтером.</summary>
        <value>Значение <see langword="true" />, если двунаправленная связь с принтером включена; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBusy">
      <MemberSignature Language="C#" Value="public bool IsBusy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBusy" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsBusy" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBusy As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBusy { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBusy : bool" Usage="System.Printing.PrintQueue.IsBusy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, занято ли устройство печати.</summary>
        <value>Значение <see langword="true" />, если устройство занято; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Занят не означает, что оно обрабатывает задание печати. Если устройство не соответствует сочетание принтера/факс/копированием, то возможно, оно факсимильные сообщения или копирования. Сравнить с <xref:System.Printing.PrintQueue.IsProcessing%2A> свойство.  
  
 Если устройство не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDevQueryEnabled">
      <MemberSignature Language="C#" Value="public bool IsDevQueryEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDevQueryEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDevQueryEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDevQueryEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDevQueryEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDevQueryEnabled : bool" Usage="System.Printing.PrintQueue.IsDevQueryEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, есть ли в очереди документы с несовпадающими конфигурациями документа и принтера.</summary>
        <value>Значение <see langword="true" /> если в очереди содержатся несовпадающие конфигурации; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDirect">
      <MemberSignature Language="C#" Value="public bool IsDirect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDirect" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDirect" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDirect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDirect { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDirect : bool" Usage="System.Printing.PrintQueue.IsDirect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, печатаются ли документы сразу на принтере или сначала буферизуются, а потом печатаются.</summary>
        <value>Значение <see langword="true" />, если документы сразу печатаются на принтере; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство можно задать только с помощью Windows стандартное диалоговое окно печати.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDoorOpened">
      <MemberSignature Language="C#" Value="public bool IsDoorOpened { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDoorOpened" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsDoorOpened" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDoorOpened As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDoorOpened { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDoorOpened : bool" Usage="System.Printing.PrintQueue.IsDoorOpened" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, открыта ли дверца на принтере.</summary>
        <value>Значение <see langword="true" />, если дверца открыта; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsHidden">
      <MemberSignature Language="C#" Value="public bool IsHidden { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsHidden" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsHidden" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsHidden As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsHidden { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsHidden : bool" Usage="System.Printing.PrintQueue.IsHidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, скрыта ли очередь печати в пользовательском интерфейсе приложения.</summary>
        <value>Значение <see langword="true" />, если очередь печати скрыта в пользовательском интерфейсе Windows; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Вам не следует скрывать автоматически очереди печати при установке этого свойства `true`. Программа по-прежнему необходимо выполнить действия, чтобы убедиться в том, что он не отображается в любой список очередей в интерфейсе программы.  
  
 Очередей печати не может быть скрыты в пользовательском интерфейсе Windows, например, принтеры и факсы список.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInError">
      <MemberSignature Language="C#" Value="public bool IsInError { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInError" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInError" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInError { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInError : bool" Usage="System.Printing.PrintQueue.IsInError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, есть ли ошибки в работе принтера или другого устройства.</summary>
        <value>Значение <see langword="true" />, если в работе устройства есть ошибки; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitializing">
      <MemberSignature Language="C#" Value="public bool IsInitializing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitializing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsInitializing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInitializing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitializing { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInitializing : bool" Usage="System.Printing.PrintQueue.IsInitializing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, инициализируется ли принтер самостоятельно.</summary>
        <value>Значение <see langword="true" />, если принтер инициализируется; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIOActive">
      <MemberSignature Language="C#" Value="public bool IsIOActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIOActive" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsIOActive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIOActive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIOActive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsIOActive : bool" Usage="System.Printing.PrintQueue.IsIOActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, выполняется ли на принтере получение или отправка данных или сигналов.</summary>
        <value>Значение <see langword="true" />, если принтер получает или отправляет данные или сигналы; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsManualFeedRequired">
      <MemberSignature Language="C#" Value="public bool IsManualFeedRequired { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsManualFeedRequired" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsManualFeedRequired" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsManualFeedRequired As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsManualFeedRequired { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsManualFeedRequired : bool" Usage="System.Printing.PrintQueue.IsManualFeedRequired" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, необходима ли для текущего задания печати ручная подача бумаги в принтер.</summary>
        <value>Значение <see langword="true" />, если необходима ручная подача бумаги в принтер; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotAvailable">
      <MemberSignature Language="C#" Value="public bool IsNotAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotAvailable" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsNotAvailable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotAvailable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotAvailable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotAvailable : bool" Usage="System.Printing.PrintQueue.IsNotAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, доступен ли принтер.</summary>
        <value>Значение <see langword="true" />, если принтер доступен; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOffline">
      <MemberSignature Language="C#" Value="public bool IsOffline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOffline" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOffline" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOffline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOffline { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOffline : bool" Usage="System.Printing.PrintQueue.IsOffline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, отключен ли принтер.</summary>
        <value>Значение <see langword="true" />, если принтер отключен; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfMemory">
      <MemberSignature Language="C#" Value="public bool IsOutOfMemory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfMemory" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfMemory" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutOfMemory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutOfMemory { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutOfMemory : bool" Usage="System.Printing.PrintQueue.IsOutOfMemory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, имеется ли на принтере нехватка памяти.</summary>
        <value>Значение <see langword="true" />, если принтеру недостаточно памяти; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutOfPaper">
      <MemberSignature Language="C#" Value="public bool IsOutOfPaper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutOfPaper" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutOfPaper" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutOfPaper As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutOfPaper { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutOfPaper : bool" Usage="System.Printing.PrintQueue.IsOutOfPaper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, необходимо ли перезагрузить в принтер бумагу необходимого размера для текущего задания.</summary>
        <value>Значение <see langword="true" />, если необходимо перезагрузить бумагу; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOutputBinFull">
      <MemberSignature Language="C#" Value="public bool IsOutputBinFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOutputBinFull" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsOutputBinFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOutputBinFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOutputBinFull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOutputBinFull : bool" Usage="System.Printing.PrintQueue.IsOutputBinFull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, есть ли опасность переполнения области вывода принтера.</summary>
        <value>Значение <see langword="true" />, если область вывода принтера полностью заполнена; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaperJammed">
      <MemberSignature Language="C#" Value="public bool IsPaperJammed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaperJammed" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaperJammed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaperJammed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaperJammed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPaperJammed : bool" Usage="System.Printing.PrintQueue.IsPaperJammed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, застрял ли в принтере текущий лист бумаги.</summary>
        <value>Значение <see langword="true" />, если бумага застряла; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPaused">
      <MemberSignature Language="C#" Value="public bool IsPaused { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPaused" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPaused" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPaused As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPaused { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPaused : bool" Usage="System.Printing.PrintQueue.IsPaused" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, приостановлена ли очередь печати.</summary>
        <value>Значение <see langword="true" />, если очередь печати приостановлена; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPendingDeletion">
      <MemberSignature Language="C#" Value="public bool IsPendingDeletion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPendingDeletion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPendingDeletion" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPendingDeletion As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPendingDeletion { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPendingDeletion : bool" Usage="System.Printing.PrintQueue.IsPendingDeletion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, находится ли принтер в процессе удаления задания печати.</summary>
        <value>Значение <see langword="true" />, если на принтере выполняется удаление задания печати; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPowerSaveOn">
      <MemberSignature Language="C#" Value="public bool IsPowerSaveOn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPowerSaveOn" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPowerSaveOn" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPowerSaveOn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPowerSaveOn { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPowerSaveOn : bool" Usage="System.Printing.PrintQueue.IsPowerSaveOn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, находится ли принтер в режиме экономии энергии.</summary>
        <value>Значение <see langword="true" />, если принтер находится в режиме экономии энергии; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrinting">
      <MemberSignature Language="C#" Value="public bool IsPrinting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrinting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPrinting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrinting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrinting { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrinting : bool" Usage="System.Printing.PrintQueue.IsPrinting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, выполняется ли печать задания.</summary>
        <value>Значение <see langword="true" />, если выполняется печать задания; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsProcessing">
      <MemberSignature Language="C#" Value="public bool IsProcessing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsProcessing" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsProcessing As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsProcessing { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsProcessing : bool" Usage="System.Printing.PrintQueue.IsProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, обрабатывает ли принтер задание печати.</summary>
        <value>Значение <see langword="true" />, если принтер обрабатывает задание печати; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Некоторые производители принтеров поддерживают этот сигнал, а не меньше конкретный <xref:System.Printing.PrintQueue.IsBusy%2A>.  
  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublished">
      <MemberSignature Language="C#" Value="public bool IsPublished { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublished" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsPublished" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublished As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublished { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublished : bool" Usage="System.Printing.PrintQueue.IsPublished" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, видят ли принтер другие сетевые пользователи.</summary>
        <value>Значение <see langword="true" />, если другие сетевые пользователи видят принтер; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsQueued">
      <MemberSignature Language="C#" Value="public bool IsQueued { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsQueued" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsQueued" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsQueued As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsQueued { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsQueued : bool" Usage="System.Printing.PrintQueue.IsQueued" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, поддерживает ли принтер очередь, в которой одновременно содержатся несколько заданий печати.</summary>
        <value>Значение <see langword="true" />, если принтер поддерживает очереди с несколькими заданиями печати; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRawOnlyEnabled">
      <MemberSignature Language="C#" Value="public bool IsRawOnlyEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRawOnlyEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsRawOnlyEnabled" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsRawOnlyEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsRawOnlyEnabled { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsRawOnlyEnabled : bool" Usage="System.Printing.PrintQueue.IsRawOnlyEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, может ли очередь печати использовать расширенный метафайл (EMF), ускоряющий поток данных от приложения, которое осуществляет печать, к диспетчеру очереди Windows.</summary>
        <value>Значение <see langword="true" />, если принтер не может использовать для печати расширенный метафайл (EMF); в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsServerUnknown">
      <MemberSignature Language="C#" Value="public bool IsServerUnknown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsServerUnknown" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsServerUnknown" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsServerUnknown As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsServerUnknown { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsServerUnknown : bool" Usage="System.Printing.PrintQueue.IsServerUnknown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, находится ли принтер в состоянии ошибки.</summary>
        <value>Значение <see langword="true" />, если принтер находится в состоянии ошибки; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsShared">
      <MemberSignature Language="C#" Value="public bool IsShared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsShared" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsShared" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsShared As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsShared { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsShared : bool" Usage="System.Printing.PrintQueue.IsShared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, доступен ли принтер для использования другими компьютерами в сети.</summary>
        <value>Значение <see langword="true" />, если это общий принтер; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство можно задать только с помощью Windows стандартное диалоговое окно печати.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTonerLow">
      <MemberSignature Language="C#" Value="public bool IsTonerLow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTonerLow" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsTonerLow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsTonerLow As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTonerLow { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsTonerLow : bool" Usage="System.Printing.PrintQueue.IsTonerLow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, заканчивается ли на принтере тонер.</summary>
        <value>Значение <see langword="true" />, если на принтере заканчивается тонер; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 <xref:System.Printing.PrintQueue> Объект также имеет <xref:System.Printing.PrintQueue.HasToner%2A> свойства.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWaiting">
      <MemberSignature Language="C#" Value="public bool IsWaiting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWaiting" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWaiting" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWaiting As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWaiting { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWaiting : bool" Usage="System.Printing.PrintQueue.IsWaiting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, ожидает ли очередь добавления задания.</summary>
        <value>Значение <see langword="true" />, если очередь ожидает задание; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWarmingUp">
      <MemberSignature Language="C#" Value="public bool IsWarmingUp { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWarmingUp" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsWarmingUp" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsWarmingUp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsWarmingUp { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsWarmingUp : bool" Usage="System.Printing.PrintQueue.IsWarmingUp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, прогревается ли принтер.</summary>
        <value>Значение <see langword="true" />, если принтер прогревается; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsXpsDevice">
      <MemberSignature Language="C#" Value="public bool IsXpsDevice { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsXpsDevice" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.IsXpsDevice" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsXpsDevice As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsXpsDevice { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsXpsDevice : bool" Usage="System.Printing.PrintQueue.IsXpsDevice" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает значение, указывающее, построен ли драйвер принтера на принципах, описанных в разделе [Общие сведения о печати](~/docs/framework/wpf/advanced/printing-overview.md), и, следовательно, использует ли он [!INCLUDE[TLA#tla_xps](~/includes/tlasharptla-xps-md.md)] в качестве языка описания страниц.</summary>
        <value><see langword="true" /> Если принтер использует [Обзор печати](~/docs/framework/wpf/advanced/printing-overview.md); в противном случае <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeepPrintedJobs">
      <MemberSignature Language="C#" Value="public bool KeepPrintedJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeepPrintedJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.KeepPrintedJobs" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeepPrintedJobs As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool KeepPrintedJobs { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.KeepPrintedJobs : bool" Usage="System.Printing.PrintQueue.KeepPrintedJobs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, сохраняет ли очередь языковой файл принтера, вместо того, чтобы удалить его после печати.</summary>
        <value>Значение <see langword="true" />, если очередь сохраняет языковой файл принтера; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Location">
      <MemberSignature Language="C#" Value="public virtual string Location { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Location" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Location" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Location As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Location { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Location : string with get, set" Usage="System.Printing.PrintQueue.Location" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает физическое расположение принтера.</summary>
        <value>Физическое расположение принтера.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как использовать это свойство списка подмножество доступных очередей печати.  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxPrintSchemaVersion">
      <MemberSignature Language="C#" Value="public static int MaxPrintSchemaVersion { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 MaxPrintSchemaVersion" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.MaxPrintSchemaVersion" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property MaxPrintSchemaVersion As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property int MaxPrintSchemaVersion { int get(); };" />
      <MemberSignature Language="F#" Value="member this.MaxPrintSchemaVersion : int" Usage="System.Printing.PrintQueue.MaxPrintSchemaVersion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Возвращает номер самой последней версии [схемы печати](https://go.microsoft.com/fwlink/?LinkId=186397), которая может использоваться очередью.</summary>
        <value>Номер самой последней версии [Print Schema](https://go.microsoft.com/fwlink/?LinkId=186397) , может использоваться очередью.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Версия [Print Schema](https://go.microsoft.com/fwlink/?LinkId=186397) выпущен вместе с Windows Vista-1.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://go.microsoft.com/fwlink/?LinkId=186397">Схема печати</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="MergeAndValidatePrintTicket">
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Выполняет слияние двух объектов <see cref="T:System.Printing.PrintTicket" /> и гарантирует, что конечный объект <see cref="T:System.Printing.PrintTicket" /> будет допустимым и ему не потребуются какие-либо возможности печати, не поддерживаемые принтером.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket)" />
      <MemberSignature Language="VB.NET" Value="Public Function MergeAndValidatePrintTicket (basePrintTicket As PrintTicket, deltaPrintTicket As PrintTicket) As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::ValidationResult MergeAndValidatePrintTicket(System::Printing::PrintTicket ^ basePrintTicket, System::Printing::PrintTicket ^ deltaPrintTicket);" />
      <MemberSignature Language="F#" Value="member this.MergeAndValidatePrintTicket : System.Printing.PrintTicket * System.Printing.PrintTicket -&gt; System.Printing.ValidationResult" Usage="printQueue.MergeAndValidatePrintTicket (basePrintTicket, deltaPrintTicket)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">Первый билет на печать.</param>
        <param name="deltaPrintTicket">Второй билет на печать. Это может быть <see langword="null" />.</param>
        <summary>Выполняет слияние двух объектов <see cref="T:System.Printing.PrintTicket" /> и гарантирует, что конечный объект <see cref="T:System.Printing.PrintTicket" /> будет допустимым и ему не потребуются какие-либо возможности печати, не поддерживаемые принтером.</summary>
        <returns>Объект <see cref="T:System.Printing.ValidationResult" />, включающий полученный в результате слияния <see cref="T:System.Printing.PrintTicket" /> и обозначение, необходимо ли изменять какие-либо из его параметров, чтобы гарантировать жизнеспособность.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод создает работоспособный билет печати; то есть билет, не запросит функций печати, принтер не поддерживает. Метод сначала проверяет два входных билетов на печать с [схеме печати](https://go.microsoft.com/fwlink/?LinkId=186397). Если либо является недопустимым, создается исключение.  
  
 Затем объединяются два билета. Если у них разные значения для определенного свойства итоговый билете изначально использует значение разностного билета.  
  
 Полученный билет затем проверяется относительно фактического возможностей принтера. Если все параметры в билете несовместимы с возможности принтера, а затем драйвер принтера изменяет их, используя любую логику ему. Как правило он подставляет принтера или пользователя по умолчанию для параметра. Источник драйвера замены значений не билета как `basePrintTicket`, то полученный билет может иметь некоторые параметры, которые отличаются от обоих входных билетов. Если приходится изменять никакие параметры драйвера принтера, а затем этот факт выводится в <xref:System.Printing.ValidationResult.ConflictStatus%2A> свойство <xref:System.Printing.ValidationResult>.  
  
 Для слияния и проверки на основе очереди печати по умолчанию параметры, необходимо задать `basePrintTicket` для <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> или <xref:System.Printing.PrintQueue.UserPrintTicket%2A>.  
  
 `deltaPrintTicket` Параметр может быть `null`в этом случае `basePrintTicket` проверяется, установлен для устойчивости и возвращено, возможно, с изменениями.  
  
 Эта перегрузка из <xref:System.Printing.PrintQueue.MergeAndValidatePrintTicket%2A>, оба `deltaPrintTicket` и <xref:System.Printing.PrintTicket> в <xref:System.Printing.ValidationResult> возвращаемый действующие в области задания. Чтобы указать другую область используйте перегрузку этого метода.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать этот метод для слияния двух билетов на печать и реагировать на них <xref:System.Printing.ValidationResult> возвращаемый.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Хотя бы один из входных билетов на печать недействителен.</exception>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="basePrintTicket" /> — <see langword="null" />.</exception>
        <exception cref="T:System.Printing.PrintQueueException">Не удалось выполнить проверку, слияние и проверку жизнеспособности.</exception>
      </Docs>
    </Member>
    <Member MemberName="MergeAndValidatePrintTicket">
      <MemberSignature Language="C#" Value="public System.Printing.ValidationResult MergeAndValidatePrintTicket (System.Printing.PrintTicket basePrintTicket, System.Printing.PrintTicket deltaPrintTicket, System.Printing.PrintTicketScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Printing.ValidationResult MergeAndValidatePrintTicket(class System.Printing.PrintTicket basePrintTicket, class System.Printing.PrintTicket deltaPrintTicket, valuetype System.Printing.PrintTicketScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.MergeAndValidatePrintTicket(System.Printing.PrintTicket,System.Printing.PrintTicket,System.Printing.PrintTicketScope)" />
      <MemberSignature Language="VB.NET" Value="Public Function MergeAndValidatePrintTicket (basePrintTicket As PrintTicket, deltaPrintTicket As PrintTicket, scope As PrintTicketScope) As ValidationResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Printing::ValidationResult MergeAndValidatePrintTicket(System::Printing::PrintTicket ^ basePrintTicket, System::Printing::PrintTicket ^ deltaPrintTicket, System::Printing::PrintTicketScope scope);" />
      <MemberSignature Language="F#" Value="member this.MergeAndValidatePrintTicket : System.Printing.PrintTicket * System.Printing.PrintTicket * System.Printing.PrintTicketScope -&gt; System.Printing.ValidationResult" Usage="printQueue.MergeAndValidatePrintTicket (basePrintTicket, deltaPrintTicket, scope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.ValidationResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="basePrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="deltaPrintTicket" Type="System.Printing.PrintTicket" />
        <Parameter Name="scope" Type="System.Printing.PrintTicketScope" />
      </Parameters>
      <Docs>
        <param name="basePrintTicket">Первый билет на печать.</param>
        <param name="deltaPrintTicket">Второй билет на печать. Это может быть <see langword="null" />.</param>
        <param name="scope">Значение, указывающее, что является областью <paramref name="deltaPrintTicket" /> и областью билета на печать, возвращаемого в <see cref="T:System.Printing.ValidationResult" />: станица, документ или все задание.</param>
        <summary>Выполняет слияние двух объектов <see cref="T:System.Printing.PrintTicket" /> и гарантирует, что конечный объект <see cref="T:System.Printing.PrintTicket" /> будет допустимым, ему не потребуются какие-либо возможности печати, не поддерживаемые принтером, и он будет ограничен указанной областью.</summary>
        <returns>Объект <see cref="T:System.Printing.ValidationResult" />, включающий полученный в результате слияния <see cref="T:System.Printing.PrintTicket" /> и обозначение, необходимо ли изменять какие-либо из его параметров, чтобы гарантировать жизнеспособность.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Метод создает работоспособный билет печати; то есть билет, не запросит функций печати, принтер не поддерживает. Метод сначала проверяет два входных билетов на печать с [схеме печати](https://go.microsoft.com/fwlink/?LinkId=186397). Если либо является недопустимым, создается исключение.  
  
 Затем объединяются два билета. Если у них разные значения для определенного свойства итоговый билете изначально использует значение разностного билета.  
  
 Полученный билет затем проверяется относительно фактического возможностей принтера. Если все параметры в билете несовместимы с возможности принтера, а затем драйвер принтера изменяет их, используя любую логику ему. Как правило он подставляет принтера или пользователя по умолчанию для параметра. Источник драйвера замены значений не билета как `basePrintTicket`, то полученный билет может иметь некоторые параметры, которые отличаются от обоих входных билетов. Если приходится изменять никакие параметры драйвера принтера, а затем этот факт выводится в <xref:System.Printing.ValidationResult.ConflictStatus%2A> свойство <xref:System.Printing.ValidationResult>.  
  
 Для слияния и проверки на основе очереди печати по умолчанию параметры, необходимо задать `basePrintTicket` для <xref:System.Printing.PrintQueue.DefaultPrintTicket%2A> или <xref:System.Printing.PrintQueue.UserPrintTicket%2A>.  
  
 `deltaPrintTicket` Параметр может быть `null`в этом случае `basePrintTicket` проверяется, установлен для устойчивости и возвращено, возможно, с изменениями.  
  
 Если `scope` является задания, возвращаемый билет на печать в <xref:System.Printing.ValidationResult> может включать [схеме печати](https://go.microsoft.com/fwlink/?LinkId=186397) параметры с префиксами задания, документа и страницы. Если `scope` документа, то параметры для задания в `deltaPrintTicket` игнорируются и возвращаемый билет может включать параметры с документом и префиксы страницы. Если `scope` страницы, то параметры для задания и параметры на уровне документа в `deltaPrintTicket` игнорируются, и возвращаемый билет может содержать параметры с только префикс страницы.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Хотя бы один из входных билетов на печать недействителен.</exception>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="basePrintTicket" /> — <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Параметр <paramref name="scope" /> имеет недопустимое значение <see cref="T:System.Printing.PrintTicketScope" />.</exception>
        <exception cref="T:System.Printing.PrintQueueException">Не удалось выполнить проверку, слияние и проверку жизнеспособности.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override sealed string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides NotOverridable Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Printing.PrintQueue.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя очереди печати.</summary>
        <value>Имя очереди печати.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Объект также имеет только для чтения <xref:System.Printing.PrintQueue.FullName%2A> свойство и для записи <xref:System.Printing.PrintQueue.ShareName%2A> свойство.  
  
 Для очередей на локальном сервере печати <xref:System.Printing.PrintQueue.Name%2A> и <xref:System.Printing.PrintQueue.FullName%2A> одинаковы.  
  
   
  
## Examples  
 В следующем примере показано, как использовать это свойство списка подмножество доступных очередей печати.  
  
 [!code-cpp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CPP/Program.cpp#listsubsetofprintqueues)]
 [!code-csharp[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/CSharp/Program.cs#listsubsetofprintqueues)]
 [!code-vb[EnumerateSubsetOfPrintQueues#ListSubsetOfPrintQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/EnumerateSubsetOfPrintQueues/visualbasic/program.vb#listsubsetofprintqueues)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedUserIntervention">
      <MemberSignature Language="C#" Value="public bool NeedUserIntervention { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NeedUserIntervention" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NeedUserIntervention" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property NeedUserIntervention As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool NeedUserIntervention { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.NeedUserIntervention : bool" Usage="System.Printing.PrintQueue.NeedUserIntervention" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, требуется ли принтеру вмешательство человека.</summary>
        <value>Значение <see langword="true" />, если принтеру необходимо вмешательство человека; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueproperties)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueproperties)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueProperties](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueproperties)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfJobs">
      <MemberSignature Language="C#" Value="public virtual int NumberOfJobs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfJobs" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.NumberOfJobs" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property NumberOfJobs As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int NumberOfJobs { int get(); };" />
      <MemberSignature Language="F#" Value="member this.NumberOfJobs : int" Usage="System.Printing.PrintQueue.NumberOfJobs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает общее число заданий, выстроившихся в очереди печати.</summary>
        <value>Число заданий в очереди.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PagePunt">
      <MemberSignature Language="C#" Value="public bool PagePunt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PagePunt" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PagePunt" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PagePunt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PagePunt { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.PagePunt : bool" Usage="System.Printing.PrintQueue.PagePunt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее на невозможность печати принтером текущей страницы.</summary>
        <value>Значение <see langword="true" />, если принтер не может напечатать текущую страницу; в противном случае — значение <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если принтер не поддерживает сигнал с таким значением, то свойство всегда имеет `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Pause" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Pause ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Pause();" />
      <MemberSignature Language="F#" Value="abstract member Pause : unit -&gt; unit&#xA;override this.Pause : unit -&gt; unit" Usage="printQueue.Pause " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Приостанавливает очередь печати. Очередь остается приостановленной до тех пор, пока не будет выполнен метод <see cref="M:System.Printing.PrintQueue.Resume" />.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintSystemException">Не удается приостановить работу принтера.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Resume" />
      </Docs>
    </Member>
    <Member MemberName="PrintingIsCancelled">
      <MemberSignature Language="C#" Value="public bool PrintingIsCancelled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrintingIsCancelled" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.PrintingIsCancelled" />
      <MemberSignature Language="VB.NET" Value="Public Property PrintingIsCancelled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool PrintingIsCancelled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.PrintingIsCancelled : bool with get, set" Usage="System.Printing.PrintQueue.PrintingIsCancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, указывающее, отменяется ли текущее задание печати.</summary>
        <value>Значение <see langword="true" />, если задание печати отменяется; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public virtual int Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Priority" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.Priority" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Priority As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Priority { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Priority : int with get, set" Usage="System.Printing.PrintQueue.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает приоритет очереди печати по отношению к другим очередям печати, которые размещаются на том же сервере печати и используют тот же физический принтер.</summary>
        <value>Приоритет очереди печати. Возможные значения лежат в диапазоне от 1 до 99. Значение по умолчанию — 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Сравните это свойство с <xref:System.Printing.PrintQueue.DefaultPriority%2A> свойство, которое является о относительный приоритет заданий печати в очереди.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Purge">
      <MemberSignature Language="C#" Value="public virtual void Purge ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Purge() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Purge" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Purge ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Purge();" />
      <MemberSignature Language="F#" Value="abstract member Purge : unit -&gt; unit&#xA;override this.Purge : unit -&gt; unit" Usage="printQueue.Purge " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Удаляет все задания из очереди печати.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Printing.PrintSystemException">Не удалось удалить из очереди некоторые задания.</exception>
      </Docs>
    </Member>
    <Member MemberName="QueueAttributes">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueAttributes QueueAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueAttributes QueueAttributes" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueAttributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueAttributes As PrintQueueAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueueAttributes QueueAttributes { System::Printing::PrintQueueAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.QueueAttributes : System.Printing.PrintQueueAttributes" Usage="System.Printing.PrintQueue.QueueAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает свойства очереди печати.</summary>
        <value>Битовая комбинация значений перечисления <see cref="T:System.Printing.PrintQueueAttributes" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueDriver">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintDriver QueueDriver { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintDriver QueueDriver" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueDriver" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueueDriver As PrintDriver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintDriver ^ QueueDriver { System::Printing::PrintDriver ^ get(); void set(System::Printing::PrintDriver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueueDriver : System.Printing.PrintDriver with get, set" Usage="System.Printing.PrintQueue.QueueDriver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintDriver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает драйвер принтера для очереди.</summary>
        <value>Объект <see cref="T:System.Printing.PrintDriver" />, используемый очередью.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePort">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintPort QueuePort { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintPort QueuePort" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePort" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueuePort As PrintPort" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintPort ^ QueuePort { System::Printing::PrintPort ^ get(); void set(System::Printing::PrintPort ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueuePort : System.Printing.PrintPort with get, set" Usage="System.Printing.PrintQueue.QueuePort" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintPort</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает порт, используемый очередью.</summary>
        <value>Объект <see cref="T:System.Printing.PrintPort" />, назначенный очереди печати.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueuePrintProcessor">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintProcessor QueuePrintProcessor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintProcessor QueuePrintProcessor" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueuePrintProcessor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property QueuePrintProcessor As PrintProcessor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintProcessor ^ QueuePrintProcessor { System::Printing::PrintProcessor ^ get(); void set(System::Printing::PrintProcessor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.QueuePrintProcessor : System.Printing.PrintProcessor with get, set" Usage="System.Printing.PrintQueue.QueuePrintProcessor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintProcessor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает обработчик заданий печати, используемый очередью.</summary>
        <value>Объект <see cref="T:System.Printing.PrintProcessor" />, используемый очередью, например WinPrint или ModiPrint.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="QueueStatus">
      <MemberSignature Language="C#" Value="public System.Printing.PrintQueueStatus QueueStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Printing.PrintQueueStatus QueueStatus" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.QueueStatus" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property QueueStatus As PrintQueueStatus" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Printing::PrintQueueStatus QueueStatus { System::Printing::PrintQueueStatus get(); };" />
      <MemberSignature Language="F#" Value="member this.QueueStatus : System.Printing.PrintQueueStatus" Usage="System.Printing.PrintQueue.QueueStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Printing.PrintQueueStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, представляющее состояние принтера. К ним относятся "прогрев","инициализация","печать" и другие.</summary>
        <value>Текущее значение <see cref="T:System.Printing.PrintQueueStatus" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Приведенный ниже показано, как использовать это свойство как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#spottroubleusingqueueattributes)]
 [!code-csharp[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#spottroubleusingqueueattributes)]
 [!code-vb[PrinterStatusSurvey#SpotTroubleUsingQueueAttributes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#spottroubleusingqueueattributes)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public override void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Refresh();" />
      <MemberSignature Language="F#" Value="override this.Refresh : unit -&gt; unit" Usage="printQueue.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Обновляет свойства объекта <see cref="T:System.Printing.PrintQueue" /> значениями, поступающими от принтера и утилиты очереди печати, запущенной на компьютере.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Изменения, программа выполняет для <xref:System.Printing.PrintQueue> свойств объекта были утеряны при <xref:System.Printing.PrintQueue.Refresh%2A> выполняется, если они были записаны принтера и очередь печати с <xref:System.Printing.PrintQueue.Commit%2A>.  
  
   
  
## Examples  
 Приведенный ниже показано, как использовать этот метод как часть опроса всех принтеров на предмет состояния ошибки.  
  
 [!code-cpp[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#surveyqueues)]
 [!code-csharp[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#surveyqueues)]
 [!code-vb[PrinterStatusSurvey#SurveyQueues](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#surveyqueues)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Не удалось обновить некоторые свойства.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Commit" />
      </Docs>
    </Member>
    <Member MemberName="Resume">
      <MemberSignature Language="C#" Value="public virtual void Resume ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Resume() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Printing.PrintQueue.Resume" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Resume ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Resume();" />
      <MemberSignature Language="F#" Value="abstract member Resume : unit -&gt; unit&#xA;override this.Resume : unit -&gt; unit" Usage="printQueue.Resume " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возобновляет работу приостановленной очереди печати.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 В следующем примере показано, как этот метод позволяет возобновить работу приостановленной очереди печати.  
  
 [!code-cpp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/cpp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CPP/Program.cpp#handlepausedjob)]
 [!code-csharp[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/csharp/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/CSharp/Program.cs#handlepausedjob)]
 [!code-vb[DiagnoseProblematicPrintJob#HandlePausedJob](~/samples/snippets/visualbasic/VS_Snippets_Wpf/DiagnoseProblematicPrintJob/visualbasic/program.vb#handlepausedjob)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Printing.PrintSystemException">Не удается возобновить работу принтера.</exception>
        <altmember cref="M:System.Printing.PrintQueue.Pause" />
      </Docs>
    </Member>
    <Member MemberName="ScheduleCompletedJobsFirst">
      <MemberSignature Language="C#" Value="public bool ScheduleCompletedJobsFirst { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScheduleCompletedJobsFirst" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ScheduleCompletedJobsFirst" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ScheduleCompletedJobsFirst As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ScheduleCompletedJobsFirst { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.ScheduleCompletedJobsFirst : bool" Usage="System.Printing.PrintQueue.ScheduleCompletedJobsFirst" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает значение, указывающее, печатает ли принтер задания, у которых завершен процесс буферизации, прежде чем печатать не полностью буферизованные задания, даже если последние стали в очередь раньше или имеют более высокий приоритет.</summary>
        <value>Значение <see langword="true" />, если принтер печатает задания, у которых завершен процесс буферизации, прежде чем печатать не полностью буферизованные задания; в противном случае — значение <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparatorFile">
      <MemberSignature Language="C#" Value="public virtual string SeparatorFile { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SeparatorFile" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.SeparatorFile" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SeparatorFile As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SeparatorFile { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SeparatorFile : string with get, set" Usage="System.Printing.PrintQueue.SeparatorFile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает путь и имя файла, который вставляется в начало каждого задания печати.</summary>
        <value>Путь и имя файла-разделителя.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Обычно это файл одной страницы, используемый для облегчают разделяют выходные данные разных заданий печати.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShareName">
      <MemberSignature Language="C#" Value="public virtual string ShareName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ShareName" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.ShareName" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ShareName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ ShareName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ShareName : string with get, set" Usage="System.Printing.PrintQueue.ShareName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает имя принтера, которое пользователи видят по сети, когда он находится в общем доступе.</summary>
        <value>Внешнее имя общего принтера.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Printing.PrintQueue> Объект также имеет только для чтения <xref:System.Printing.PrintQueue.FullName%2A> свойство и для записи <xref:System.Printing.PrintQueue.Name%2A> свойство. Для очередей на локальном сервере печати эти свойства имеют одинаковое значение.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int StartTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 StartTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.StartTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property StartTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int StartTimeOfDay { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.StartTimeOfDay : int with get, set" Usage="System.Printing.PrintQueue.StartTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает самое раннее время дня, выраженное как количество минут после полуночи в формате UTC (время по Гринвичу [GMT]), когда принтер будет печатать задание.</summary>
        <value>Время дня, когда принтер впервые становится доступен, выраженное как число минут после полуночи в формате UTC. Максимальное значение равно 1439. Когда принтер впервые устанавливается с помощью мастера добавления принтера [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)], по умолчанию он становится постоянно доступным и это свойство возвращает значение 0 во всех часовых поясах.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы не находитесь в часовом поясе UTC, необходимо добавьте или вычтите кратными 60, чтобы задать или получить правильное время своего часового пояса. К примеру Если вы находитесь в зоне по тихоокеанскому времени из Северной Америки и переход на летнее время не действует, а затем по местному времени составляет 8 часов меньше, чем UTC. Чтобы задать <xref:System.Printing.PrintQueue.StartTimeOfDay%2A> до 00: 00 в вашем часовом поясе, ему присвоено 8: 00 UTC, который является 480 (8 * 60 =). Также следует помнить, смене времени до нуля после 24 часа (то есть; после 1439 минуты). Чтобы установить его в 18: 00 в вашем часовом поясе, ему присвоено: 02: 00 UTC, являющийся 120 (= 2 * 60). См. в разделе <xref:System.TimeZone>, <xref:System.TimeSpan>, и <xref:System.DateTime> классы для обработки методов полезные часового пояса.  
  
 Если принтер всегда доступен, то это свойство возвращает значение 0 во всех часовых поясах.  
  
   
  
## Examples  
 В следующем примере показано, как это свойство используется, чтобы определить, доступен ли принтер в настоящее время.  
  
 [!code-cpp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UntilTimeOfDay">
      <MemberSignature Language="C#" Value="public virtual int UntilTimeOfDay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 UntilTimeOfDay" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UntilTimeOfDay" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UntilTimeOfDay As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int UntilTimeOfDay { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.UntilTimeOfDay : int with get, set" Usage="System.Printing.PrintQueue.UntilTimeOfDay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает самое позднее время, выраженное как количество минут после полуночи в формате UTC (время по Гринвичу [GMT]), когда принтер будет печатать задание.</summary>
        <value>Время дня, когда принтер перестает быть доступным, выраженное как число минут после полуночи в формате UTC. Максимальное значение равно 1439. Когда принтер впервые устанавливается с помощью мастера добавления принтера [!INCLUDE[TLA#tla_win](~/includes/tlasharptla-win-md.md)], по умолчанию он становится постоянно доступным и это свойство возвращает значение 0 во всех часовых поясах.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Если вы не находитесь в часовом поясе UTC, необходимо добавьте или вычтите кратными 60, чтобы задать или получить правильное время своего часового пояса. К примеру Если вы находитесь в зоне по тихоокеанскому времени из Северной Америки и переход на летнее время не действует, а затем по местному времени составляет 8 часов меньше, чем UTC. Чтобы задать <xref:System.Printing.PrintQueue.UntilTimeOfDay%2A> до 00: 00 в вашем часовом поясе, ему присвоено 8: 00 UTC, который является 480 (8 * 60 =). Также следует помнить переключается это время до нуля после 24 часа (1439 минута). Чтобы установить его в 18: 00 в вашем часовом поясе, ему присвоено: 02: 00 UTC, являющийся 120 (= 2 * 60). См. в разделе <xref:System.TimeZone>, <xref:System.TimeSpan>, и <xref:System.DateTime> классы для обработки методов полезные часового пояса.  
  
 Если принтер всегда доступен, то это свойство возвращает значение 0 во всех часовых поясах.  
  
   
  
## Examples  
 В следующем примере показано, как это свойство используется, чтобы определить, доступен ли принтер в настоящее время.  
  
 [!code-cpp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/cpp/VS_Snippets_Wpf/PrinterStatusSurvey/CPP/Program.cpp#usingstartanduntiltimes)]
 [!code-csharp[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/csharp/VS_Snippets_Wpf/PrinterStatusSurvey/CSharp/Program.cs#usingstartanduntiltimes)]
 [!code-vb[PrinterStatusSurvey#UsingStartAndUntilTimes](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrinterStatusSurvey/visualbasic/program.vb#usingstartanduntiltimes)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.TimeZone" />
        <altmember cref="T:System.TimeSpan" />
        <altmember cref="T:System.DateTime" />
        <altmember cref="P:System.Printing.PrintQueue.StartTimeOfDay" />
      </Docs>
    </Member>
    <Member MemberName="UserPrintTicket">
      <MemberSignature Language="C#" Value="public virtual System.Printing.PrintTicket UserPrintTicket { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Printing.PrintTicket UserPrintTicket" />
      <MemberSignature Language="DocId" Value="P:System.Printing.PrintQueue.UserPrintTicket" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property UserPrintTicket As PrintTicket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Printing::PrintTicket ^ UserPrintTicket { System::Printing::PrintTicket ^ get(); void set(System::Printing::PrintTicket ^ value); };" />
      <MemberSignature Language="F#" Value="member this.UserPrintTicket : System.Printing.PrintTicket with get, set" Usage="System.Printing.PrintQueue.UserPrintTicket" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Printing</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecurityCritical</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>set: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Printing.PrintTicket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает объект текущего пользователя <see cref="T:System.Printing.PrintTicket" />, используемый по умолчанию, который содержит подробные сведения о задании печати.</summary>
        <value>Объект <see cref="T:System.Printing.PrintTicket" /> для текущего пользователя или <see langword="null" />, если пользовательский <see cref="T:System.Printing.PrintTicket" /> не указан.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Каждый пользователь может иметь свой собственный по умолчанию <xref:System.Printing.PrintTicket>.  
  
 Это свойство может иметь значение `null`.  
  
   
  
## Examples  
 В следующем примере показано, как это свойство используется при слиянии двух билетов на печать.  
  
 [!code-csharp[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/csharp/VS_Snippets_Wpf/PrintTicketManagment/CSharp/printticket.cs#usingmergeandvalidate)]
 [!code-vb[PrintTicketManagment#UsingMergeAndValidate](~/samples/snippets/visualbasic/VS_Snippets_Wpf/PrintTicketManagment/visualbasic/printticket.vb#usingmergeandvalidate)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Printing.PrintQueue.DefaultPrintTicket" />
      </Docs>
    </Member>
  </Members>
</Type>