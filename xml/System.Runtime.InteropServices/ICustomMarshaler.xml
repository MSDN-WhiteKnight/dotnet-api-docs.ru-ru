<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="03ef26878dc74066eb80a36c6aa1a51c27cec8e3" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58711412" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Предоставляет настраиваемые оболочки, обрабатывающие вызовы методов.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Упаковщик обеспечивает связь между функциональными возможностями старых и новых интерфейсов. Пользовательский маршалинг обеспечивает следующие преимущества:  
  
-   Он позволяет клиентским приложениям, которые были разработаны для работы с старый интерфейс для работы с серверами, реализующими новый интерфейс.  
  
-   Он позволяет клиентским приложениям возможность работы с новым интерфейсом работать с серверами, реализующими старый интерфейс.  
  
 Если у вас есть интерфейс, имеющий другие характеристики маршалинга или модели объектов компонента (COM), предоставляемый по-другому, можно спроектировать настраиваемого модуля маршалинга, вместо того чтобы использовать упаковщик взаимодействия. С помощью настраиваемого модуля маршалинга, можно свести к минимуму различие между новыми компонентами .NET Framework и существующими COM-компонентами.  
  
 Например, предположим, что вы разрабатываете управляемый интерфейс с именем `INew`. Если этот интерфейс предоставляется модели COM через стандартный вызываемой оболочки COM (CCW), он имеет те же методы, что и управляемый интерфейс и использует правила маршалинга, встроенные в маршалер взаимодействия. Теперь предположим, что стоит некий общеизвестный интерфейс COM с именем `IOld` уже предоставляет ту же функциональность, что `INew` интерфейс. По разработке настраиваемых модулей маршалинга, можно предоставить неуправляемую реализацию `IOld` , просто делегирует вызовы к управляемой реализации `INew` интерфейс. Таким образом пользовательского модуля маршалинга представляет собой мост между управляемым и неуправляемым интерфейсами.  
  
> [!NOTE]
>  Особые упаковщики не вызываются при вызове из управляемого кода в неуправляемый код для интерфейса диспетчеризации.  
  
## <a name="defining-the-marshaling-type"></a>Определение типа маршалинга  
 Перед созданием настраиваемого модуля маршалинга, необходимо определить управляемые и неуправляемые интерфейсы, которые будут маршалированы. Эти интерфейсы обычно выполняют ту же функцию, но по-разному предоставляются для управляемых и неуправляемых объектов.  
  
 Управляемый компилятор создает управляемый интерфейс на основе метаданных, а итоговый интерфейс выглядит как управляемый интерфейс. В примере показан типичный интерфейс.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 Определяет неуправляемый тип в языке определения интерфейса (IDL) и скомпилируйте его с помощью компилятора Microsoft интерфейс определения языка MIDL. Интерфейс определяется в инструкции library и ей присваивается идентификатор интерфейса с помощью атрибута универсальный уникальный идентификатор (UUID), как показано в следующем примере.  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 Компилятор MIDL создает несколько выходных файлов. Если интерфейс определен в файле Old.idl, выходной файл, определяющий Old_i.c `const` переменных с идентификатором интерфейса (IID) интерфейса, как показано в следующем примере.  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 Также создается файл Old.h MIDL. Он содержит определение интерфейса, которое может быть включено в исходный код C++ на языке C++.  
  
## <a name="implementing-the-icustommarshaler-interface"></a>Реализация интерфейса ICustomMarshaler  
 Необходимо реализовать пользовательский маршалер <xref:System.Runtime.InteropServices.ICustomMarshaler> интерфейс, чтобы предоставить соответствующие оболочки среды выполнения.  
  
 Следующий код C# отображает базовый интерфейс, который должен реализовываться всеми пользовательскими маршалерами.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler> Интерфейс содержит методы, предоставляющие поддержку преобразования, поддержка очистки и сведения о данных для маршалинга.  
  
|Тип операции|ICustomMarshaler-метод|Описание|  
|-----------------------|-----------------------------|-----------------|  
|Преобразование (из машинного и управляемого кода)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|Маршалирует указатель на машинные данные в управляемый объект. Этот метод возвращает пользовательские вызываемой оболочки времени выполнения (RCW), можно маршалировать в неуправляемый интерфейс, который передается в качестве аргумента. Маршалер должен вернуть экземпляр пользовательского вызываемая оболочка времени Выполнения для этого типа.|  
|Преобразование (из управляемого кода в машинный)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|Маршалирует управляемого объекта в указатель на собственных данных. Этот метод возвращает пользовательские вызываемой оболочки COM (CCW), можно упаковать управляемый интерфейс, который передается в качестве аргумента. Маршалер должен вернуть экземпляр пользовательской вызываемой оболочки COM для данного типа.|  
|Очистка (машинный код)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|Позволяет очистить собственных данных (вызываемую оболочку COM), возвращаемый маршалеру <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> метод.|  
|Очистка (управляемый код)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|Позволяет маршалеру очистку управляемых данных (времени выполнения RCW), возвращаемый <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> метод.|  
|Сведения (машинный код)|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|Возвращает размер неуправляемых данных для маршалинга.|  
  
### <a name="conversion"></a>Преобразование  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 Маршалирует указатель на машинные данные в управляемый объект. Этот метод возвращает пользовательские вызываемой оболочки времени выполнения (RCW), можно маршалировать в неуправляемый интерфейс, который передается в качестве аргумента. Маршалер должен вернуть экземпляр пользовательского вызываемая оболочка времени Выполнения для этого типа.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 Маршалирует управляемого объекта в указатель на собственных данных. Этот метод возвращает пользовательские вызываемой оболочки COM (CCW), можно упаковать управляемый интерфейс, который передается в качестве аргумента. Маршалер должен вернуть экземпляр пользовательской вызываемой оболочки COM для данного типа.  
  
### <a name="cleanup"></a>Очистка  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 Позволяет очистить собственных данных (вызываемую оболочку COM), возвращаемый маршалеру <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> метод.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 Позволяет маршалеру очистку управляемых данных (времени выполнения RCW), возвращаемый <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> метод.  
  
### <a name="size-information"></a>Сведения о размере  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 Возвращает размер неуправляемых данных для маршалинга.  
  
## <a name="implementing-the-getinstance-method"></a>Реализация метода GetInstance  
 Помимо реализации <xref:System.Runtime.InteropServices.ICustomMarshaler> интерфейс, настраиваемый маршалер реализует `static` метод под названием `GetInstance` , принимающий <xref:System.String> как параметр с типом возвращаемого значения <xref:System.Runtime.InteropServices.ICustomMarshaler>. Это `static` метод вызывается уровень COM-взаимодействия среды CLR для создания экземпляра пользовательского модуля маршалинга. Строка, которая передается `GetInstance` является файл cookie, который можно использовать метод для настройки возвращаемого пользовательского модуля маршалинга.  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a>Применение MarshalAsAttribute  
 Для использования настраиваемого модуля маршалинга, необходимо применить <xref:System.Runtime.InteropServices.MarshalAsAttribute> атрибут параметра или поля, который маршалируется.  
  
 Необходимо также передать <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> значение перечисления для <xref:System.Runtime.InteropServices.MarshalAsAttribute> конструктор. Кроме того, необходимо указать <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> поле с одним из следующих именованные параметры:  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (обязательно): Квалифицированное имя пользовательского модуля маршалинга. Имя должно содержать пространство имен и класс пользовательского модуля маршалинга. Если пользовательского модуля маршалинга не определен в сборке, которой он используется, необходимо указать имя сборки, в котором он определен.  
  
    > [!NOTE]
    >  Можно использовать <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> поле вместо <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> поля. <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> принимает значение типа, который проще указать.  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (необязательно): Файл cookie, который передается пользовательского модуля маршалинга. Файл cookie можно использовать для предоставления дополнительных сведений модулю маршалинга. Например если маршалер используется для указания номера оболочек, файл cookie идентифицирует конкретную оболочку. Файл cookie передается `GetInstance` метод модуля маршалинга.  
  
 <xref:System.Runtime.InteropServices.MarshalAsAttribute> Атрибут определяет пользовательского модуля маршалинга, поэтому его можно активировать соответствующую оболочку. Затем служба взаимодействия среды CLR проверяет атрибут и создает время настраиваемых модулей маршалинга первый аргумент (параметра или поля) требуется маршалировать.  
  
 Затем среда выполнения вызывает <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> и <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> методов для пользовательского модуля маршалинга для активации правильную оболочку для обработки вызова.  
  
## <a name="using-a-custom-marshaler"></a>С помощью настраиваемого модуля маршалинга  
 При завершении пользовательского модуля маршалинга, его можно использовать как настраиваемую оболочку для определенного типа. В следующем примере показано определение `IUserData` управляемого интерфейса:  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 В следующем примере `IUserData` интерфейс использует `NewOldMarshaler` настраиваемого модуля маршалинга, чтобы включить неуправляемых клиентских приложениях для передачи `IOld` интерфейс `DoSomeStuff` метод. Управляемое описание `DoSomeStuff` альбома `INew` интерфейс, как показано в предыдущем примере, в то время как неуправляемая версия `DoSomeStuff` принимает `IOld` указатель на интерфейс, как показано в следующем примере.  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 Библиотеки типов, созданная путем экспорта управляемое определение `IUserData` неуправляемое определение показано в следующем примере вместо стандартного определения. <xref:System.Runtime.InteropServices.MarshalAsAttribute> Атрибут, примененный к `INew` аргумента в управляемое определение `DoSomeStuff` метод указывает, что аргумент использует настраиваемого модуля маршалинга, как показано в следующем примере.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 В предыдущих примерах, первый параметр обеспечивает <xref:System.Runtime.InteropServices.MarshalAsAttribute> атрибут <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> значение перечисления `UnmanagedType.CustomMarshaler`.  
  
 Второй параметр — <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> поля, который предоставляет имя с указанием сборки пользовательского модуля маршалинга. Это имя состоит из пространства имен и класс пользовательского модуля маршалинга (`MarshalType="MyCompany.NewOldMarshaler"`).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Управляемый объект, который необходимо уничтожить.</param>
        <summary>Выполняет необходимую очистку управляемых данных, если они больше не нужны.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Указатель на неуправляемые данные, которые необходимо уничтожить.</param>
        <summary>Выполняет необходимую очистку неуправляемых данных, если они больше не нужны.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Возвращает размер собственных данных для маршалинга.</summary>
        <returns>Размер собственных данных в байтах.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Управляемый объект, который необходимо преобразовать.</param>
        <summary>Преобразует управляемые данные в неуправляемые.</summary>
        <returns>Указатель на COM-представление управляемого объекта.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Указатель на неуправляемые данные, которые необходимо инкапсулировать.</param>
        <summary>Преобразует неуправляемые данные в управляемые.</summary>
        <returns>Объект, представляющий управляемое представление данных модели COM.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>