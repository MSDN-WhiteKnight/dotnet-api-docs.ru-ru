<Type Name="SpellCheck" FullName="System.Windows.Controls.SpellCheck">
  <Metadata><Meta Name="ms.openlocfilehash" Value="cbe16baa3a332057d3a71dd5fe6702b89aa33da0" /><Meta Name="ms.sourcegitcommit" Value="bac13a81377b1c4ebf3990e3287a6f1700f73751" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="ru-RU" /><Meta Name="ms.lasthandoff" Value="03/19/2019" /><Meta Name="ms.locfileid" Value="57949929" /></Metadata><TypeSignature Language="C#" Value="public sealed class SpellCheck" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit SpellCheck extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Controls.SpellCheck" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SpellCheck" />
  <TypeSignature Language="C++ CLI" Value="public ref class SpellCheck sealed" />
  <TypeSignature Language="F#" Value="type SpellCheck = class" />
  <AssemblyInfo>
    <AssemblyName>PresentationFramework</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Предоставляет функцию проверки правописания в реальном времени для элементов управления редактированием текста, таких как <see cref="T:System.Windows.Controls.TextBox" /> и <see cref="T:System.Windows.Controls.RichTextBox" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Чтобы включить проверку орфографии, задайте <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> свойства `true` в элементе управления редактирования текста. При включении этого средства проверки орфографии слов с ошибками подчеркиваются с помощью красной волнистой линией, как показано на следующем рисунке. Средства проверки орфографии поддерживается только в том случае, если платформа WPF предоставляет словарь по умолчанию. В [!INCLUDE[net_v40_short](~/includes/net-v40-short-md.md)], платформа WPF предоставляет словари для английский, французский, немецкий и испанский.  
  
 ![TextBox с орфографии&#45;проверка](~/add/media/editing-textbox-with-spellchecking.png "Textbox с проверкой орфографии")  
  
 Чтобы добавить пользовательский словарь, добавьте расположение файла лексики для <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> коллекции.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CustomDictionaries">
      <MemberSignature Language="C#" Value="public System.Collections.IList CustomDictionaries { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList CustomDictionaries" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomDictionaries As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ CustomDictionaries { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomDictionaries : System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.CustomDictionaries" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает коллекцию расположений файлов словарей, используемых для пользовательской проверки правописания.</summary>
        <value>Коллекция расположений файлов словарей.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Пользовательские словари используют файлы лексики, которые представляют собой текстовые файлы с расширением .lex. Каждая строка файла лексики содержит одно слово, которая принимается утвержденное для проверки орфографии. Первая строка файла можно указать идентификатор локали (LCID), словарь применяется для. Если языковой стандарт не указан, словарь применяется для всех языков. Дополнительные сведения см. в разделе [идентификаторы](https://go.microsoft.com/fwlink/?LinkId=165561). В следующем примере первые несколько строк файла лексики для английского языка.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Чтобы указать один или несколько словарей для <xref:System.Windows.Controls.TextBox> или для любого класса, производного от <xref:System.Windows.Controls.Primitives.TextBoxBase>, укажите расположение файлов лексикона, добавив URI для файла <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> коллекции.  
  
> [!NOTE]
>  С помощью <xref:System.Collections.IList.Insert%2A> для добавления файла к <xref:System.Windows.Controls.SpellCheck.CustomDictionaries%2A> коллекции приводит к возникновению исключения. Вместо этого используйте <xref:System.Collections.IList.Add%2A> и <xref:System.Collections.IList.Remove%2A> для обновления коллекции.  
  
 Файлы лексики могут быть включены в приложение как содержимого файлов, установленных на локальном компьютере или файлы ресурсов, скомпилированные в локальную ссылка на сборку. Можно ссылаться на файл с помощью URI типа pack. Дополнительные сведения см. в разделе [URI типа "pack" в WPF](~/docs/framework/wpf/app-development/pack-uris-in-wpf.md).  
  
 Чтобы включить проверку орфографии, задайте <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> свойства `true` на <xref:System.Windows.Controls.TextBox> или на любой класс, производный от <xref:System.Windows.Controls.Primitives.TextBoxBase>. Все настраиваемые словари, для который <xref:System.Windows.Controls.TextBox> используются в дополнение к средства проверки орфографии по умолчанию. Дополнительные сведения о проверки правописания, см. в разделе <xref:System.Windows.Controls.SpellCheck>.  
  
   
  
## Examples  
 Приведенный ниже показано, как добавить два пользовательских словарей для <xref:System.Windows.Controls.RichTextBox>. Первый пользовательский словарь (customwords.lex) добавляется в XAML. Файл включен в приложение как файл содержимого и копируется в выходной каталог. Чтобы использовать <xref:System.Uri> элемент, необходимо включить пространство имен System.  
  
 `xmlns:sys="clr-namespace:System;assembly=System"`  
  
 Второй пользовательского словаря (customwords2.lex) добавляется в <xref:System.Windows.Controls.Primitives.ButtonBase.Click> обработчик событий. Файл включен как файл ресурсов и компилируется в сборку приложения с именем WPFCustomDictionary.  
  
 [!code-xaml[WpfCustomDictionary#1](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml#1)]  
  
 [!code-csharp[WpfCustomDictionary#2](~/samples/snippets/csharp/VS_Snippets_Wpf/wpfcustomdictionary/cs/window1.xaml.cs#2)]
 [!code-vb[WpfCustomDictionary#2](~/samples/snippets/visualbasic/VS_Snippets_Wpf/wpfcustomdictionary/vb/mainwindow.xaml.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
        <altmember cref="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      </Docs>
    </Member>
    <Member MemberName="CustomDictionariesProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty CustomDictionariesProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty CustomDictionariesProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly CustomDictionariesProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ CustomDictionariesProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable CustomDictionariesProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.CustomDictionariesProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет свойство зависимостей <see cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomDictionaries">
      <MemberSignature Language="C#" Value="public static System.Collections.IList GetCustomDictionaries (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.IList GetCustomDictionaries(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetCustomDictionaries(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::IList ^ GetCustomDictionaries(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetCustomDictionaries : System.Windows.Controls.Primitives.TextBoxBase -&gt; System.Collections.IList" Usage="System.Windows.Controls.SpellCheck.GetCustomDictionaries textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Элемент управления редактированием текста, для которого извлекается коллекция файлов словарей.</param>
        <summary>Получает коллекцию расположений файлов словарей, используемых для пользовательских функций проверки правописания для заданного элемента управления редактированием текста.</summary>
        <returns>Коллекция расположений файлов словарей.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Пользовательские словари используют файлы лексики, которые являются простыми текстовыми файлами, которые имеют расширение .lex. Каждая строка файла лексики содержит одно слово, которая принимается утвержденное для проверки орфографии. Первая строка файла можно указать идентификатор локали (LCID), словарь применяется для. Если языковой стандарт не указан, словарь применяется для всех языков. Дополнительные сведения см. в разделе [идентификаторы](https://go.microsoft.com/fwlink/?LinkId=165561). В следующем примере первые несколько строк файла лексики для английского языка.  
  
```  
#LID 1033  
TextBlock  
TextBox  
ListBox  
```  
  
 Чтобы указать один или несколько словарей для <xref:System.Windows.Controls.TextBox> или любой класс, производный от <xref:System.Windows.Controls.Primitives.TextBoxBase>, укажите расположение файлов лексикона, добавив URI для файла <xref:System.Collections.IList> возвращаемые <xref:System.Windows.Controls.SpellCheck.GetCustomDictionaries%2A> метод.  
  
 Чтобы включить проверку орфографии, задайте <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A?displayProperty=nameWithType> свойства `true` на <xref:System.Windows.Controls.TextBox> или на любой класс, производный от <xref:System.Windows.Controls.Primitives.TextBoxBase>. Все настраиваемые словари, для который <xref:System.Windows.Controls.TextBox> используются в дополнение к средства проверки орфографии по умолчанию. Дополнительные сведения о проверки правописания, см. в разделе <xref:System.Windows.Controls.SpellCheck>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="textBoxBase" /> — <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Controls.SpellCheck.CustomDictionaries" />
        <altmember cref="T:System.Windows.Controls.SpellCheck" />
        <altmember cref="T:System.Windows.Controls.TextBox" />
        <altmember cref="T:System.Windows.Controls.RichTextBox" />
      </Docs>
    </Member>
    <Member MemberName="GetIsEnabled">
      <MemberSignature Language="C#" Value="public static bool GetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool GetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.GetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool GetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase);" />
      <MemberSignature Language="F#" Value="static member GetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase -&gt; bool" Usage="System.Windows.Controls.SpellCheck.GetIsEnabled textBoxBase" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" Index="0" FrameworkAlternate="netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Элемент управления редактированием текста, который необходимо проверить. Примеры элементов управления включают <see cref="T:System.Windows.Controls.TextBox" /> и <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <summary>Возвращает значение, указывающее, включена ли проверка правописания для заданного элемента управления редактированием текста.</summary>
        <returns>Значение <see langword="true" />, если проверка правописания в элементе управления редактирования текста включена; в противном случае — значение <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Значение параметра <paramref name="textBoxBase" /> — <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public bool IsEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property IsEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsEnabled : bool with get, set" Usage="System.Windows.Controls.SpellCheck.IsEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает значение, которое определяет, активирована ли проверка правописания в данном элементе управления редактированием текстов (т.е. <see cref="T:System.Windows.Controls.TextBox" /> или <see cref="T:System.Windows.Controls.RichTextBox" />).</summary>
        <value>Значение <see langword="true" />, если проверка правописания в элементе управления активирована; в противном случае — значение <see langword="false" />. Значение по умолчанию — <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Это свойство зависимостей также имеет использования специализированных присоединенное свойство только для записи. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Синтаксис для задания этого свойства является `<` *textBoxBaseClass* **SpellCheck.IsEnabled**`="`*boolValue* `" .../>`, где *textBoxBaseClass* является объектным элементом для класса, который является производным от <xref:System.Windows.Controls.Primitives.TextBoxBase>, и *boolValue* либо `true` или `false` (случай не учитывается). Чтобы задать свойство как присоединенное свойство в коде, см. в разделе <xref:System.Windows.Controls.SpellCheck.SetIsEnabled%2A> метод. Нет соответствующего `GetIsEnabled` метода доступа. Чтобы получить значение, получите текущий <xref:System.Windows.Controls.SpellCheck> объекта из <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> свойство и затем получить значение <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> свойства из, <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="dependencyPropertyInfo_IsEnabled"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Controls.SpellCheck.IsEnabledProperty>|  
|Значение свойства метаданных `true`|None|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabledProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsEnabledProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsEnabledProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsEnabledProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsEnabledProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsEnabledProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.IsEnabledProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет свойство зависимостей <see cref="P:System.Windows.Controls.SpellCheck.IsEnabled" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetIsEnabled">
      <MemberSignature Language="C#" Value="public static void SetIsEnabled (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetIsEnabled(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetIsEnabled(System.Windows.Controls.Primitives.TextBoxBase,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetIsEnabled(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, bool value);" />
      <MemberSignature Language="F#" Value="static member SetIsEnabled : System.Windows.Controls.Primitives.TextBoxBase * bool -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetIsEnabled (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Элемент управления редактированием текста, для которого необходимо включить или отключить функцию проверки правописания. Примеры элементов управления включают <see cref="T:System.Windows.Controls.TextBox" /> и <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">Логическое значение, которое указывает, активирована ли проверка правописания для элемента управления редактированием текста.</param>
        <summary>Включает или отключает функцию проверки правописания для заданного элемента управления редактированием текста (т.е. <see cref="T:System.Windows.Controls.TextBox" /> или <see cref="T:System.Windows.Controls.RichTextBox" />).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Этот метод позволяет использовании присоединенного свойства для <xref:System.Windows.Controls.SpellCheck.IsEnabled%2A> свойство в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)]. В следующем примере показан [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] использования.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSpellingReform">
      <MemberSignature Language="C#" Value="public static void SetSpellingReform (System.Windows.Controls.Primitives.TextBoxBase textBoxBase, System.Windows.Controls.SpellingReform value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetSpellingReform(class System.Windows.Controls.Primitives.TextBoxBase textBoxBase, valuetype System.Windows.Controls.SpellingReform value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Controls.SpellCheck.SetSpellingReform(System.Windows.Controls.Primitives.TextBoxBase,System.Windows.Controls.SpellingReform)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetSpellingReform(System::Windows::Controls::Primitives::TextBoxBase ^ textBoxBase, System::Windows::Controls::SpellingReform value);" />
      <MemberSignature Language="F#" Value="static member SetSpellingReform : System.Windows.Controls.Primitives.TextBoxBase * System.Windows.Controls.SpellingReform -&gt; unit" Usage="System.Windows.Controls.SpellCheck.SetSpellingReform (textBoxBase, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textBoxBase" Type="System.Windows.Controls.Primitives.TextBoxBase" />
        <Parameter Name="value" Type="System.Windows.Controls.SpellingReform" />
      </Parameters>
      <Docs>
        <param name="textBoxBase">Элемент управления редактированием текста, к которому применяется функция проверки правописания. Примеры элементов управления включают <see cref="T:System.Windows.Controls.TextBox" /> и <see cref="T:System.Windows.Controls.RichTextBox" />.</param>
        <param name="value">Значение <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" />, определяющее новые правила написания.</param>
        <summary>Определяет новые правила правописания, используемые функцией проверки правописания.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Новые правила, осуществляется с помощью данного метода см. в 1990-х годов реформы правописания французского и немецкого. Этот метод не оказывает влияния при использовании любого другого языка.  
  
 Этот метод позволяет использовании присоединенного свойства для <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> свойство в [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)].  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReform">
      <MemberSignature Language="C#" Value="public System.Windows.Controls.SpellingReform SpellingReform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Controls.SpellingReform SpellingReform" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberSignature Language="VB.NET" Value="Public Property SpellingReform As SpellingReform" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Controls::SpellingReform SpellingReform { System::Windows::Controls::SpellingReform get(); void set(System::Windows::Controls::SpellingReform value); };" />
      <MemberSignature Language="F#" Value="member this.SpellingReform : System.Windows.Controls.SpellingReform with get, set" Usage="System.Windows.Controls.SpellCheck.SpellingReform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Controls.SpellingReform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Получает или задает новые правила правописания, используемые функцией проверки правописания.</summary>
        <value>Новые правила правописания, используемые функцией проверки правописания. Значением по умолчанию является <see cref="F:System.Windows.Controls.SpellingReform.PreAndPostreform" /> для французского языка и <see cref="F:System.Windows.Controls.SpellingReform.Postreform" /> для немецкого языка.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Правила реформы правописания, которые определяются этим свойством относятся французского и немецкого языкам. При использовании любого другого языка, это свойство игнорируется.  
  
 Это свойство зависимостей также имеет использования специализированных присоединенное свойство только для записи. [!INCLUDE[TLA2#tla_xaml](~/includes/tla2sharptla-xaml-md.md)] Синтаксис для задания этого свойства является `<` *textBoxBaseClass* **SpellCheck.SpellingReform**`="`*enumValue* `" .../>`, где *textBoxBaseClass* является объектным элементом для класса, который является производным от <xref:System.Windows.Controls.Primitives.TextBoxBase>, и *enumValue* представляет собой строковое значение <xref:System.Windows.Controls.SpellingReform> перечисление. Чтобы задать свойство как присоединенное свойство в коде, см. в разделе <xref:System.Windows.Controls.SpellCheck.SetSpellingReform%2A> метод. Нет соответствующего `GetSpellingReform` метода доступа. Чтобы получить значение, получите текущий <xref:System.Windows.Controls.SpellCheck> объекта из <xref:System.Windows.Controls.Primitives.TextBoxBase.SpellCheck%2A?displayProperty=nameWithType> свойство и затем получить значение <xref:System.Windows.Controls.SpellCheck.SpellingReform%2A> свойства из, <xref:System.Windows.Controls.SpellCheck>.  
  
<a name="dependencyPropertyInfo_SpellingReform"></a>   
## <a name="dependency-property-information"></a>Сведения о свойстве зависимостей  
  
|||  
|-|-|  
|Поле идентификатора|<xref:System.Windows.Controls.SpellCheck.SpellingReformProperty>|  
|Значение свойства метаданных `true`|None|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellingReformProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SpellingReformProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SpellingReformProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SpellingReformProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SpellingReformProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SpellingReformProperty : System.Windows.DependencyProperty" Usage="System.Windows.Controls.SpellCheck.SpellingReformProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationFramework</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Определяет свойство зависимостей <see cref="P:System.Windows.Controls.SpellCheck.SpellingReform" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>